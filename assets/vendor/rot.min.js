


<!DOCTYPE html>
<html lang="en" class=" is-copy-enabled">
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# object: http://ogp.me/ns/object# article: http://ogp.me/ns/article# profile: http://ogp.me/ns/profile#">
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta http-equiv="Content-Language" content="en">
    <meta name="viewport" content="width=1020">
    
    
    <title>rot.js/rot.min.js at master · ondras/rot.js</title>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-touch-icon-114.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-touch-icon-114.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-touch-icon-144.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-touch-icon-144.png">
    <meta property="fb:app_id" content="1401488693436528">

      <meta content="@github" name="twitter:site" /><meta content="summary" name="twitter:card" /><meta content="ondras/rot.js" name="twitter:title" /><meta content="rot.js - ROguelike Toolkit" name="twitter:description" /><meta content="https://avatars2.githubusercontent.com/u/192172?v=3&amp;s=400" name="twitter:image:src" />
      <meta content="GitHub" property="og:site_name" /><meta content="object" property="og:type" /><meta content="https://avatars2.githubusercontent.com/u/192172?v=3&amp;s=400" property="og:image" /><meta content="ondras/rot.js" property="og:title" /><meta content="https://github.com/ondras/rot.js" property="og:url" /><meta content="rot.js - ROguelike Toolkit" property="og:description" />
      <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">
    <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">
    <link rel="assets" href="https://assets-cdn.github.com/">
    <link rel="web-socket" href="wss://live.github.com/_sockets/MTQ4NjQyMzc6N2Y4MjM1NDQzOGZkMzBlYjE0YWI1YzZkMzBmYTFiYWU6OGZkZjQ5NzhjNzI0YjdhYTBhMWI4ZjFlYWZmOTg4ZmE3ZTFiYTM5MDJjOTE1MjcyODY3OGQ4YWFkNGVlMmM0ZA==--7dc839a1ecfac798cd8cf6da8169b6024dc9d2c6">
    <meta name="pjax-timeout" content="1000">
    <link rel="sudo-modal" href="/sessions/sudo_modal">

    <meta name="msapplication-TileImage" content="/windows-tile.png">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="selected-link" value="repo_source" data-pjax-transient>

    <meta name="google-site-verification" content="KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU">
    <meta name="google-analytics" content="UA-3769691-2">

<meta content="collector.githubapp.com" name="octolytics-host" /><meta content="collector-cdn.github.com" name="octolytics-script-host" /><meta content="github" name="octolytics-app-id" /><meta content="AE19DB1B:07CA:9FAAC34:561AD204" name="octolytics-dimension-request_id" /><meta content="14864237" name="octolytics-actor-id" /><meta content="TheAlchemist64" name="octolytics-actor-login" /><meta content="8e782668d2631aaa492f1e0cd74b8cde46b056e07774272cbc65a7b6b4002dd8" name="octolytics-actor-hash" />

<meta content="Rails, view, blob#show" data-pjax-transient="true" name="analytics-event" />


  <meta class="js-ga-set" name="dimension1" content="Logged In">
    <meta class="js-ga-set" name="dimension4" content="Current repo nav">




    <meta name="is-dotcom" content="true">
        <meta name="hostname" content="github.com">
    <meta name="user-login" content="TheAlchemist64">

      <link rel="mask-icon" href="https://assets-cdn.github.com/pinned-octocat.svg" color="#4078c0">
      <link rel="icon" type="image/x-icon" href="https://assets-cdn.github.com/favicon.ico">

      <!-- </textarea> --><!-- '"` --><meta content="authenticity_token" name="csrf-param" />
<meta content="LwN9446b0GBK7Ggpjh2MmTs4VPYlvDsvEnjzZ7XxtMKgWiu8ndIKLBItLsYTFDJFd+CrWADLTIcqSDXiD62fJA==" name="csrf-token" />
    <meta content="555a6a1745fc142087579366dcbc804511428f4b" name="form-nonce" />

    <link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/github-4fb2951910292e447b02038004afc1cb52066737eae7585406ec7f5d507810af.css" media="all" rel="stylesheet" />
    <link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/github2-bed57ffc09d9dc51b56b011c61d551407cc16a668491bcfb4f5d89bbad0067d8.css" media="all" rel="stylesheet" />
    
    
    


    <meta http-equiv="x-pjax-version" content="a2f7fe5a5c746351f9683898adb7646c">

      
  <meta name="description" content="rot.js - ROguelike Toolkit">
  <meta name="go-import" content="github.com/ondras/rot.js git https://github.com/ondras/rot.js.git">

  <meta content="192172" name="octolytics-dimension-user_id" /><meta content="ondras" name="octolytics-dimension-user_login" /><meta content="4391145" name="octolytics-dimension-repository_id" /><meta content="ondras/rot.js" name="octolytics-dimension-repository_nwo" /><meta content="true" name="octolytics-dimension-repository_public" /><meta content="false" name="octolytics-dimension-repository_is_fork" /><meta content="4391145" name="octolytics-dimension-repository_network_root_id" /><meta content="ondras/rot.js" name="octolytics-dimension-repository_network_root_nwo" />
  <link href="https://github.com/ondras/rot.js/commits/master.atom" rel="alternate" title="Recent Commits to rot.js:master" type="application/atom+xml">

  </head>


  <body class="logged_in   env-production macintosh vis-public page-blob">
    <a href="#start-of-content" tabindex="1" class="accessibility-aid js-skip-to-content">Skip to content</a>

    
    
    



      <div class="header header-logged-in true" role="banner">
  <div class="container clearfix">

    <a class="header-logo-invertocat" href="https://github.com/" data-hotkey="g d" aria-label="Homepage" data-ga-click="Header, go to dashboard, icon:logo">
  <span class="mega-octicon octicon-mark-github"></span>
</a>


      <div class="site-search repo-scope js-site-search" role="search">
          <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/ondras/rot.js/search" class="js-site-search-form" data-global-search-url="/search" data-repo-search-url="/ondras/rot.js/search" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
  <label class="js-chromeless-input-container form-control">
    <div class="scope-badge">This repository</div>
    <input type="text"
      class="js-site-search-focus js-site-search-field is-clearable chromeless-input"
      data-hotkey="s"
      name="q"
      placeholder="Search"
      aria-label="Search this repository"
      data-global-scope-placeholder="Search GitHub"
      data-repo-scope-placeholder="Search"
      tabindex="1"
      autocapitalize="off">
  </label>
</form>
      </div>

      <ul class="header-nav left" role="navigation">
        <li class="header-nav-item">
          <a href="/pulls" class="js-selected-navigation-item header-nav-link" data-ga-click="Header, click, Nav menu - item:pulls context:user" data-hotkey="g p" data-selected-links="/pulls /pulls/assigned /pulls/mentioned /pulls">
            Pull requests
</a>        </li>
        <li class="header-nav-item">
          <a href="/issues" class="js-selected-navigation-item header-nav-link" data-ga-click="Header, click, Nav menu - item:issues context:user" data-hotkey="g i" data-selected-links="/issues /issues/assigned /issues/mentioned /issues">
            Issues
</a>        </li>
          <li class="header-nav-item">
            <a class="header-nav-link" href="https://gist.github.com/" data-ga-click="Header, go to gist, text:gist">Gist</a>
          </li>
      </ul>

    
<ul class="header-nav user-nav right" id="user-links">
  <li class="header-nav-item">
      <span class="js-socket-channel js-updatable-content"
        data-channel="notification-changed:TheAlchemist64"
        data-url="/notifications/header">
      <a href="/notifications" aria-label="You have no unread notifications" class="header-nav-link notification-indicator tooltipped tooltipped-s" data-ga-click="Header, go to notifications, icon:read" data-hotkey="g n">
          <span class="mail-status all-read"></span>
          <span class="octicon octicon-bell"></span>
</a>  </span>

  </li>

  <li class="header-nav-item dropdown js-menu-container">
    <a class="header-nav-link tooltipped tooltipped-s js-menu-target" href="/new"
       aria-label="Create new…"
       data-ga-click="Header, create new, icon:add">
      <span class="octicon octicon-plus left"></span>
      <span class="dropdown-caret"></span>
    </a>

    <div class="dropdown-menu-content js-menu-content">
      <ul class="dropdown-menu dropdown-menu-sw">
        
<a class="dropdown-item" href="/new" data-ga-click="Header, create new repository">
  New repository
</a>


  <a class="dropdown-item" href="/organizations/new" data-ga-click="Header, create new organization">
    New organization
  </a>



  <div class="dropdown-divider"></div>
  <div class="dropdown-header">
    <span title="ondras/rot.js">This repository</span>
  </div>
    <a class="dropdown-item" href="/ondras/rot.js/issues/new" data-ga-click="Header, create new issue">
      New issue
    </a>

      </ul>
    </div>
  </li>

  <li class="header-nav-item dropdown js-menu-container">
    <a class="header-nav-link name tooltipped tooltipped-s js-menu-target" href="/TheAlchemist64"
       aria-label="View profile and more"
       data-ga-click="Header, show menu, icon:avatar">
      <img alt="@TheAlchemist64" class="avatar" height="20" src="https://avatars2.githubusercontent.com/u/14864237?v=3&amp;s=40" width="20" />
      <span class="dropdown-caret"></span>
    </a>

    <div class="dropdown-menu-content js-menu-content">
      <div class="dropdown-menu  dropdown-menu-sw">
        <div class=" dropdown-header header-nav-current-user css-truncate">
            Signed in as <strong class="css-truncate-target">TheAlchemist64</strong>

        </div>


        <div class="dropdown-divider"></div>

          <a class="dropdown-item" href="/TheAlchemist64" data-ga-click="Header, go to profile, text:your profile">
            Your profile
          </a>
        <a class="dropdown-item" href="/stars" data-ga-click="Header, go to starred repos, text:your stars">
          Your stars
        </a>
        <a class="dropdown-item" href="/explore" data-ga-click="Header, go to explore, text:explore">
          Explore
        </a>
          <a class="dropdown-item" href="/integrations" data-ga-click="Header, go to integrations, text:integrations">
            Integrations
          </a>
        <a class="dropdown-item" href="https://help.github.com" data-ga-click="Header, go to help, text:help">
          Help
        </a>

          <div class="dropdown-divider"></div>

          <a class="dropdown-item" href="/settings/profile" data-ga-click="Header, go to settings, icon:settings">
            Settings
          </a>

          <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/logout" class="logout-form" data-form-nonce="555a6a1745fc142087579366dcbc804511428f4b" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="in1HOxCkx2tr010b9XOXrAEWD3CPZo75AxPRX7pLg0tuDKHP3liz9TnDQxnuMTRQCM8WmKKrsdbNzcjDnwLE3g==" /></div>
            <button class="dropdown-item dropdown-signout" data-ga-click="Header, sign out, icon:logout">
              Sign out
            </button>
</form>
      </div>
    </div>
  </li>
</ul>


    
  </div>
</div>

      

      


    <div id="start-of-content" class="accessibility-aid"></div>

    <div id="js-flash-container">
</div>


    <div role="main" class="main-content">
        <div itemscope itemtype="http://schema.org/WebPage">
    <div class="pagehead repohead instapaper_ignore readability-menu">

      <div class="container">

        <div class="clearfix">
          

<ul class="pagehead-actions">

  <li>
      <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/notifications/subscribe" class="js-social-container" data-autosubmit="true" data-form-nonce="555a6a1745fc142087579366dcbc804511428f4b" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="VpaZirNTruSqBJXi2w9QCzuqBB1L5vzbMem2vkmSXSK1eDY4IDq/QCj8y0AGBOh7jK8Sjc9CgyLNa7xHRG7cZQ==" /></div>    <input id="repository_id" name="repository_id" type="hidden" value="4391145" />

      <div class="select-menu js-menu-container js-select-menu">
        <a href="/ondras/rot.js/subscription"
          class="btn btn-sm btn-with-count select-menu-button js-menu-target" role="button" tabindex="0" aria-haspopup="true"
          data-ga-click="Repository, click Watch settings, action:blob#show">
          <span class="js-select-button">
            <span class="octicon octicon-eye"></span>
            Watch
          </span>
        </a>
        <a class="social-count js-social-count" href="/ondras/rot.js/watchers">
          75
        </a>

        <div class="select-menu-modal-holder">
          <div class="select-menu-modal subscription-menu-modal js-menu-content" aria-hidden="true">
            <div class="select-menu-header">
              <span class="select-menu-title">Notifications</span>
              <span class="octicon octicon-x js-menu-close" role="button" aria-label="Close"></span>
            </div>

            <div class="select-menu-list js-navigation-container" role="menu">

              <div class="select-menu-item js-navigation-item selected" role="menuitem" tabindex="0">
                <span class="select-menu-item-icon octicon octicon-check"></span>
                <div class="select-menu-item-text">
                  <input checked="checked" id="do_included" name="do" type="radio" value="included" />
                  <span class="select-menu-item-heading">Not watching</span>
                  <span class="description">Be notified when participating or @mentioned.</span>
                  <span class="js-select-button-text hidden-select-button-text">
                    <span class="octicon octicon-eye"></span>
                    Watch
                  </span>
                </div>
              </div>

              <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
                <span class="select-menu-item-icon octicon octicon octicon-check"></span>
                <div class="select-menu-item-text">
                  <input id="do_subscribed" name="do" type="radio" value="subscribed" />
                  <span class="select-menu-item-heading">Watching</span>
                  <span class="description">Be notified of all conversations.</span>
                  <span class="js-select-button-text hidden-select-button-text">
                    <span class="octicon octicon-eye"></span>
                    Unwatch
                  </span>
                </div>
              </div>

              <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
                <span class="select-menu-item-icon octicon octicon-check"></span>
                <div class="select-menu-item-text">
                  <input id="do_ignore" name="do" type="radio" value="ignore" />
                  <span class="select-menu-item-heading">Ignoring</span>
                  <span class="description">Never be notified.</span>
                  <span class="js-select-button-text hidden-select-button-text">
                    <span class="octicon octicon-mute"></span>
                    Stop ignoring
                  </span>
                </div>
              </div>

            </div>

          </div>
        </div>
      </div>
</form>
  </li>

  <li>
    
  <div class="js-toggler-container js-social-container starring-container ">

    <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/ondras/rot.js/unstar" class="js-toggler-form starred js-unstar-button" data-form-nonce="555a6a1745fc142087579366dcbc804511428f4b" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="3VsyCzCK40NEd6zBQYyVcPNx1zFYnihCfg6d9J1WbxEQYuBrmEzOb/51+fgnku2gkqbjugT1ixsIpXLWQCBWMg==" /></div>
      <button
        class="btn btn-sm btn-with-count js-toggler-target"
        aria-label="Unstar this repository" title="Unstar ondras/rot.js"
        data-ga-click="Repository, click unstar button, action:blob#show; text:Unstar">
        <span class="octicon octicon-star"></span>
        Unstar
      </button>
        <a class="social-count js-social-count" href="/ondras/rot.js/stargazers">
          728
        </a>
</form>
    <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/ondras/rot.js/star" class="js-toggler-form unstarred js-star-button" data-form-nonce="555a6a1745fc142087579366dcbc804511428f4b" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="I2rTtVRMIkutxTJTJaKL3WMbUuNSJN0YxpLWTNs+bL/YlrUVI80jr83EtWSLk8qjm5gYOIsCwQClbvimGrVBOw==" /></div>
      <button
        class="btn btn-sm btn-with-count js-toggler-target"
        aria-label="Star this repository" title="Star ondras/rot.js"
        data-ga-click="Repository, click star button, action:blob#show; text:Star">
        <span class="octicon octicon-star"></span>
        Star
      </button>
        <a class="social-count js-social-count" href="/ondras/rot.js/stargazers">
          728
        </a>
</form>  </div>

  </li>

  <li>
          <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/ondras/rot.js/fork" class="btn-with-count" data-form-nonce="555a6a1745fc142087579366dcbc804511428f4b" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="n8P6zUEJj3ld3A8w4yji2O8U5+CxXREi0AJ/LkG9jXfsuHG2uxfFkYg7vmtR1SGrn9YqtyXULYWcdIj1FyYUhA==" /></div>
            <button
                type="submit"
                class="btn btn-sm btn-with-count"
                data-ga-click="Repository, show fork modal, action:blob#show; text:Fork"
                title="Fork your own copy of ondras/rot.js to your account"
                aria-label="Fork your own copy of ondras/rot.js to your account">
              <span class="octicon octicon-repo-forked"></span>
              Fork
            </button>
</form>
    <a href="/ondras/rot.js/network" class="social-count">
      111
    </a>
  </li>
</ul>

          <h1 itemscope itemtype="http://data-vocabulary.org/Breadcrumb" class="entry-title public ">
  <span class="mega-octicon octicon-repo"></span>
  <span class="author"><a href="/ondras" class="url fn" itemprop="url" rel="author"><span itemprop="title">ondras</span></a></span><!--
--><span class="path-divider">/</span><!--
--><strong><a href="/ondras/rot.js" data-pjax="#js-repo-pjax-container">rot.js</a></strong>

  <span class="page-context-loader">
    <img alt="" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
  </span>

</h1>

        </div>
      </div>
    </div>

    <div class="container">
      <div class="repository-with-sidebar repo-container new-discussion-timeline ">
        <div class="repository-sidebar clearfix">
          
<nav class="sunken-menu repo-nav js-repo-nav js-sidenav-container-pjax js-octicon-loaders"
     role="navigation"
     data-pjax="#js-repo-pjax-container"
     data-issue-count-url="/ondras/rot.js/issues/counts">
  <ul class="sunken-menu-group">
    <li class="tooltipped tooltipped-w" aria-label="Code">
      <a href="/ondras/rot.js" aria-label="Code" aria-selected="true" class="js-selected-navigation-item selected sunken-menu-item" data-hotkey="g c" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches /ondras/rot.js">
        <span class="octicon octicon-code"></span> <span class="full-word">Code</span>
        <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>    </li>

      <li class="tooltipped tooltipped-w" aria-label="Issues">
        <a href="/ondras/rot.js/issues" aria-label="Issues" class="js-selected-navigation-item sunken-menu-item" data-hotkey="g i" data-selected-links="repo_issues repo_labels repo_milestones /ondras/rot.js/issues">
          <span class="octicon octicon-issue-opened"></span> <span class="full-word">Issues</span>
          <span class="js-issue-replace-counter"></span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

    <li class="tooltipped tooltipped-w" aria-label="Pull requests">
      <a href="/ondras/rot.js/pulls" aria-label="Pull requests" class="js-selected-navigation-item sunken-menu-item" data-hotkey="g p" data-selected-links="repo_pulls /ondras/rot.js/pulls">
          <span class="octicon octicon-git-pull-request"></span> <span class="full-word">Pull requests</span>
          <span class="js-pull-replace-counter"></span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>    </li>

      <li class="tooltipped tooltipped-w" aria-label="Wiki">
        <a href="/ondras/rot.js/wiki" aria-label="Wiki" class="js-selected-navigation-item sunken-menu-item" data-hotkey="g w" data-selected-links="repo_wiki /ondras/rot.js/wiki">
          <span class="octicon octicon-book"></span> <span class="full-word">Wiki</span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>
  </ul>
  <div class="sunken-menu-separator"></div>
  <ul class="sunken-menu-group">

    <li class="tooltipped tooltipped-w" aria-label="Pulse">
      <a href="/ondras/rot.js/pulse" aria-label="Pulse" class="js-selected-navigation-item sunken-menu-item" data-selected-links="pulse /ondras/rot.js/pulse">
        <span class="octicon octicon-pulse"></span> <span class="full-word">Pulse</span>
        <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>    </li>

    <li class="tooltipped tooltipped-w" aria-label="Graphs">
      <a href="/ondras/rot.js/graphs" aria-label="Graphs" class="js-selected-navigation-item sunken-menu-item" data-selected-links="repo_graphs repo_contributors /ondras/rot.js/graphs">
        <span class="octicon octicon-graph"></span> <span class="full-word">Graphs</span>
        <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>    </li>
  </ul>


</nav>

            <div class="only-with-full-nav">
                
<div class="js-clone-url clone-url open"
  data-protocol-type="http">
  <h3 class="text-small"><span class="text-emphasized">HTTPS</span> clone URL</h3>
  <div class="input-group js-zeroclipboard-container">
    <input type="text" class="input-mini text-small input-monospace js-url-field js-zeroclipboard-target"
           value="https://github.com/ondras/rot.js.git" readonly="readonly" aria-label="HTTPS clone URL">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard btn btn-sm zeroclipboard-button tooltipped tooltipped-s" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>

  
<div class="js-clone-url clone-url "
  data-protocol-type="ssh">
  <h3 class="text-small"><span class="text-emphasized">SSH</span> clone URL</h3>
  <div class="input-group js-zeroclipboard-container">
    <input type="text" class="input-mini text-small input-monospace js-url-field js-zeroclipboard-target"
           value="git@github.com:ondras/rot.js.git" readonly="readonly" aria-label="SSH clone URL">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard btn btn-sm zeroclipboard-button tooltipped tooltipped-s" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>

  
<div class="js-clone-url clone-url "
  data-protocol-type="subversion">
  <h3 class="text-small"><span class="text-emphasized">Subversion</span> checkout URL</h3>
  <div class="input-group js-zeroclipboard-container">
    <input type="text" class="input-mini text-small input-monospace js-url-field js-zeroclipboard-target"
           value="https://github.com/ondras/rot.js" readonly="readonly" aria-label="Subversion checkout URL">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard btn btn-sm zeroclipboard-button tooltipped tooltipped-s" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>



<div class="clone-options text-small">You can clone with
  <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/users/set_protocol?protocol_selector=http&amp;protocol_type=clone" class="inline-form js-clone-selector-form is-enabled" data-form-nonce="555a6a1745fc142087579366dcbc804511428f4b" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="FucKGOl+5rHvl4HcjsIskxT4QvaZGme8BgDNznPD4Rxh0N+AJrCzCkN7R01e+NE2T+c2RWNt0O1Y52By9qcPhw==" /></div><button class="btn-link js-clone-selector" data-protocol="http" type="submit">HTTPS</button></form>, <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/users/set_protocol?protocol_selector=ssh&amp;protocol_type=clone" class="inline-form js-clone-selector-form is-enabled" data-form-nonce="555a6a1745fc142087579366dcbc804511428f4b" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="XxIPAJISZm1PVdbu6X4UvRUNxem7McrCoXXgZfG2/lo+KHh8MRLgbfqm1vtICgutqtcZZ0cIUi9O8KiWxd8/Qg==" /></div><button class="btn-link js-clone-selector" data-protocol="ssh" type="submit">SSH</button></form>, or <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/users/set_protocol?protocol_selector=subversion&amp;protocol_type=clone" class="inline-form js-clone-selector-form is-enabled" data-form-nonce="555a6a1745fc142087579366dcbc804511428f4b" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="aAKWUYTcaBB9WtpS/9wGT1bkQCrT84JfhLCn6d3Q0a6b68/yOebHesSa23qGR/QCQH1uachwkqqq5nB1He4W8g==" /></div><button class="btn-link js-clone-selector" data-protocol="subversion" type="submit">Subversion</button></form>.
  <a href="https://help.github.com/articles/which-remote-url-should-i-use" class="help tooltipped tooltipped-n" aria-label="Get help on which URL is right for you.">
    <span class="octicon octicon-question"></span>
  </a>
</div>
  <a href="https://mac.github.com" class="btn btn-sm sidebar-button" title="Save ondras/rot.js to your computer and use it in GitHub Desktop." aria-label="Save ondras/rot.js to your computer and use it in GitHub Desktop.">
    <span class="octicon octicon-desktop-download"></span>
    Clone in Desktop
  </a>

              <a href="/ondras/rot.js/archive/master.zip"
                 class="btn btn-sm sidebar-button"
                 aria-label="Download the contents of ondras/rot.js as a zip file"
                 title="Download the contents of ondras/rot.js as a zip file"
                 rel="nofollow">
                <span class="octicon octicon-cloud-download"></span>
                Download ZIP
              </a>
            </div>
        </div>
        <div id="js-repo-pjax-container" class="repository-content context-loader-container" data-pjax-container>

          

<a href="/ondras/rot.js/blob/54067bf4b51051beed4de4a267ddde0d0f89c9cf/rot.min.js" class="hidden js-permalink-shortcut" data-hotkey="y">Permalink</a>

<!-- blob contrib key: blob_contributors:v21:8f406d302c371e1583709e73abf54659 -->

  <div class="file-navigation js-zeroclipboard-container">
    
<div class="select-menu js-menu-container js-select-menu left">
  <span class="btn btn-sm select-menu-button js-menu-target css-truncate" data-hotkey="w"
    title="master"
    role="button" aria-label="Switch branches or tags" tabindex="0" aria-haspopup="true">
    <i>Branch:</i>
    <span class="js-select-button css-truncate-target">master</span>
  </span>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax aria-hidden="true">

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <span class="select-menu-title">Switch branches/tags</span>
        <span class="octicon octicon-x js-menu-close" role="button" aria-label="Close"></span>
      </div>

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" data-filter-placeholder="Filter branches/tags" class="js-select-menu-tab" role="tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" data-filter-placeholder="Find a tag…" class="js-select-menu-tab" role="tab">Tags</a>
            </li>
          </ul>
        </div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches" role="menu">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <a class="select-menu-item js-navigation-item js-navigation-open "
               href="/ondras/rot.js/blob/gh-pages/rot.min.js"
               data-name="gh-pages"
               data-skip-pjax="true"
               rel="nofollow">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <span class="select-menu-item-text css-truncate-target" title="gh-pages">
                gh-pages
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open selected"
               href="/ondras/rot.js/blob/master/rot.min.js"
               data-name="master"
               data-skip-pjax="true"
               rel="nofollow">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <span class="select-menu-item-text css-truncate-target" title="master">
                master
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
               href="/ondras/rot.js/blob/newhex/rot.min.js"
               data-name="newhex"
               data-skip-pjax="true"
               rel="nofollow">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <span class="select-menu-item-text css-truncate-target" title="newhex">
                newhex
              </span>
            </a>
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/ondras/rot.js/tree/v0.5.0/rot.min.js"
                 data-name="v0.5.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="v0.5.0">v0.5.0</a>
            </div>
        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div>

    </div>
  </div>
</div>

    <div class="btn-group right">
      <a href="/ondras/rot.js/find/master"
            class="js-show-file-finder btn btn-sm empty-icon tooltipped tooltipped-nw"
            data-pjax
            data-hotkey="t"
            aria-label="Quickly jump between files">
        <span class="octicon octicon-list-unordered"></span>
      </a>
      <button aria-label="Copy file path to clipboard" class="js-zeroclipboard btn btn-sm zeroclipboard-button tooltipped tooltipped-s" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </div>

    <div class="breadcrumb js-zeroclipboard-target">
      <span class="repo-root js-repo-root"><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/ondras/rot.js" class="" data-branch="master" data-pjax="true" itemscope="url"><span itemprop="title">rot.js</span></a></span></span><span class="separator">/</span><strong class="final-path">rot.min.js</strong>
    </div>
  </div>


  <div class="commit file-history-tease">
    <div class="file-history-tease-header">
        <img alt="@ondras" class="avatar" height="24" src="https://avatars0.githubusercontent.com/u/192172?v=3&amp;s=48" width="24" />
        <span class="author"><a href="/ondras" rel="author">ondras</a></span>
        <time datetime="2015-09-03T05:15:00Z" is="relative-time">Sep 3, 2015</time>
        <div class="commit-title">
            <a href="/ondras/rot.js/commit/74117c6b1160c57ada1599c1310888a765f48b3d" class="message" data-pjax="true" title="cleaning up features.js, fixes #61">cleaning up features.js, fixes</a> <a href="https://github.com/ondras/rot.js/issues/61" class="issue-link" title="Things I noticed in tile.js">#61</a>
        </div>
    </div>

    <div class="participation">
      <p class="quickstat">
        <a href="#blob_contributors_box" rel="facebox">
          <strong>4</strong>
           contributors
        </a>
      </p>
          <a class="avatar-link tooltipped tooltipped-s" aria-label="ondras" href="/ondras/rot.js/commits/master/rot.min.js?author=ondras"><img alt="@ondras" class="avatar" height="20" src="https://avatars2.githubusercontent.com/u/192172?v=3&amp;s=40" width="20" /> </a>
    <a class="avatar-link tooltipped tooltipped-s" aria-label="thesnarky1" href="/ondras/rot.js/commits/master/rot.min.js?author=thesnarky1"><img alt="@thesnarky1" class="avatar" height="20" src="https://avatars3.githubusercontent.com/u/13543?v=3&amp;s=40" width="20" /> </a>
    <a class="avatar-link tooltipped tooltipped-s" aria-label="statico" href="/ondras/rot.js/commits/master/rot.min.js?author=statico"><img alt="@statico" class="avatar" height="20" src="https://avatars2.githubusercontent.com/u/137158?v=3&amp;s=40" width="20" /> </a>
    <a class="avatar-link tooltipped tooltipped-s" aria-label="albinodervall" href="/ondras/rot.js/commits/master/rot.min.js?author=albinodervall"><img alt="@albinodervall" class="avatar" height="20" src="https://avatars0.githubusercontent.com/u/3341107?v=3&amp;s=40" width="20" /> </a>


    </div>
    <div id="blob_contributors_box" style="display:none">
      <h2 class="facebox-header" data-facebox-id="facebox-header">Users who have contributed to this file</h2>
      <ul class="facebox-user-list" data-facebox-id="facebox-description">
          <li class="facebox-user-list-item">
            <img alt="@ondras" height="24" src="https://avatars0.githubusercontent.com/u/192172?v=3&amp;s=48" width="24" />
            <a href="/ondras">ondras</a>
          </li>
          <li class="facebox-user-list-item">
            <img alt="@thesnarky1" height="24" src="https://avatars1.githubusercontent.com/u/13543?v=3&amp;s=48" width="24" />
            <a href="/thesnarky1">thesnarky1</a>
          </li>
          <li class="facebox-user-list-item">
            <img alt="@statico" height="24" src="https://avatars0.githubusercontent.com/u/137158?v=3&amp;s=48" width="24" />
            <a href="/statico">statico</a>
          </li>
          <li class="facebox-user-list-item">
            <img alt="@albinodervall" height="24" src="https://avatars2.githubusercontent.com/u/3341107?v=3&amp;s=48" width="24" />
            <a href="/albinodervall">albinodervall</a>
          </li>
      </ul>
    </div>
  </div>

<div class="file">
  <div class="file-header">
  <div class="file-actions">

    <div class="btn-group">
      <a href="/ondras/rot.js/raw/master/rot.min.js" class="btn btn-sm " id="raw-url">Raw</a>
        <a href="/ondras/rot.js/blame/master/rot.min.js" class="btn btn-sm js-update-url-with-hash">Blame</a>
      <a href="/ondras/rot.js/commits/master/rot.min.js" class="btn btn-sm " rel="nofollow">History</a>
    </div>

      <a class="octicon-btn tooltipped tooltipped-nw"
         href="https://mac.github.com"
         aria-label="Open this file in GitHub Desktop"
         data-ga-click="Repository, open with desktop, type:mac">
          <span class="octicon octicon-device-desktop"></span>
      </a>

        <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/ondras/rot.js/edit/master/rot.min.js" class="inline-form js-update-url-with-hash" data-form-nonce="555a6a1745fc142087579366dcbc804511428f4b" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="V3j63ggAi0thj777x/Ou2V5GgaZnBctIhGvlJI6i5SIbjfDiizTtgYyb33BV2ibYDSjk8nCvEB6an4RLAk0Ckg==" /></div>
          <button class="octicon-btn tooltipped tooltipped-nw" type="submit"
            aria-label="Fork this project and edit the file" data-hotkey="e" data-disable-with>
            <span class="octicon octicon-pencil"></span>
          </button>
</form>        <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/ondras/rot.js/delete/master/rot.min.js" class="inline-form" data-form-nonce="555a6a1745fc142087579366dcbc804511428f4b" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="Y/lk+ww3GukegAKWbAtnreoZiQ3rsuuWTLzJj7N6Z0u/8nMkuj7a4XxxfzMGjHAzz/ZoZgxvwbXGgJDcNMb/Pw==" /></div>
          <button class="octicon-btn octicon-btn-danger tooltipped tooltipped-nw" type="submit"
            aria-label="Fork this project and delete the file" data-disable-with>
            <span class="octicon octicon-trashcan"></span>
          </button>
</form>  </div>

  <div class="file-info">
      155 lines (154 sloc)
      <span class="file-info-divider"></span>
    62.2 KB
  </div>
</div>

  

  <div class="blob-wrapper data type-javascript">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">ROT</span><span class="pl-k">=</span>{<span class="pl-en">isSupported</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span><span class="pl-k">!</span>(<span class="pl-k">!</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>).getContext<span class="pl-k">||!</span><span class="pl-c1">Function</span>.<span class="pl-c1">prototype</span>.bind)},DEFAULT_WIDTH<span class="pl-k">:</span><span class="pl-c1">80</span>,DEFAULT_HEIGHT<span class="pl-k">:</span><span class="pl-c1">25</span>,DIRS<span class="pl-k">:</span>{<span class="pl-c1">4</span><span class="pl-k">:</span>[[<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>],[<span class="pl-c1">1</span>,<span class="pl-c1">0</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>],[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>]],<span class="pl-c1">8</span><span class="pl-k">:</span>[[<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>],[<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>],[<span class="pl-c1">1</span>,<span class="pl-c1">0</span>],[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>],[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>],[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>],[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>]],<span class="pl-c1">6</span><span class="pl-k">:</span>[[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>],[<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>],[<span class="pl-c1">2</span>,<span class="pl-c1">0</span>],[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>],[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>],[<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-c1">0</span>]]},VK_CANCEL<span class="pl-k">:</span><span class="pl-c1">3</span>,VK_HELP<span class="pl-k">:</span><span class="pl-c1">6</span>,VK_BACK_SPACE<span class="pl-k">:</span><span class="pl-c1">8</span>,VK_TAB<span class="pl-k">:</span><span class="pl-c1">9</span>,VK_CLEAR<span class="pl-k">:</span><span class="pl-c1">12</span>,VK_RETURN<span class="pl-k">:</span><span class="pl-c1">13</span>,VK_ENTER<span class="pl-k">:</span><span class="pl-c1">14</span>,VK_SHIFT<span class="pl-k">:</span><span class="pl-c1">16</span>,VK_CONTROL<span class="pl-k">:</span><span class="pl-c1">17</span>,VK_ALT<span class="pl-k">:</span><span class="pl-c1">18</span>,VK_PAUSE<span class="pl-k">:</span><span class="pl-c1">19</span>,VK_CAPS_LOCK<span class="pl-k">:</span><span class="pl-c1">20</span>,VK_ESCAPE<span class="pl-k">:</span><span class="pl-c1">27</span>,VK_SPACE<span class="pl-k">:</span><span class="pl-c1">32</span>,VK_PAGE_UP<span class="pl-k">:</span><span class="pl-c1">33</span>,VK_PAGE_DOWN<span class="pl-k">:</span><span class="pl-c1">34</span>,VK_END<span class="pl-k">:</span><span class="pl-c1">35</span>,</td>
      </tr>
      <tr>
        <td id="L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="LC2" class="blob-code blob-code-inner js-file-line">VK_HOME<span class="pl-k">:</span><span class="pl-c1">36</span>,VK_LEFT<span class="pl-k">:</span><span class="pl-c1">37</span>,VK_UP<span class="pl-k">:</span><span class="pl-c1">38</span>,VK_RIGHT<span class="pl-k">:</span><span class="pl-c1">39</span>,VK_DOWN<span class="pl-k">:</span><span class="pl-c1">40</span>,VK_PRINTSCREEN<span class="pl-k">:</span><span class="pl-c1">44</span>,VK_INSERT<span class="pl-k">:</span><span class="pl-c1">45</span>,VK_DELETE<span class="pl-k">:</span><span class="pl-c1">46</span>,VK_0<span class="pl-k">:</span><span class="pl-c1">48</span>,VK_1<span class="pl-k">:</span><span class="pl-c1">49</span>,VK_2<span class="pl-k">:</span><span class="pl-c1">50</span>,VK_3<span class="pl-k">:</span><span class="pl-c1">51</span>,VK_4<span class="pl-k">:</span><span class="pl-c1">52</span>,VK_5<span class="pl-k">:</span><span class="pl-c1">53</span>,VK_6<span class="pl-k">:</span><span class="pl-c1">54</span>,VK_7<span class="pl-k">:</span><span class="pl-c1">55</span>,VK_8<span class="pl-k">:</span><span class="pl-c1">56</span>,VK_9<span class="pl-k">:</span><span class="pl-c1">57</span>,VK_COLON<span class="pl-k">:</span><span class="pl-c1">58</span>,VK_SEMICOLON<span class="pl-k">:</span><span class="pl-c1">59</span>,VK_LESS_THAN<span class="pl-k">:</span><span class="pl-c1">60</span>,VK_EQUALS<span class="pl-k">:</span><span class="pl-c1">61</span>,VK_GREATER_THAN<span class="pl-k">:</span><span class="pl-c1">62</span>,VK_QUESTION_MARK<span class="pl-k">:</span><span class="pl-c1">63</span>,VK_AT<span class="pl-k">:</span><span class="pl-c1">64</span>,VK_A<span class="pl-k">:</span><span class="pl-c1">65</span>,VK_B<span class="pl-k">:</span><span class="pl-c1">66</span>,VK_C<span class="pl-k">:</span><span class="pl-c1">67</span>,VK_D<span class="pl-k">:</span><span class="pl-c1">68</span>,VK_E<span class="pl-k">:</span><span class="pl-c1">69</span>,VK_F<span class="pl-k">:</span><span class="pl-c1">70</span>,VK_G<span class="pl-k">:</span><span class="pl-c1">71</span>,VK_H<span class="pl-k">:</span><span class="pl-c1">72</span>,VK_I<span class="pl-k">:</span><span class="pl-c1">73</span>,VK_J<span class="pl-k">:</span><span class="pl-c1">74</span>,VK_K<span class="pl-k">:</span><span class="pl-c1">75</span>,VK_L<span class="pl-k">:</span><span class="pl-c1">76</span>,VK_M<span class="pl-k">:</span><span class="pl-c1">77</span>,VK_N<span class="pl-k">:</span><span class="pl-c1">78</span>,VK_O<span class="pl-k">:</span><span class="pl-c1">79</span>,VK_P<span class="pl-k">:</span><span class="pl-c1">80</span>,VK_Q<span class="pl-k">:</span><span class="pl-c1">81</span>,VK_R<span class="pl-k">:</span><span class="pl-c1">82</span>,VK_S<span class="pl-k">:</span><span class="pl-c1">83</span>,VK_T<span class="pl-k">:</span><span class="pl-c1">84</span>,VK_U<span class="pl-k">:</span><span class="pl-c1">85</span>,VK_V<span class="pl-k">:</span><span class="pl-c1">86</span>,VK_W<span class="pl-k">:</span><span class="pl-c1">87</span>,VK_X<span class="pl-k">:</span><span class="pl-c1">88</span>,VK_Y<span class="pl-k">:</span><span class="pl-c1">89</span>,VK_Z<span class="pl-k">:</span><span class="pl-c1">90</span>,VK_CONTEXT_MENU<span class="pl-k">:</span><span class="pl-c1">93</span>,</td>
      </tr>
      <tr>
        <td id="L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="LC3" class="blob-code blob-code-inner js-file-line">VK_NUMPAD0<span class="pl-k">:</span><span class="pl-c1">96</span>,VK_NUMPAD1<span class="pl-k">:</span><span class="pl-c1">97</span>,VK_NUMPAD2<span class="pl-k">:</span><span class="pl-c1">98</span>,VK_NUMPAD3<span class="pl-k">:</span><span class="pl-c1">99</span>,VK_NUMPAD4<span class="pl-k">:</span><span class="pl-c1">100</span>,VK_NUMPAD5<span class="pl-k">:</span><span class="pl-c1">101</span>,VK_NUMPAD6<span class="pl-k">:</span><span class="pl-c1">102</span>,VK_NUMPAD7<span class="pl-k">:</span><span class="pl-c1">103</span>,VK_NUMPAD8<span class="pl-k">:</span><span class="pl-c1">104</span>,VK_NUMPAD9<span class="pl-k">:</span><span class="pl-c1">105</span>,VK_MULTIPLY<span class="pl-k">:</span><span class="pl-c1">106</span>,VK_ADD<span class="pl-k">:</span><span class="pl-c1">107</span>,VK_SEPARATOR<span class="pl-k">:</span><span class="pl-c1">108</span>,VK_SUBTRACT<span class="pl-k">:</span><span class="pl-c1">109</span>,VK_DECIMAL<span class="pl-k">:</span><span class="pl-c1">110</span>,VK_DIVIDE<span class="pl-k">:</span><span class="pl-c1">111</span>,VK_F1<span class="pl-k">:</span><span class="pl-c1">112</span>,VK_F2<span class="pl-k">:</span><span class="pl-c1">113</span>,VK_F3<span class="pl-k">:</span><span class="pl-c1">114</span>,VK_F4<span class="pl-k">:</span><span class="pl-c1">115</span>,VK_F5<span class="pl-k">:</span><span class="pl-c1">116</span>,VK_F6<span class="pl-k">:</span><span class="pl-c1">117</span>,VK_F7<span class="pl-k">:</span><span class="pl-c1">118</span>,VK_F8<span class="pl-k">:</span><span class="pl-c1">119</span>,VK_F9<span class="pl-k">:</span><span class="pl-c1">120</span>,VK_F10<span class="pl-k">:</span><span class="pl-c1">121</span>,VK_F11<span class="pl-k">:</span><span class="pl-c1">122</span>,VK_F12<span class="pl-k">:</span><span class="pl-c1">123</span>,VK_F13<span class="pl-k">:</span><span class="pl-c1">124</span>,VK_F14<span class="pl-k">:</span><span class="pl-c1">125</span>,VK_F15<span class="pl-k">:</span><span class="pl-c1">126</span>,VK_F16<span class="pl-k">:</span><span class="pl-c1">127</span>,VK_F17<span class="pl-k">:</span><span class="pl-c1">128</span>,VK_F18<span class="pl-k">:</span><span class="pl-c1">129</span>,VK_F19<span class="pl-k">:</span><span class="pl-c1">130</span>,VK_F20<span class="pl-k">:</span><span class="pl-c1">131</span>,VK_F21<span class="pl-k">:</span><span class="pl-c1">132</span>,VK_F22<span class="pl-k">:</span><span class="pl-c1">133</span>,VK_F23<span class="pl-k">:</span><span class="pl-c1">134</span>,VK_F24<span class="pl-k">:</span><span class="pl-c1">135</span>,VK_NUM_LOCK<span class="pl-k">:</span><span class="pl-c1">144</span>,</td>
      </tr>
      <tr>
        <td id="L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="LC4" class="blob-code blob-code-inner js-file-line">VK_SCROLL_LOCK<span class="pl-k">:</span><span class="pl-c1">145</span>,VK_CIRCUMFLEX<span class="pl-k">:</span><span class="pl-c1">160</span>,VK_EXCLAMATION<span class="pl-k">:</span><span class="pl-c1">161</span>,VK_DOUBLE_QUOTE<span class="pl-k">:</span><span class="pl-c1">162</span>,VK_HASH<span class="pl-k">:</span><span class="pl-c1">163</span>,VK_DOLLAR<span class="pl-k">:</span><span class="pl-c1">164</span>,VK_PERCENT<span class="pl-k">:</span><span class="pl-c1">165</span>,VK_AMPERSAND<span class="pl-k">:</span><span class="pl-c1">166</span>,VK_UNDERSCORE<span class="pl-k">:</span><span class="pl-c1">167</span>,VK_OPEN_PAREN<span class="pl-k">:</span><span class="pl-c1">168</span>,VK_CLOSE_PAREN<span class="pl-k">:</span><span class="pl-c1">169</span>,VK_ASTERISK<span class="pl-k">:</span><span class="pl-c1">170</span>,VK_PLUS<span class="pl-k">:</span><span class="pl-c1">171</span>,VK_PIPE<span class="pl-k">:</span><span class="pl-c1">172</span>,VK_HYPHEN_MINUS<span class="pl-k">:</span><span class="pl-c1">173</span>,VK_OPEN_CURLY_BRACKET<span class="pl-k">:</span><span class="pl-c1">174</span>,VK_CLOSE_CURLY_BRACKET<span class="pl-k">:</span><span class="pl-c1">175</span>,VK_TILDE<span class="pl-k">:</span><span class="pl-c1">176</span>,VK_COMMA<span class="pl-k">:</span><span class="pl-c1">188</span>,VK_PERIOD<span class="pl-k">:</span><span class="pl-c1">190</span>,VK_SLASH<span class="pl-k">:</span><span class="pl-c1">191</span>,VK_BACK_QUOTE<span class="pl-k">:</span><span class="pl-c1">192</span>,VK_OPEN_BRACKET<span class="pl-k">:</span><span class="pl-c1">219</span>,VK_BACK_SLASH<span class="pl-k">:</span><span class="pl-c1">220</span>,VK_CLOSE_BRACKET<span class="pl-k">:</span><span class="pl-c1">221</span>,VK_QUOTE<span class="pl-k">:</span><span class="pl-c1">222</span>,VK_META<span class="pl-k">:</span><span class="pl-c1">224</span>,VK_ALTGR<span class="pl-k">:</span><span class="pl-c1">225</span>,VK_WIN<span class="pl-k">:</span><span class="pl-c1">91</span>,VK_KANA<span class="pl-k">:</span><span class="pl-c1">21</span>,VK_HANGUL<span class="pl-k">:</span><span class="pl-c1">21</span>,</td>
      </tr>
      <tr>
        <td id="L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="LC5" class="blob-code blob-code-inner js-file-line">VK_EISU<span class="pl-k">:</span><span class="pl-c1">22</span>,VK_JUNJA<span class="pl-k">:</span><span class="pl-c1">23</span>,VK_FINAL<span class="pl-k">:</span><span class="pl-c1">24</span>,VK_HANJA<span class="pl-k">:</span><span class="pl-c1">25</span>,VK_KANJI<span class="pl-k">:</span><span class="pl-c1">25</span>,VK_CONVERT<span class="pl-k">:</span><span class="pl-c1">28</span>,VK_NONCONVERT<span class="pl-k">:</span><span class="pl-c1">29</span>,VK_ACCEPT<span class="pl-k">:</span><span class="pl-c1">30</span>,VK_MODECHANGE<span class="pl-k">:</span><span class="pl-c1">31</span>,VK_SELECT<span class="pl-k">:</span><span class="pl-c1">41</span>,VK_PRINT<span class="pl-k">:</span><span class="pl-c1">42</span>,VK_EXECUTE<span class="pl-k">:</span><span class="pl-c1">43</span>,VK_SLEEP<span class="pl-k">:</span><span class="pl-c1">95</span>,<span class="pl-c1">Text</span><span class="pl-k">:</span>{RE_COLORS<span class="pl-k">:</span><span class="pl-sr"><span class="pl-pds">/</span>%(<span class="pl-c1">[bc]</span>){(<span class="pl-c1">[<span class="pl-k">^</span>}]</span><span class="pl-k">*</span>)}<span class="pl-pds">/</span>g</span>,TYPE_TEXT<span class="pl-k">:</span><span class="pl-c1">0</span>,TYPE_NEWLINE<span class="pl-k">:</span><span class="pl-c1">1</span>,TYPE_FG<span class="pl-k">:</span><span class="pl-c1">2</span>,TYPE_BG<span class="pl-k">:</span><span class="pl-c1">3</span>,<span class="pl-en">measure</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>{width<span class="pl-k">:</span><span class="pl-c1">0</span>,height<span class="pl-k">:</span><span class="pl-c1">1</span>},d<span class="pl-k">=</span><span class="pl-v">this</span>.tokenize(a,b),e<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>d.<span class="pl-c1">length</span>;f<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>d[f];<span class="pl-k">switch</span>(g.<span class="pl-c1">type</span>){<span class="pl-k">case</span> <span class="pl-v">this</span>.TYPE_TEXT<span class="pl-k">:</span>e<span class="pl-k">+=</span>g.<span class="pl-c1">value</span>.<span class="pl-c1">length</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-v">this</span>.TYPE_NEWLINE<span class="pl-k">:</span>c.<span class="pl-c1">height</span><span class="pl-k">++</span>,c.<span class="pl-c1">width</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(c.<span class="pl-c1">width</span>,e),e<span class="pl-k">=</span><span class="pl-c1">0</span>}}c.<span class="pl-c1">width</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(c.<span class="pl-c1">width</span>,</td>
      </tr>
      <tr>
        <td id="L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="LC6" class="blob-code blob-code-inner js-file-line">e);<span class="pl-k">return</span> c},<span class="pl-en">tokenize</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>[],d<span class="pl-k">=</span><span class="pl-c1">0</span>;a.<span class="pl-c1">replace</span>(<span class="pl-v">this</span>.RE_COLORS,<span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>){<span class="pl-k">var</span> m<span class="pl-k">=</span>a.<span class="pl-c1">substring</span>(d,l);m.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>c.<span class="pl-c1">push</span>({type<span class="pl-k">:</span><span class="pl-c1">ROT</span>.<span class="pl-c1">Text</span>.TYPE_TEXT,value<span class="pl-k">:</span>m});c.<span class="pl-c1">push</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span><span class="pl-k">==</span>e<span class="pl-k">?</span><span class="pl-c1">ROT</span>.<span class="pl-c1">Text</span>.TYPE_FG<span class="pl-k">:</span><span class="pl-c1">ROT</span>.<span class="pl-c1">Text</span>.TYPE_BG,value<span class="pl-k">:</span>h.trim()});d<span class="pl-k">=</span>l<span class="pl-k">+</span>b.<span class="pl-c1">length</span>;<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>});<span class="pl-k">var</span> e<span class="pl-k">=</span>a.<span class="pl-c1">substring</span>(d);e.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>c.<span class="pl-c1">push</span>({type<span class="pl-k">:</span><span class="pl-c1">ROT</span>.<span class="pl-c1">Text</span>.TYPE_TEXT,value<span class="pl-k">:</span>e});<span class="pl-k">return</span> <span class="pl-v">this</span>._breakLines(c,b)},<span class="pl-en">_breakLines</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){b<span class="pl-k">||</span>(b<span class="pl-k">=</span><span class="pl-c1">Infinity</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=-</span><span class="pl-c1">1</span>;c<span class="pl-k">&lt;</span>a.<span class="pl-c1">length</span>;){<span class="pl-k">var</span> f<span class="pl-k">=</span>a[c];f.<span class="pl-c1">type</span><span class="pl-k">==</span><span class="pl-c1">ROT</span>.<span class="pl-c1">Text</span>.TYPE_NEWLINE<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=-</span><span class="pl-c1">1</span>);<span class="pl-k">if</span>(f.<span class="pl-c1">type</span><span class="pl-k">!=</span></td>
      </tr>
      <tr>
        <td id="L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="LC7" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT</span>.<span class="pl-c1">Text</span>.TYPE_TEXT)c<span class="pl-k">++</span>;<span class="pl-k">else</span>{<span class="pl-k">for</span>(;<span class="pl-c1">0</span><span class="pl-k">==</span>d<span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span><span class="pl-k">==</span>f.<span class="pl-c1">value</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">0</span>);)f.<span class="pl-c1">value</span><span class="pl-k">=</span>f.<span class="pl-c1">value</span>.<span class="pl-c1">substring</span>(<span class="pl-c1">1</span>);<span class="pl-k">var</span> g<span class="pl-k">=</span>f.<span class="pl-c1">value</span>.<span class="pl-c1">indexOf</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>);<span class="pl-k">if</span>(<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!=</span>g){f.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-v">this</span>._breakInsideToken(a,c,g,<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">for</span>(g<span class="pl-k">=</span>f.<span class="pl-c1">value</span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>);g.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span><span class="pl-k">==</span>g[g.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>];)g.<span class="pl-c1">pop</span>();f.<span class="pl-c1">value</span><span class="pl-k">=</span>g.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>)}<span class="pl-k">if</span>(f.<span class="pl-c1">value</span>.<span class="pl-c1">length</span>){<span class="pl-k">if</span>(d<span class="pl-k">+</span>f.<span class="pl-c1">value</span>.<span class="pl-c1">length</span><span class="pl-k">&gt;</span>b){<span class="pl-k">for</span>(g<span class="pl-k">=-</span><span class="pl-c1">1</span>;;){<span class="pl-k">var</span> h<span class="pl-k">=</span>f.<span class="pl-c1">value</span>.<span class="pl-c1">indexOf</span>(<span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span>,g<span class="pl-k">+</span><span class="pl-c1">1</span>);<span class="pl-k">if</span>(<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">==</span>h)<span class="pl-k">break</span>;<span class="pl-k">if</span>(d<span class="pl-k">+</span>h<span class="pl-k">&gt;</span>b)<span class="pl-k">break</span>;g<span class="pl-k">=</span>h}<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!=</span>g<span class="pl-k">?</span>f.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-v">this</span>._breakInsideToken(a,c,g,<span class="pl-k">!</span><span class="pl-c1">0</span>)<span class="pl-k">:-</span><span class="pl-c1">1</span><span class="pl-k">!=</span>e<span class="pl-k">?</span>(f<span class="pl-k">=</span>a[e],c<span class="pl-k">=</span>f.<span class="pl-c1">value</span>.<span class="pl-c1">lastIndexOf</span>(<span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span>),f.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-v">this</span>._breakInsideToken(a,e,c,<span class="pl-k">!</span><span class="pl-c1">0</span>),c<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="LC8" class="blob-code blob-code-inner js-file-line">e)<span class="pl-k">:</span>f.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-v">this</span>._breakInsideToken(a,c,b<span class="pl-k">-</span>d,<span class="pl-k">!</span><span class="pl-c1">1</span>)}<span class="pl-k">else</span> d<span class="pl-k">+=</span>f.<span class="pl-c1">value</span>.<span class="pl-c1">length</span>,<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!=</span>f.<span class="pl-c1">value</span>.<span class="pl-c1">indexOf</span>(<span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span>)<span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=</span>c);c<span class="pl-k">++</span>}<span class="pl-k">else</span> a.<span class="pl-c1">splice</span>(c,<span class="pl-c1">1</span>)}}a.<span class="pl-c1">push</span>({type<span class="pl-k">:</span><span class="pl-c1">ROT</span>.<span class="pl-c1">Text</span>.TYPE_NEWLINE});d<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>a.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)<span class="pl-k">switch</span>(f<span class="pl-k">=</span>a[c],f.<span class="pl-c1">type</span>){<span class="pl-k">case</span> <span class="pl-c1">ROT</span>.<span class="pl-c1">Text</span>.TYPE_TEXT<span class="pl-k">:</span>d<span class="pl-k">=</span>f;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">ROT</span>.<span class="pl-c1">Text</span>.TYPE_NEWLINE<span class="pl-k">:</span><span class="pl-k">if</span>(d){<span class="pl-k">for</span>(g<span class="pl-k">=</span>d.<span class="pl-c1">value</span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>);g.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span><span class="pl-k">==</span>g[g.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>];)g.<span class="pl-c1">pop</span>();d.<span class="pl-c1">value</span><span class="pl-k">=</span>g.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>)}d<span class="pl-k">=</span><span class="pl-c1">null</span>}a.<span class="pl-c1">pop</span>();<span class="pl-k">return</span> a},<span class="pl-en">_breakInsideToken</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>{type<span class="pl-k">:</span><span class="pl-c1">ROT</span>.<span class="pl-c1">Text</span>.TYPE_NEWLINE};d<span class="pl-k">=</span>{type<span class="pl-k">:</span><span class="pl-c1">ROT</span>.<span class="pl-c1">Text</span>.TYPE_TEXT,value<span class="pl-k">:</span>a[b].<span class="pl-c1">value</span>.<span class="pl-c1">substring</span>(c<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="LC9" class="blob-code blob-code-inner js-file-line">(d<span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>))};a.<span class="pl-c1">splice</span>(b<span class="pl-k">+</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,e,d);<span class="pl-k">return</span> a[b].<span class="pl-c1">value</span>.<span class="pl-c1">substring</span>(<span class="pl-c1">0</span>,c)}}};<span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">random</span><span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.random<span class="pl-k">||</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">length</span><span class="pl-k">?</span><span class="pl-v">this</span>[<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">ROT</span>.RNG.getUniform()<span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">length</span>)]<span class="pl-k">:</span><span class="pl-c1">null</span>};<span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">randomize</span><span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.randomize<span class="pl-k">||</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span>[];<span class="pl-v">this</span>.<span class="pl-c1">length</span>;){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">indexOf</span>(<span class="pl-v">this</span>.<span class="pl-c1">random</span>());a.<span class="pl-c1">push</span>(<span class="pl-v">this</span>.<span class="pl-c1">splice</span>(b,<span class="pl-c1">1</span>)[<span class="pl-c1">0</span>])}<span class="pl-k">return</span> a};<span class="pl-c1">Number</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">mod</span><span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">prototype</span>.mod<span class="pl-k">||</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(<span class="pl-v">this</span><span class="pl-k">%</span>a<span class="pl-k">+</span>a)<span class="pl-k">%</span>a};</td>
      </tr>
      <tr>
        <td id="L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="LC10" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">String</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">capitalize</span><span class="pl-k">=</span><span class="pl-c1">String</span>.<span class="pl-c1">prototype</span>.capitalize<span class="pl-k">||</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">0</span>).<span class="pl-c1">toUpperCase</span>()<span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">substring</span>(<span class="pl-c1">1</span>)};<span class="pl-c1">String</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">lpad</span><span class="pl-k">=</span><span class="pl-c1">String</span>.<span class="pl-c1">prototype</span>.lpad<span class="pl-k">||</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>0<span class="pl-pds">&quot;</span></span>,d<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">2</span>,e<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;e.<span class="pl-c1">length</span><span class="pl-k">&lt;</span>d<span class="pl-k">-</span><span class="pl-v">this</span>.<span class="pl-c1">length</span>;)e<span class="pl-k">+=</span>c;e<span class="pl-k">=</span>e.<span class="pl-c1">substring</span>(<span class="pl-c1">0</span>,d<span class="pl-k">-</span><span class="pl-v">this</span>.<span class="pl-c1">length</span>);<span class="pl-k">return</span> e<span class="pl-k">+</span><span class="pl-v">this</span>};<span class="pl-c1">String</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">rpad</span><span class="pl-k">=</span><span class="pl-c1">String</span>.<span class="pl-c1">prototype</span>.rpad<span class="pl-k">||</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>0<span class="pl-pds">&quot;</span></span>,d<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">2</span>,e<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;e.<span class="pl-c1">length</span><span class="pl-k">&lt;</span>d<span class="pl-k">-</span><span class="pl-v">this</span>.<span class="pl-c1">length</span>;)e<span class="pl-k">+=</span>c;e<span class="pl-k">=</span>e.<span class="pl-c1">substring</span>(<span class="pl-c1">0</span>,d<span class="pl-k">-</span><span class="pl-v">this</span>.<span class="pl-c1">length</span>);<span class="pl-k">return</span> <span class="pl-v">this</span><span class="pl-k">+</span>e};</td>
      </tr>
      <tr>
        <td id="L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="LC11" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">String</span>.format<span class="pl-k">=</span><span class="pl-c1">String</span>.format<span class="pl-k">||</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">String</span>.format.map,c<span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.slice.<span class="pl-c1">call</span>(arguments,<span class="pl-c1">1</span>);<span class="pl-k">return</span> a.<span class="pl-c1">replace</span>(<span class="pl-sr"><span class="pl-pds">/</span>%(?:(<span class="pl-c1">[<span class="pl-c1">a-z</span>]</span><span class="pl-k">+</span>)<span class="pl-k">|</span>(?:{(<span class="pl-c1">[<span class="pl-k">^</span>}]</span><span class="pl-k">+</span>)}))<span class="pl-pds">/</span>gi</span>,<span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>){<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%<span class="pl-pds">&quot;</span></span><span class="pl-k">==</span>a.<span class="pl-c1">charAt</span>(g<span class="pl-k">-</span><span class="pl-c1">1</span>))<span class="pl-k">return</span> d.<span class="pl-c1">substring</span>(<span class="pl-c1">1</span>);<span class="pl-k">if</span>(<span class="pl-k">!</span>c.<span class="pl-c1">length</span>)<span class="pl-k">return</span> d;g<span class="pl-k">=</span>c[<span class="pl-c1">0</span>];f<span class="pl-k">=</span>(e<span class="pl-k">||</span>f).<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span>);e<span class="pl-k">=</span>f.<span class="pl-c1">shift</span>();<span class="pl-k">var</span> h<span class="pl-k">=</span>b[e.<span class="pl-c1">toLowerCase</span>()];<span class="pl-k">if</span>(<span class="pl-k">!</span>h)<span class="pl-k">return</span> d;g<span class="pl-k">=</span>c.<span class="pl-c1">shift</span>();d<span class="pl-k">=</span>g[h].<span class="pl-c1">apply</span>(g,f);g<span class="pl-k">=</span>e.<span class="pl-c1">charAt</span>(<span class="pl-c1">0</span>);g<span class="pl-k">!=</span>g.<span class="pl-c1">toLowerCase</span>()<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span>d.capitalize());<span class="pl-k">return</span> d})};<span class="pl-c1">String</span>.format.map<span class="pl-k">=</span><span class="pl-c1">String</span>.format.map<span class="pl-k">||</span>{s<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>toString<span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="LC12" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">String</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">format</span><span class="pl-k">=</span><span class="pl-c1">String</span>.<span class="pl-c1">prototype</span>.format<span class="pl-k">||</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.slice.<span class="pl-c1">call</span>(arguments);a.<span class="pl-c1">unshift</span>(<span class="pl-v">this</span>);<span class="pl-k">return</span> <span class="pl-c1">String</span>.format.<span class="pl-c1">apply</span>(<span class="pl-c1">String</span>,a)};<span class="pl-c1">Object</span>.create<span class="pl-k">||</span>(<span class="pl-c1">Object</span>.<span class="pl-en">create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> <span class="pl-en">b</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">b</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">b</span>});<span class="pl-c1">Function</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">extend</span><span class="pl-k">=</span><span class="pl-c1">Function</span>.<span class="pl-c1">prototype</span>.extend<span class="pl-k">||</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(a.<span class="pl-c1">prototype</span>);<span class="pl-c1">this</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-v">this</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="LC13" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span><span class="pl-k">!=typeof</span> <span class="pl-c1">window</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">window</span>.requestAnimationFrame<span class="pl-k">=</span><span class="pl-c1">window</span>.requestAnimationFrame<span class="pl-k">||</span><span class="pl-c1">window</span>.mozRequestAnimationFrame<span class="pl-k">||</span><span class="pl-c1">window</span>.webkitRequestAnimationFrame<span class="pl-k">||</span><span class="pl-c1">window</span>.oRequestAnimationFrame<span class="pl-k">||</span><span class="pl-c1">window</span>.msRequestAnimationFrame<span class="pl-k">||</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">setTimeout</span>(a,<span class="pl-c1">1E3</span><span class="pl-k">/</span><span class="pl-c1">60</span>)},<span class="pl-c1">window</span>.cancelAnimationFrame<span class="pl-k">=</span><span class="pl-c1">window</span>.cancelAnimationFrame<span class="pl-k">||</span><span class="pl-c1">window</span>.mozCancelAnimationFrame<span class="pl-k">||</span><span class="pl-c1">window</span>.webkitCancelAnimationFrame<span class="pl-k">||</span><span class="pl-c1">window</span>.oCancelAnimationFrame<span class="pl-k">||</span><span class="pl-c1">window</span>.msCancelAnimationFrame<span class="pl-k">||</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">clearTimeout</span>(a)});</td>
      </tr>
      <tr>
        <td id="L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="LC14" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT</span>.<span class="pl-en">Display</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._context<span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>).getContext(<span class="pl-s"><span class="pl-pds">&quot;</span>2d<span class="pl-pds">&quot;</span></span>);<span class="pl-v">this</span>._data<span class="pl-k">=</span>{};<span class="pl-v">this</span>._dirty<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>._options<span class="pl-k">=</span>{};<span class="pl-v">this</span>._backend<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">var</span> b<span class="pl-k">=</span>{width<span class="pl-k">:</span><span class="pl-c1">ROT</span>.DEFAULT_WIDTH,height<span class="pl-k">:</span><span class="pl-c1">ROT</span>.DEFAULT_HEIGHT,transpose<span class="pl-k">:!</span><span class="pl-c1">1</span>,layout<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>rect<span class="pl-pds">&quot;</span></span>,fontSize<span class="pl-k">:</span><span class="pl-c1">15</span>,spacing<span class="pl-k">:</span><span class="pl-c1">1</span>,border<span class="pl-k">:</span><span class="pl-c1">0</span>,forceSquareRatio<span class="pl-k">:!</span><span class="pl-c1">1</span>,fontFamily<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>monospace<span class="pl-pds">&quot;</span></span>,fontStyle<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,fg<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ccc<span class="pl-pds">&quot;</span></span>,bg<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#000<span class="pl-pds">&quot;</span></span>,tileWidth<span class="pl-k">:</span><span class="pl-c1">32</span>,tileHeight<span class="pl-k">:</span><span class="pl-c1">32</span>,tileMap<span class="pl-k">:</span>{},tileSet<span class="pl-k">:</span><span class="pl-c1">null</span>,tileColorize<span class="pl-k">:!</span><span class="pl-c1">1</span>,termColor<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>xterm<span class="pl-pds">&quot;</span></span>},c;<span class="pl-k">for</span>(c <span class="pl-k">in</span> a)b[c]<span class="pl-k">=</span>a[c];<span class="pl-v">this</span>.setOptions(b);<span class="pl-v">this</span>.DEBUG<span class="pl-k">=</span><span class="pl-v">this</span>.DEBUG.bind(<span class="pl-v">this</span>);</td>
      </tr>
      <tr>
        <td id="L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="LC15" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>._tick<span class="pl-k">=</span><span class="pl-v">this</span>._tick.bind(<span class="pl-v">this</span>);requestAnimationFrame(<span class="pl-v">this</span>._tick)};<span class="pl-c1">ROT.Display</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DEBUG</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>[<span class="pl-v">this</span>._options.bg,<span class="pl-v">this</span>._options.fg];<span class="pl-v">this</span>.draw(a,b,<span class="pl-c1">null</span>,<span class="pl-c1">null</span>,d[c<span class="pl-k">%</span>d.<span class="pl-c1">length</span>])};<span class="pl-c1">ROT.Display</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clear</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>._data<span class="pl-k">=</span>{};<span class="pl-v">this</span>._dirty<span class="pl-k">=!</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="LC16" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Display</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setOptions</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b <span class="pl-k">in</span> a)<span class="pl-v">this</span>._options[b]<span class="pl-k">=</span>a[b];<span class="pl-k">if</span>(a.<span class="pl-c1">width</span><span class="pl-k">||</span>a.<span class="pl-c1">height</span><span class="pl-k">||</span>a.<span class="pl-c1">fontSize</span><span class="pl-k">||</span>a.<span class="pl-c1">fontFamily</span><span class="pl-k">||</span>a.spacing<span class="pl-k">||</span>a.layout)a.layout<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>._backend<span class="pl-k">=new</span> (<span class="pl-c1">ROT</span>.Display[a.layout.capitalize()])(<span class="pl-v">this</span>._context)),a<span class="pl-k">=</span>(<span class="pl-v">this</span>._options.fontStyle<span class="pl-k">?</span><span class="pl-v">this</span>._options.fontStyle<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>)<span class="pl-k">+</span><span class="pl-v">this</span>._options.<span class="pl-c1">fontSize</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>px <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-v">this</span>._options.<span class="pl-c1">fontFamily</span>,<span class="pl-v">this</span>._context.font<span class="pl-k">=</span>a,<span class="pl-v">this</span>._backend.compute(<span class="pl-v">this</span>._options),<span class="pl-v">this</span>._context.font<span class="pl-k">=</span>a,<span class="pl-v">this</span>._context.<span class="pl-c1">textAlign</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>center<span class="pl-pds">&quot;</span></span>,<span class="pl-v">this</span>._context.textBaseline<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>middle<span class="pl-pds">&quot;</span></span>,<span class="pl-v">this</span>._dirty<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="LC17" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">ROT.Display</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getOptions</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._options};<span class="pl-c1">ROT.Display</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getContainer</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._context.canvas};<span class="pl-c1">ROT.Display</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">computeSize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>._backend.computeSize(a,b,<span class="pl-v">this</span>._options)};<span class="pl-c1">ROT.Display</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">computeFontSize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>._backend.computeFontSize(a,b,<span class="pl-v">this</span>._options)};</td>
      </tr>
      <tr>
        <td id="L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="LC18" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Display</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">eventToPosition</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a.touches){<span class="pl-k">var</span> b<span class="pl-k">=</span>a.touches[<span class="pl-c1">0</span>].clientX;a<span class="pl-k">=</span>a.touches[<span class="pl-c1">0</span>].clientY}<span class="pl-k">else</span> b<span class="pl-k">=</span>a.clientX,a<span class="pl-k">=</span>a.clientY;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>._context.canvas.getBoundingClientRect(),b<span class="pl-k">=</span>b<span class="pl-k">-</span>c.<span class="pl-c1">left</span>;a<span class="pl-k">-=</span>c.<span class="pl-c1">top</span>;<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;</span>b<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>a<span class="pl-k">||</span>b<span class="pl-k">&gt;=</span><span class="pl-v">this</span>._context.canvas.<span class="pl-c1">width</span><span class="pl-k">||</span>a<span class="pl-k">&gt;=</span><span class="pl-v">this</span>._context.canvas.<span class="pl-c1">height</span><span class="pl-k">?</span>[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-k">:</span><span class="pl-v">this</span>._backend.eventToPosition(b,a)};</td>
      </tr>
      <tr>
        <td id="L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="LC19" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Display</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">draw</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){d<span class="pl-k">||</span>(d<span class="pl-k">=</span><span class="pl-v">this</span>._options.fg);e<span class="pl-k">||</span>(e<span class="pl-k">=</span><span class="pl-v">this</span>._options.bg);<span class="pl-v">this</span>._data[a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b]<span class="pl-k">=</span>[a,b,c,d,e];<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>._dirty<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>._dirty<span class="pl-k">||</span>(<span class="pl-v">this</span>._dirty<span class="pl-k">=</span>{}),<span class="pl-v">this</span>._dirty[a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b]<span class="pl-k">=!</span><span class="pl-c1">0</span>)};</td>
      </tr>
      <tr>
        <td id="L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="LC20" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Display</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">drawText</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">null</span>,f<span class="pl-k">=</span><span class="pl-c1">null</span>,g<span class="pl-k">=</span>a,h<span class="pl-k">=</span><span class="pl-c1">1</span>;d<span class="pl-k">||</span>(d<span class="pl-k">=</span><span class="pl-v">this</span>._options.<span class="pl-c1">width</span><span class="pl-k">-</span>a);<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">ROT</span>.<span class="pl-c1">Text</span>.tokenize(c,d);c.<span class="pl-c1">length</span>;)<span class="pl-k">switch</span>(d<span class="pl-k">=</span>c.<span class="pl-c1">shift</span>(),d.<span class="pl-c1">type</span>){<span class="pl-k">case</span> <span class="pl-c1">ROT</span>.<span class="pl-c1">Text</span>.TYPE_TEXT<span class="pl-k">:</span><span class="pl-k">for</span>(<span class="pl-k">var</span> l<span class="pl-k">=!</span><span class="pl-c1">1</span>,m<span class="pl-k">=!</span><span class="pl-c1">1</span>,p<span class="pl-k">=!</span><span class="pl-c1">1</span>,q<span class="pl-k">=!</span><span class="pl-c1">1</span>,n<span class="pl-k">=</span><span class="pl-c1">0</span>;n<span class="pl-k">&lt;</span>d.<span class="pl-c1">value</span>.<span class="pl-c1">length</span>;n<span class="pl-k">++</span>){<span class="pl-k">var</span> l<span class="pl-k">=</span>d.<span class="pl-c1">value</span>.<span class="pl-c1">charCodeAt</span>(n),r<span class="pl-k">=</span>d.<span class="pl-c1">value</span>.<span class="pl-c1">charAt</span>(n),p<span class="pl-k">=</span><span class="pl-c1">255</span><span class="pl-k">&lt;</span>l<span class="pl-k">&amp;&amp;</span><span class="pl-c1">65377</span><span class="pl-k">&gt;</span>l<span class="pl-k">||</span><span class="pl-c1">65500</span><span class="pl-k">&lt;</span>l<span class="pl-k">&amp;&amp;</span><span class="pl-c1">65512</span><span class="pl-k">&gt;</span>l<span class="pl-k">&amp;&amp;</span><span class="pl-c1">65518</span><span class="pl-k">&lt;</span>l,l<span class="pl-k">=</span><span class="pl-c1">32</span><span class="pl-k">==</span>r.<span class="pl-c1">charCodeAt</span>(<span class="pl-c1">0</span>)<span class="pl-k">||</span><span class="pl-c1">12288</span><span class="pl-k">==</span>r.<span class="pl-c1">charCodeAt</span>(<span class="pl-c1">0</span>);<span class="pl-k">!</span>q<span class="pl-k">||</span>p<span class="pl-k">||</span>l<span class="pl-k">||</span>g<span class="pl-k">++</span>;p<span class="pl-k">&amp;&amp;!</span>m<span class="pl-k">&amp;&amp;</span>g<span class="pl-k">++</span>;<span class="pl-v">this</span>.draw(g<span class="pl-k">++</span>,b,r,e,f);m<span class="pl-k">=</span>l;q<span class="pl-k">=</span>p}<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">ROT</span>.<span class="pl-c1">Text</span>.TYPE_FG<span class="pl-k">:</span>e<span class="pl-k">=</span>d.<span class="pl-c1">value</span><span class="pl-k">||</span><span class="pl-c1">null</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">ROT</span>.<span class="pl-c1">Text</span>.TYPE_BG<span class="pl-k">:</span>f<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="LC21" class="blob-code blob-code-inner js-file-line">d.<span class="pl-c1">value</span><span class="pl-k">||</span><span class="pl-c1">null</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">ROT</span>.<span class="pl-c1">Text</span>.TYPE_NEWLINE<span class="pl-k">:</span>g<span class="pl-k">=</span>a,b<span class="pl-k">++</span>,h<span class="pl-k">++</span>}<span class="pl-k">return</span> h};<span class="pl-c1">ROT.Display</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_tick</span><span class="pl-k">=</span><span class="pl-k">function</span>(){requestAnimationFrame(<span class="pl-v">this</span>._tick);<span class="pl-k">if</span>(<span class="pl-v">this</span>._dirty){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-v">this</span>._dirty){<span class="pl-v">this</span>._context.fillStyle<span class="pl-k">=</span><span class="pl-v">this</span>._options.bg;<span class="pl-v">this</span>._context.fillRect(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-v">this</span>._context.canvas.<span class="pl-c1">width</span>,<span class="pl-v">this</span>._context.canvas.<span class="pl-c1">height</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> a <span class="pl-k">in</span> <span class="pl-v">this</span>._data)<span class="pl-v">this</span>._draw(a,<span class="pl-k">!</span><span class="pl-c1">1</span>)}<span class="pl-k">else</span> <span class="pl-k">for</span>(<span class="pl-k">var</span> b <span class="pl-k">in</span> <span class="pl-v">this</span>._dirty)<span class="pl-v">this</span>._draw(b,<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-v">this</span>._dirty<span class="pl-k">=!</span><span class="pl-c1">1</span>}};</td>
      </tr>
      <tr>
        <td id="L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="LC22" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Display</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_draw</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>._data[a];c[<span class="pl-c1">4</span>]<span class="pl-k">!=</span><span class="pl-v">this</span>._options.bg<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=!</span><span class="pl-c1">0</span>);<span class="pl-v">this</span>._backend.draw(c,b)};<span class="pl-c1">ROT.Display</span>.<span class="pl-en">Backend</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._context<span class="pl-k">=</span>a};<span class="pl-c1">ROT.Display.Backend</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">compute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){};<span class="pl-c1">ROT.Display.Backend</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">draw</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){};<span class="pl-c1">ROT.Display.Backend</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">computeSize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){};<span class="pl-c1">ROT.Display.Backend</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">computeFontSize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){};<span class="pl-c1">ROT.Display.Backend</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">eventToPosition</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){};</td>
      </tr>
      <tr>
        <td id="L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="LC23" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Display</span>.<span class="pl-en">Rect</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">ROT</span>.Display.Backend.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>._spacingY<span class="pl-k">=</span><span class="pl-v">this</span>._spacingX<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._canvasCache<span class="pl-k">=</span>{};<span class="pl-v">this</span>._options<span class="pl-k">=</span>{}};<span class="pl-c1">ROT</span>.Display.Rect.extend(<span class="pl-c1">ROT</span>.Display.Backend);<span class="pl-c1">ROT</span>.Display.Rect.cache<span class="pl-k">=!</span><span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L24" class="blob-num js-line-number" data-line-number="24"></td>
        <td id="LC24" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Display.Rect</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">compute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._canvasCache<span class="pl-k">=</span>{};<span class="pl-v">this</span>._options<span class="pl-k">=</span>a;<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>._context.measureText(<span class="pl-s"><span class="pl-pds">&quot;</span>W<span class="pl-pds">&quot;</span></span>).<span class="pl-c1">width</span>);<span class="pl-v">this</span>._spacingX<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(a.spacing<span class="pl-k">*</span>b);<span class="pl-v">this</span>._spacingY<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(a.spacing<span class="pl-k">*</span>a.<span class="pl-c1">fontSize</span>);<span class="pl-v">this</span>._options.forceSquareRatio<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>._spacingX<span class="pl-k">=</span><span class="pl-v">this</span>._spacingY<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-v">this</span>._spacingX,<span class="pl-v">this</span>._spacingY));<span class="pl-v">this</span>._context.canvas.<span class="pl-c1">width</span><span class="pl-k">=</span>a.<span class="pl-c1">width</span><span class="pl-k">*</span><span class="pl-v">this</span>._spacingX;<span class="pl-v">this</span>._context.canvas.<span class="pl-c1">height</span><span class="pl-k">=</span>a.<span class="pl-c1">height</span><span class="pl-k">*</span><span class="pl-v">this</span>._spacingY};</td>
      </tr>
      <tr>
        <td id="L25" class="blob-num js-line-number" data-line-number="25"></td>
        <td id="LC25" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Display.Rect</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">draw</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">constructor</span>.cache<span class="pl-k">?</span><span class="pl-v">this</span>._drawWithCache(a,b)<span class="pl-k">:</span><span class="pl-v">this</span>._drawNoCache(a,b)};</td>
      </tr>
      <tr>
        <td id="L26" class="blob-num js-line-number" data-line-number="26"></td>
        <td id="LC26" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Display.Rect</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_drawWithCache</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>a[<span class="pl-c1">0</span>],d<span class="pl-k">=</span>a[<span class="pl-c1">1</span>],e<span class="pl-k">=</span>a[<span class="pl-c1">2</span>],f<span class="pl-k">=</span>a[<span class="pl-c1">3</span>],g<span class="pl-k">=</span>a[<span class="pl-c1">4</span>],h<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>e<span class="pl-k">+</span>f<span class="pl-k">+</span>g;<span class="pl-k">if</span>(h <span class="pl-k">in</span> <span class="pl-v">this</span>._canvasCache)<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-v">this</span>._canvasCache[h];<span class="pl-k">else</span>{<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-v">this</span>._options.<span class="pl-c1">border</span>,l<span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>),p<span class="pl-k">=</span>l.getContext(<span class="pl-s"><span class="pl-pds">&quot;</span>2d<span class="pl-pds">&quot;</span></span>);l.<span class="pl-c1">width</span><span class="pl-k">=</span><span class="pl-v">this</span>._spacingX;l.<span class="pl-c1">height</span><span class="pl-k">=</span><span class="pl-v">this</span>._spacingY;p.fillStyle<span class="pl-k">=</span>g;p.fillRect(m,m,l.<span class="pl-c1">width</span><span class="pl-k">-</span>m,l.<span class="pl-c1">height</span><span class="pl-k">-</span>m);<span class="pl-k">if</span>(e)<span class="pl-k">for</span>(p.fillStyle<span class="pl-k">=</span>f,p.font<span class="pl-k">=</span><span class="pl-v">this</span>._context.font,p.<span class="pl-c1">textAlign</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>center<span class="pl-pds">&quot;</span></span>,p.textBaseline<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>middle<span class="pl-pds">&quot;</span></span>,e<span class="pl-k">=</span>[].<span class="pl-c1">concat</span>(e),f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>e.<span class="pl-c1">length</span>;f<span class="pl-k">++</span>)p.fillText(e[f],<span class="pl-v">this</span>._spacingX<span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L27" class="blob-num js-line-number" data-line-number="27"></td>
        <td id="LC27" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>._spacingY<span class="pl-k">/</span><span class="pl-c1">2</span>));<span class="pl-v">this</span>._canvasCache[h]<span class="pl-k">=</span>l}<span class="pl-v">this</span>._context.drawImage(l,c<span class="pl-k">*</span><span class="pl-v">this</span>._spacingX,d<span class="pl-k">*</span><span class="pl-v">this</span>._spacingY)};<span class="pl-c1">ROT.Display.Rect</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_drawNoCache</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>a[<span class="pl-c1">0</span>],d<span class="pl-k">=</span>a[<span class="pl-c1">1</span>],e<span class="pl-k">=</span>a[<span class="pl-c1">2</span>],f<span class="pl-k">=</span>a[<span class="pl-c1">3</span>],g<span class="pl-k">=</span>a[<span class="pl-c1">4</span>];<span class="pl-k">if</span>(b){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-v">this</span>._options.<span class="pl-c1">border</span>;<span class="pl-v">this</span>._context.fillStyle<span class="pl-k">=</span>g;<span class="pl-v">this</span>._context.fillRect(c<span class="pl-k">*</span><span class="pl-v">this</span>._spacingX<span class="pl-k">+</span>h,d<span class="pl-k">*</span><span class="pl-v">this</span>._spacingY<span class="pl-k">+</span>h,<span class="pl-v">this</span>._spacingX<span class="pl-k">-</span>h,<span class="pl-v">this</span>._spacingY<span class="pl-k">-</span>h)}<span class="pl-k">if</span>(e)<span class="pl-k">for</span>(<span class="pl-v">this</span>._context.fillStyle<span class="pl-k">=</span>f,e<span class="pl-k">=</span>[].<span class="pl-c1">concat</span>(e),f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>e.<span class="pl-c1">length</span>;f<span class="pl-k">++</span>)<span class="pl-v">this</span>._context.fillText(e[f],(c<span class="pl-k">+</span>.<span class="pl-c1">5</span>)<span class="pl-k">*</span><span class="pl-v">this</span>._spacingX,<span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>((d<span class="pl-k">+</span>.<span class="pl-c1">5</span>)<span class="pl-k">*</span><span class="pl-v">this</span>._spacingY))};</td>
      </tr>
      <tr>
        <td id="L28" class="blob-num js-line-number" data-line-number="28"></td>
        <td id="LC28" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Display.Rect</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">computeSize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span>[<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a<span class="pl-k">/</span><span class="pl-v">this</span>._spacingX),<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(b<span class="pl-k">/</span><span class="pl-v">this</span>._spacingY)]};<span class="pl-c1">ROT.Display.Rect</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">computeFontSize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a<span class="pl-k">/</span><span class="pl-v">this</span>._options.<span class="pl-c1">width</span>),d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(b<span class="pl-k">/</span><span class="pl-v">this</span>._options.<span class="pl-c1">height</span>),e<span class="pl-k">=</span><span class="pl-v">this</span>._context.font;<span class="pl-v">this</span>._context.font<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>100px <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-v">this</span>._options.<span class="pl-c1">fontFamily</span>;<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>._context.measureText(<span class="pl-s"><span class="pl-pds">&quot;</span>W<span class="pl-pds">&quot;</span></span>).<span class="pl-c1">width</span>);<span class="pl-v">this</span>._context.font<span class="pl-k">=</span>e;c<span class="pl-k">=</span>f<span class="pl-k">/</span><span class="pl-c1">100</span><span class="pl-k">*</span>d<span class="pl-k">/</span>c;<span class="pl-c1">1</span><span class="pl-k">&lt;</span>c<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(d<span class="pl-k">/</span>c));<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(d<span class="pl-k">/</span><span class="pl-v">this</span>._options.spacing)};</td>
      </tr>
      <tr>
        <td id="L29" class="blob-num js-line-number" data-line-number="29"></td>
        <td id="LC29" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Display.Rect</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">eventToPosition</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span>[<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a<span class="pl-k">/</span><span class="pl-v">this</span>._spacingX),<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(b<span class="pl-k">/</span><span class="pl-v">this</span>._spacingY)]};<span class="pl-c1">ROT.Display</span>.<span class="pl-en">Hex</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">ROT</span>.Display.Backend.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>._hexSize<span class="pl-k">=</span><span class="pl-v">this</span>._spacingY<span class="pl-k">=</span><span class="pl-v">this</span>._spacingX<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._options<span class="pl-k">=</span>{}};<span class="pl-c1">ROT</span>.Display.Hex.extend(<span class="pl-c1">ROT</span>.Display.Backend);</td>
      </tr>
      <tr>
        <td id="L30" class="blob-num js-line-number" data-line-number="30"></td>
        <td id="LC30" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Display.Hex</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">compute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._options<span class="pl-k">=</span>a;<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>._context.measureText(<span class="pl-s"><span class="pl-pds">&quot;</span>W<span class="pl-pds">&quot;</span></span>).<span class="pl-c1">width</span>);<span class="pl-v">this</span>._hexSize<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a.spacing<span class="pl-k">*</span>(a.<span class="pl-c1">fontSize</span><span class="pl-k">+</span>b<span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">3</span>))<span class="pl-k">/</span><span class="pl-c1">2</span>);<span class="pl-v">this</span>._spacingX<span class="pl-k">=</span><span class="pl-v">this</span>._hexSize<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">3</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-v">this</span>._spacingY<span class="pl-k">=</span><span class="pl-c1">1.5</span><span class="pl-k">*</span><span class="pl-v">this</span>._hexSize;<span class="pl-k">if</span>(a.transpose)<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>height<span class="pl-pds">&quot;</span></span>,c<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>width<span class="pl-pds">&quot;</span></span>;<span class="pl-k">else</span> b<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>width<span class="pl-pds">&quot;</span></span>,c<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>height<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>._context.canvas[b]<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>((a.<span class="pl-c1">width</span><span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span><span class="pl-v">this</span>._spacingX);<span class="pl-v">this</span>._context.canvas[c]<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>((a.<span class="pl-c1">height</span><span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">*</span><span class="pl-v">this</span>._spacingY<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-v">this</span>._hexSize)};</td>
      </tr>
      <tr>
        <td id="L31" class="blob-num js-line-number" data-line-number="31"></td>
        <td id="LC31" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Display.Hex</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">draw</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>a[<span class="pl-c1">2</span>],d<span class="pl-k">=</span>a[<span class="pl-c1">3</span>],e<span class="pl-k">=</span>a[<span class="pl-c1">4</span>],f<span class="pl-k">=</span>[(a[<span class="pl-c1">0</span>]<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span><span class="pl-v">this</span>._spacingX,a[<span class="pl-c1">1</span>]<span class="pl-k">*</span><span class="pl-v">this</span>._spacingY<span class="pl-k">+</span><span class="pl-v">this</span>._hexSize];<span class="pl-v">this</span>._options.transpose<span class="pl-k">&amp;&amp;</span>f.<span class="pl-c1">reverse</span>();b<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>._context.fillStyle<span class="pl-k">=</span>e,<span class="pl-v">this</span>._fill(f[<span class="pl-c1">0</span>],f[<span class="pl-c1">1</span>]));<span class="pl-k">if</span>(c)<span class="pl-k">for</span>(<span class="pl-v">this</span>._context.fillStyle<span class="pl-k">=</span>d,c<span class="pl-k">=</span>[].<span class="pl-c1">concat</span>(c),d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>c.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>)<span class="pl-v">this</span>._context.fillText(c[d],f[<span class="pl-c1">0</span>],<span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(f[<span class="pl-c1">1</span>]))};</td>
      </tr>
      <tr>
        <td id="L32" class="blob-num js-line-number" data-line-number="32"></td>
        <td id="LC32" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Display.Hex</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">computeSize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>._options.transpose<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">+=</span>b,b<span class="pl-k">=</span>a<span class="pl-k">-</span>b,a<span class="pl-k">-=</span>b);<span class="pl-k">return</span>[<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a<span class="pl-k">/</span><span class="pl-v">this</span>._spacingX)<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>((b<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-v">this</span>._hexSize)<span class="pl-k">/</span><span class="pl-v">this</span>._spacingY<span class="pl-k">+</span><span class="pl-c1">1</span>)]};</td>
      </tr>
      <tr>
        <td id="L33" class="blob-num js-line-number" data-line-number="33"></td>
        <td id="LC33" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Display.Hex</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">computeFontSize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>._options.transpose<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">+=</span>b,b<span class="pl-k">=</span>a<span class="pl-k">-</span>b,a<span class="pl-k">-=</span>b);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>a<span class="pl-k">/</span>((<span class="pl-v">this</span>._options.<span class="pl-c1">width</span><span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">3</span>))<span class="pl-k">-</span><span class="pl-c1">1</span>,c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(c,b<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">1.5</span><span class="pl-k">*</span>(<span class="pl-v">this</span>._options.<span class="pl-c1">height</span><span class="pl-k">-</span><span class="pl-c1">1</span>))),d<span class="pl-k">=</span><span class="pl-v">this</span>._context.font;<span class="pl-v">this</span>._context.font<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>100px <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-v">this</span>._options.<span class="pl-c1">fontFamily</span>;<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>._context.measureText(<span class="pl-s"><span class="pl-pds">&quot;</span>W<span class="pl-pds">&quot;</span></span>).<span class="pl-c1">width</span>);<span class="pl-v">this</span>._context.font<span class="pl-k">=</span>d;c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(c)<span class="pl-k">+</span><span class="pl-c1">1</span>;c<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>c<span class="pl-k">/</span>(<span class="pl-v">this</span>._options.spacing<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>e<span class="pl-k">/</span><span class="pl-c1">100</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">3</span>)));<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(c)<span class="pl-k">-</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L34" class="blob-num js-line-number" data-line-number="34"></td>
        <td id="LC34" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Display.Hex</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">eventToPosition</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-v">this</span>._options.transpose){a<span class="pl-k">+=</span>b;b<span class="pl-k">=</span>a<span class="pl-k">-</span>b;a<span class="pl-k">-=</span>b;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>width<span class="pl-pds">&quot;</span></span>}<span class="pl-k">else</span> c<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>height<span class="pl-pds">&quot;</span></span>;b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(b<span class="pl-k">/</span>(<span class="pl-v">this</span>._context.canvas[c]<span class="pl-k">/</span><span class="pl-v">this</span>._options[c]));b.mod(<span class="pl-c1">2</span>)<span class="pl-k">?</span>(a<span class="pl-k">-=</span><span class="pl-v">this</span>._spacingX,a<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-v">this</span>._spacingX)))<span class="pl-k">:</span>a<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-v">this</span>._spacingX));<span class="pl-k">return</span>[a,b]};</td>
      </tr>
      <tr>
        <td id="L35" class="blob-num js-line-number" data-line-number="35"></td>
        <td id="LC35" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Display.Hex</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_fill</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>._hexSize,d<span class="pl-k">=</span><span class="pl-v">this</span>._options.<span class="pl-c1">border</span>;<span class="pl-v">this</span>._context.beginPath();<span class="pl-v">this</span>._options.transpose<span class="pl-k">?</span>(<span class="pl-v">this</span>._context.<span class="pl-c1">moveTo</span>(a<span class="pl-k">-</span>c<span class="pl-k">+</span>d,b),<span class="pl-v">this</span>._context.lineTo(a<span class="pl-k">-</span>c<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">+</span>d,b<span class="pl-k">+</span><span class="pl-v">this</span>._spacingX<span class="pl-k">-</span>d),<span class="pl-v">this</span>._context.lineTo(a<span class="pl-k">+</span>c<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">-</span>d,b<span class="pl-k">+</span><span class="pl-v">this</span>._spacingX<span class="pl-k">-</span>d),<span class="pl-v">this</span>._context.lineTo(a<span class="pl-k">+</span>c<span class="pl-k">-</span>d,b),<span class="pl-v">this</span>._context.lineTo(a<span class="pl-k">+</span>c<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">-</span>d,b<span class="pl-k">-</span><span class="pl-v">this</span>._spacingX<span class="pl-k">+</span>d),<span class="pl-v">this</span>._context.lineTo(a<span class="pl-k">-</span>c<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">+</span>d,b<span class="pl-k">-</span><span class="pl-v">this</span>._spacingX<span class="pl-k">+</span>d),<span class="pl-v">this</span>._context.lineTo(a<span class="pl-k">-</span>c<span class="pl-k">+</span>d,b))<span class="pl-k">:</span>(<span class="pl-v">this</span>._context.<span class="pl-c1">moveTo</span>(a,b<span class="pl-k">-</span>c<span class="pl-k">+</span>d),<span class="pl-v">this</span>._context.lineTo(a<span class="pl-k">+</span><span class="pl-v">this</span>._spacingX<span class="pl-k">-</span>d,b<span class="pl-k">-</span>c<span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L36" class="blob-num js-line-number" data-line-number="36"></td>
        <td id="LC36" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span><span class="pl-k">+</span>d),<span class="pl-v">this</span>._context.lineTo(a<span class="pl-k">+</span><span class="pl-v">this</span>._spacingX<span class="pl-k">-</span>d,b<span class="pl-k">+</span>c<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">-</span>d),<span class="pl-v">this</span>._context.lineTo(a,b<span class="pl-k">+</span>c<span class="pl-k">-</span>d),<span class="pl-v">this</span>._context.lineTo(a<span class="pl-k">-</span><span class="pl-v">this</span>._spacingX<span class="pl-k">+</span>d,b<span class="pl-k">+</span>c<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">-</span>d),<span class="pl-v">this</span>._context.lineTo(a<span class="pl-k">-</span><span class="pl-v">this</span>._spacingX<span class="pl-k">+</span>d,b<span class="pl-k">-</span>c<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">+</span>d),<span class="pl-v">this</span>._context.lineTo(a,b<span class="pl-k">-</span>c<span class="pl-k">+</span>d));<span class="pl-v">this</span>._context.fill()};<span class="pl-c1">ROT.Display</span>.<span class="pl-en">Tile</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">ROT</span>.Display.Rect.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>._options<span class="pl-k">=</span>{};<span class="pl-v">this</span>._colorCanvas<span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">ROT</span>.Display.Tile.extend(<span class="pl-c1">ROT</span>.Display.Rect);</td>
      </tr>
      <tr>
        <td id="L37" class="blob-num js-line-number" data-line-number="37"></td>
        <td id="LC37" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Display.Tile</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">compute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._options<span class="pl-k">=</span>a;<span class="pl-v">this</span>._context.canvas.<span class="pl-c1">width</span><span class="pl-k">=</span>a.<span class="pl-c1">width</span><span class="pl-k">*</span>a.tileWidth;<span class="pl-v">this</span>._context.canvas.<span class="pl-c1">height</span><span class="pl-k">=</span>a.<span class="pl-c1">height</span><span class="pl-k">*</span>a.tileHeight;<span class="pl-v">this</span>._colorCanvas.<span class="pl-c1">width</span><span class="pl-k">=</span>a.tileWidth;<span class="pl-v">this</span>._colorCanvas.<span class="pl-c1">height</span><span class="pl-k">=</span>a.tileHeight};</td>
      </tr>
      <tr>
        <td id="L38" class="blob-num js-line-number" data-line-number="38"></td>
        <td id="LC38" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Display.Tile</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">draw</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>a[<span class="pl-c1">0</span>],d<span class="pl-k">=</span>a[<span class="pl-c1">1</span>],e<span class="pl-k">=</span>a[<span class="pl-c1">2</span>],f<span class="pl-k">=</span>a[<span class="pl-c1">3</span>],g<span class="pl-k">=</span>a[<span class="pl-c1">4</span>],h<span class="pl-k">=</span><span class="pl-v">this</span>._options.tileWidth,l<span class="pl-k">=</span><span class="pl-v">this</span>._options.tileHeight;b<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>._options.tileColorize<span class="pl-k">?</span><span class="pl-v">this</span>._context.clearRect(c<span class="pl-k">*</span>h,d<span class="pl-k">*</span>l,h,l)<span class="pl-k">:</span>(<span class="pl-v">this</span>._context.fillStyle<span class="pl-k">=</span>g,<span class="pl-v">this</span>._context.fillRect(c<span class="pl-k">*</span>h,d<span class="pl-k">*</span>l,h,l)));<span class="pl-k">if</span>(e)<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span>[].<span class="pl-c1">concat</span>(e),m<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;</span>e.<span class="pl-c1">length</span>;m<span class="pl-k">++</span>){<span class="pl-k">var</span> p<span class="pl-k">=</span><span class="pl-v">this</span>._options.tileMap[e[m]];<span class="pl-k">if</span>(<span class="pl-k">!</span>p)<span class="pl-k">throw</span> Error(<span class="pl-s"><span class="pl-pds">&quot;</span>Char &#39;<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>e[m]<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>&#39; not found in tileMap<span class="pl-pds">&quot;</span></span>);<span class="pl-k">if</span>(<span class="pl-v">this</span>._options.tileColorize){<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-v">this</span>._colorCanvas,n<span class="pl-k">=</span>q.getContext(<span class="pl-s"><span class="pl-pds">&quot;</span>2d<span class="pl-pds">&quot;</span></span>);n.clearRect(<span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L39" class="blob-num js-line-number" data-line-number="39"></td>
        <td id="LC39" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,h,l);n.drawImage(<span class="pl-v">this</span>._options.tileSet,p[<span class="pl-c1">0</span>],p[<span class="pl-c1">1</span>],h,l,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,h,l);<span class="pl-s"><span class="pl-pds">&quot;</span>transparent<span class="pl-pds">&quot;</span></span><span class="pl-k">!=</span>f<span class="pl-k">&amp;&amp;</span>(n.fillStyle<span class="pl-k">=</span>f,n.globalCompositeOperation<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>source-atop<span class="pl-pds">&quot;</span></span>,n.fillRect(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,h,l));<span class="pl-s"><span class="pl-pds">&quot;</span>transparent<span class="pl-pds">&quot;</span></span><span class="pl-k">!=</span>g<span class="pl-k">&amp;&amp;</span>(n.fillStyle<span class="pl-k">=</span>g,n.globalCompositeOperation<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>destination-over<span class="pl-pds">&quot;</span></span>,n.fillRect(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,h,l));<span class="pl-v">this</span>._context.drawImage(q,c<span class="pl-k">*</span>h,d<span class="pl-k">*</span>l,h,l)}<span class="pl-k">else</span> <span class="pl-v">this</span>._context.drawImage(<span class="pl-v">this</span>._options.tileSet,p[<span class="pl-c1">0</span>],p[<span class="pl-c1">1</span>],h,l,c<span class="pl-k">*</span>h,d<span class="pl-k">*</span>l,h,l)}};<span class="pl-c1">ROT.Display.Tile</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">computeSize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span>[<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a<span class="pl-k">/</span><span class="pl-v">this</span>._options.tileWidth),<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(b<span class="pl-k">/</span><span class="pl-v">this</span>._options.tileHeight)]};</td>
      </tr>
      <tr>
        <td id="L40" class="blob-num js-line-number" data-line-number="40"></td>
        <td id="LC40" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Display.Tile</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">computeFontSize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span>[<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a<span class="pl-k">/</span><span class="pl-v">this</span>._options.<span class="pl-c1">width</span>),<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(b<span class="pl-k">/</span><span class="pl-v">this</span>._options.<span class="pl-c1">height</span>)]};<span class="pl-c1">ROT.Display.Tile</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">eventToPosition</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span>[<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a<span class="pl-k">/</span><span class="pl-v">this</span>._options.tileWidth),<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(b<span class="pl-k">/</span><span class="pl-v">this</span>._options.tileHeight)]};</td>
      </tr>
      <tr>
        <td id="L41" class="blob-num js-line-number" data-line-number="41"></td>
        <td id="LC41" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT</span>.RNG<span class="pl-k">=</span>{<span class="pl-en">getSeed</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._seed},<span class="pl-en">setSeed</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._seed<span class="pl-k">=</span>a<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">&gt;</span>a<span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span>a<span class="pl-k">:</span>a;<span class="pl-v">this</span>._s0<span class="pl-k">=</span>(a<span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">*</span><span class="pl-v">this</span>._frac;a<span class="pl-k">=</span><span class="pl-c1">69069</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._s1<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-v">this</span>._frac;<span class="pl-v">this</span>._s2<span class="pl-k">=</span>(<span class="pl-c1">69069</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">*</span><span class="pl-v">this</span>._frac;<span class="pl-v">this</span>._c<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">getUniform</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">2091639</span><span class="pl-k">*</span><span class="pl-v">this</span>._s0<span class="pl-k">+</span><span class="pl-v">this</span>._c<span class="pl-k">*</span><span class="pl-v">this</span>._frac;<span class="pl-v">this</span>._s0<span class="pl-k">=</span><span class="pl-v">this</span>._s1;<span class="pl-v">this</span>._s1<span class="pl-k">=</span><span class="pl-v">this</span>._s2;<span class="pl-v">this</span>._c<span class="pl-k">=</span>a|<span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>._s2<span class="pl-k">=</span>a<span class="pl-k">-</span><span class="pl-v">this</span>._c},<span class="pl-en">getUniformInt</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(a,b),d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(a,b);<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>.getUniform()<span class="pl-k">*</span>(c<span class="pl-k">-</span>d<span class="pl-k">+</span><span class="pl-c1">1</span>))<span class="pl-k">+</span>d},<span class="pl-en">getNormal</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">do</span> <span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L42" class="blob-num js-line-number" data-line-number="42"></td>
        <td id="LC42" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.getUniform()<span class="pl-k">-</span><span class="pl-c1">1</span>,d<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-v">this</span>.getUniform()<span class="pl-k">-</span><span class="pl-c1">1</span>,d<span class="pl-k">=</span>c<span class="pl-k">*</span>c<span class="pl-k">+</span>d<span class="pl-k">*</span>d;<span class="pl-k">while</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;</span>d<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">==</span>d);c<span class="pl-k">*=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">log</span>(d)<span class="pl-k">/</span>d);<span class="pl-k">return</span>(a<span class="pl-k">||</span><span class="pl-c1">0</span>)<span class="pl-k">+</span>c<span class="pl-k">*</span>(b<span class="pl-k">||</span><span class="pl-c1">1</span>)},<span class="pl-en">getPercentage</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">100</span><span class="pl-k">*</span><span class="pl-v">this</span>.getUniform())},<span class="pl-en">getWeightedValue</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c;<span class="pl-k">for</span>(c <span class="pl-k">in</span> a)b<span class="pl-k">+=</span>a[c];<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.getUniform()<span class="pl-k">*</span>b,d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c <span class="pl-k">in</span> a)<span class="pl-k">if</span>(d<span class="pl-k">+=</span>a[c],b<span class="pl-k">&lt;</span>d)<span class="pl-k">break</span>;<span class="pl-k">return</span> c},<span class="pl-en">getState</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>[<span class="pl-v">this</span>._s0,<span class="pl-v">this</span>._s1,<span class="pl-v">this</span>._s2,<span class="pl-v">this</span>._c]},<span class="pl-en">setState</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._s0<span class="pl-k">=</span>a[<span class="pl-c1">0</span>];<span class="pl-v">this</span>._s1<span class="pl-k">=</span>a[<span class="pl-c1">1</span>];<span class="pl-v">this</span>._s2<span class="pl-k">=</span>a[<span class="pl-c1">2</span>];<span class="pl-v">this</span>._c<span class="pl-k">=</span>a[<span class="pl-c1">3</span>];<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-v">this</span>);</td>
      </tr>
      <tr>
        <td id="L43" class="blob-num js-line-number" data-line-number="43"></td>
        <td id="LC43" class="blob-code blob-code-inner js-file-line">a.setState(<span class="pl-v">this</span>.getState());<span class="pl-k">return</span> a},_s0<span class="pl-k">:</span><span class="pl-c1">0</span>,_s1<span class="pl-k">:</span><span class="pl-c1">0</span>,_s2<span class="pl-k">:</span><span class="pl-c1">0</span>,_c<span class="pl-k">:</span><span class="pl-c1">0</span>,_frac<span class="pl-k">:</span><span class="pl-c1">2.3283064365386963E-10</span>};<span class="pl-c1">ROT</span>.RNG.setSeed(<span class="pl-c1">Date</span>.now());<span class="pl-c1">ROT</span>.<span class="pl-en">StringGenerator</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._options<span class="pl-k">=</span>{words<span class="pl-k">:!</span><span class="pl-c1">1</span>,order<span class="pl-k">:</span><span class="pl-c1">3</span>,prior<span class="pl-k">:</span>.<span class="pl-c1">001</span>};<span class="pl-k">for</span>(<span class="pl-k">var</span> b <span class="pl-k">in</span> a)<span class="pl-v">this</span>._options[b]<span class="pl-k">=</span>a[b];<span class="pl-v">this</span>._suffix<span class="pl-k">=</span><span class="pl-v">this</span>._boundary<span class="pl-k">=</span><span class="pl-c1">String</span>.<span class="pl-c1">fromCharCode</span>(<span class="pl-c1">0</span>);<span class="pl-v">this</span>._prefix<span class="pl-k">=</span>[];<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span><span class="pl-v">this</span>._options.order;a<span class="pl-k">++</span>)<span class="pl-v">this</span>._prefix.<span class="pl-c1">push</span>(<span class="pl-v">this</span>._boundary);<span class="pl-v">this</span>._priorValues<span class="pl-k">=</span>{};<span class="pl-v">this</span>._priorValues[<span class="pl-v">this</span>._boundary]<span class="pl-k">=</span><span class="pl-v">this</span>._options.prior;<span class="pl-v">this</span>._data<span class="pl-k">=</span>{}};</td>
      </tr>
      <tr>
        <td id="L44" class="blob-num js-line-number" data-line-number="44"></td>
        <td id="LC44" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.StringGenerator</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clear</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>._data<span class="pl-k">=</span>{};<span class="pl-v">this</span>._priorValues<span class="pl-k">=</span>{}};<span class="pl-c1">ROT.StringGenerator</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">generate</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span>[<span class="pl-v">this</span>._sample(<span class="pl-v">this</span>._prefix)];a[a.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-k">!=</span><span class="pl-v">this</span>._boundary;)a.<span class="pl-c1">push</span>(<span class="pl-v">this</span>._sample(a));<span class="pl-k">return</span> <span class="pl-v">this</span>._join(a.<span class="pl-c1">slice</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>))};</td>
      </tr>
      <tr>
        <td id="L45" class="blob-num js-line-number" data-line-number="45"></td>
        <td id="LC45" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.StringGenerator</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">observe</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-v">this</span>._split(a);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span>a.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-v">this</span>._priorValues[a[b]]<span class="pl-k">=</span><span class="pl-v">this</span>._options.prior;a<span class="pl-k">=</span><span class="pl-v">this</span>._prefix.<span class="pl-c1">concat</span>(a).<span class="pl-c1">concat</span>(<span class="pl-v">this</span>._suffix);<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-v">this</span>._options.order;b<span class="pl-k">&lt;</span>a.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>a.<span class="pl-c1">slice</span>(b<span class="pl-k">-</span><span class="pl-v">this</span>._options.order,b),d<span class="pl-k">=</span>a[b],e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>c.<span class="pl-c1">length</span>;e<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>c.<span class="pl-c1">slice</span>(e);<span class="pl-v">this</span>._observeEvent(f,d)}};</td>
      </tr>
      <tr>
        <td id="L46" class="blob-num js-line-number" data-line-number="46"></td>
        <td id="LC46" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.StringGenerator</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getStats</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span>[],b<span class="pl-k">=</span><span class="pl-c1">0</span>,c;<span class="pl-k">for</span>(c <span class="pl-k">in</span> <span class="pl-v">this</span>._priorValues)b<span class="pl-k">++</span>;b<span class="pl-k">--</span>;a.<span class="pl-c1">push</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>distinct samples: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b);<span class="pl-k">var</span> d<span class="pl-k">=</span>b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c <span class="pl-k">in</span> <span class="pl-v">this</span>._data){b<span class="pl-k">++</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> e <span class="pl-k">in</span> <span class="pl-v">this</span>._data[c])d<span class="pl-k">++</span>}a.<span class="pl-c1">push</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>dictionary size (contexts): <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b);a.<span class="pl-c1">push</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>dictionary size (events): <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>d);<span class="pl-k">return</span> a.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>, <span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">ROT.StringGenerator</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_split</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a.<span class="pl-c1">split</span>(<span class="pl-v">this</span>._options.words<span class="pl-k">?</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-c1">\s</span><span class="pl-k">+</span><span class="pl-pds">/</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">ROT.StringGenerator</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_join</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a.<span class="pl-c1">join</span>(<span class="pl-v">this</span>._options.words<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>)};</td>
      </tr>
      <tr>
        <td id="L47" class="blob-num js-line-number" data-line-number="47"></td>
        <td id="LC47" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.StringGenerator</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_observeEvent</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>._join(a);c <span class="pl-k">in</span> <span class="pl-v">this</span>._data<span class="pl-k">||</span>(<span class="pl-v">this</span>._data[c]<span class="pl-k">=</span>{});c<span class="pl-k">=</span><span class="pl-v">this</span>._data[c];b <span class="pl-k">in</span> c<span class="pl-k">||</span>(c[b]<span class="pl-k">=</span><span class="pl-c1">0</span>);c[b]<span class="pl-k">++</span>};<span class="pl-c1">ROT.StringGenerator</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_sample</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-v">this</span>._backoff(a);a<span class="pl-k">=</span><span class="pl-v">this</span>._join(a);a<span class="pl-k">=</span><span class="pl-v">this</span>._data[a];<span class="pl-k">var</span> b<span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-v">this</span>._options.prior){<span class="pl-k">for</span>(<span class="pl-k">var</span> c <span class="pl-k">in</span> <span class="pl-v">this</span>._priorValues)b[c]<span class="pl-k">=</span><span class="pl-v">this</span>._priorValues[c];<span class="pl-k">for</span>(c <span class="pl-k">in</span> a)b[c]<span class="pl-k">+=</span>a[c]}<span class="pl-k">else</span> b<span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">ROT</span>.RNG.getWeightedValue(b)};</td>
      </tr>
      <tr>
        <td id="L48" class="blob-num js-line-number" data-line-number="48"></td>
        <td id="LC48" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.StringGenerator</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_backoff</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(a.<span class="pl-c1">length</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>._options.order<span class="pl-k">?</span>a<span class="pl-k">=</span>a.<span class="pl-c1">slice</span>(<span class="pl-k">-</span><span class="pl-v">this</span>._options.order)<span class="pl-k">:</span>a.<span class="pl-c1">length</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>._options.order<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-v">this</span>._prefix.<span class="pl-c1">slice</span>(<span class="pl-c1">0</span>,<span class="pl-v">this</span>._options.order<span class="pl-k">-</span>a.<span class="pl-c1">length</span>).<span class="pl-c1">concat</span>(a));<span class="pl-k">!</span>(<span class="pl-v">this</span>._join(a)<span class="pl-k">in</span> <span class="pl-v">this</span>._data)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">length</span>;)a<span class="pl-k">=</span>a.<span class="pl-c1">slice</span>(<span class="pl-c1">1</span>);<span class="pl-k">return</span> a};<span class="pl-c1">ROT</span>.<span class="pl-en">EventQueue</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>._time<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._events<span class="pl-k">=</span>[];<span class="pl-v">this</span>._eventTimes<span class="pl-k">=</span>[]};<span class="pl-c1">ROT.EventQueue</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getTime</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._time};<span class="pl-c1">ROT.EventQueue</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clear</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>._events<span class="pl-k">=</span>[];<span class="pl-v">this</span>._eventTimes<span class="pl-k">=</span>[];<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L49" class="blob-num js-line-number" data-line-number="49"></td>
        <td id="LC49" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.EventQueue</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">add</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>._events.<span class="pl-c1">length</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-v">this</span>._eventTimes.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>)<span class="pl-k">if</span>(<span class="pl-v">this</span>._eventTimes[d]<span class="pl-k">&gt;</span>b){c<span class="pl-k">=</span>d;<span class="pl-k">break</span>}<span class="pl-v">this</span>._events.<span class="pl-c1">splice</span>(c,<span class="pl-c1">0</span>,a);<span class="pl-v">this</span>._eventTimes.<span class="pl-c1">splice</span>(c,<span class="pl-c1">0</span>,b)};<span class="pl-c1">ROT.EventQueue</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">get</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-v">this</span>._events.<span class="pl-c1">length</span>)<span class="pl-k">return</span> <span class="pl-c1">null</span>;<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>._eventTimes.<span class="pl-c1">splice</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)[<span class="pl-c1">0</span>];<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>a){<span class="pl-v">this</span>._time<span class="pl-k">+=</span>a;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-v">this</span>._eventTimes.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-v">this</span>._eventTimes[b]<span class="pl-k">-=</span>a}<span class="pl-k">return</span> <span class="pl-v">this</span>._events.<span class="pl-c1">splice</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)[<span class="pl-c1">0</span>]};</td>
      </tr>
      <tr>
        <td id="L50" class="blob-num js-line-number" data-line-number="50"></td>
        <td id="LC50" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.EventQueue</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">remove</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-v">this</span>._events.<span class="pl-c1">indexOf</span>(a);<span class="pl-k">if</span>(<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">==</span>a)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>._remove(a);<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>};<span class="pl-c1">ROT.EventQueue</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_remove</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._events.<span class="pl-c1">splice</span>(a,<span class="pl-c1">1</span>);<span class="pl-v">this</span>._eventTimes.<span class="pl-c1">splice</span>(a,<span class="pl-c1">1</span>)};<span class="pl-c1">ROT</span>.<span class="pl-en">Scheduler</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>._queue<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">ROT.EventQueue</span>;<span class="pl-v">this</span>._repeat<span class="pl-k">=</span>[];<span class="pl-v">this</span>._current<span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-c1">ROT.Scheduler</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getTime</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._queue.<span class="pl-c1">getTime</span>()};<span class="pl-c1">ROT.Scheduler</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">add</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){b<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>._repeat.<span class="pl-c1">push</span>(a);<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L51" class="blob-num js-line-number" data-line-number="51"></td>
        <td id="LC51" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Scheduler</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clear</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>._queue.<span class="pl-c1">clear</span>();<span class="pl-v">this</span>._repeat<span class="pl-k">=</span>[];<span class="pl-v">this</span>._current<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">ROT.Scheduler</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">remove</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>._queue.remove(a),c<span class="pl-k">=</span><span class="pl-v">this</span>._repeat.<span class="pl-c1">indexOf</span>(a);<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!=</span>c<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>._repeat.<span class="pl-c1">splice</span>(c,<span class="pl-c1">1</span>);<span class="pl-v">this</span>._current<span class="pl-k">==</span>a<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>._current<span class="pl-k">=</span><span class="pl-c1">null</span>);<span class="pl-k">return</span> b};<span class="pl-c1">ROT.Scheduler</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">next</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._current<span class="pl-k">=</span><span class="pl-v">this</span>._queue.get()};<span class="pl-c1">ROT.Scheduler</span>.<span class="pl-en">Simple</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">ROT</span>.Scheduler.<span class="pl-c1">call</span>(<span class="pl-v">this</span>)};<span class="pl-c1">ROT</span>.Scheduler.Simple.extend(<span class="pl-c1">ROT</span>.Scheduler);</td>
      </tr>
      <tr>
        <td id="L52" class="blob-num js-line-number" data-line-number="52"></td>
        <td id="LC52" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Scheduler.Simple</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">add</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>._queue.<span class="pl-c1">add</span>(a,<span class="pl-c1">0</span>);<span class="pl-k">return</span> <span class="pl-c1">ROT</span>.Scheduler.<span class="pl-c1">prototype</span>.add.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b)};<span class="pl-c1">ROT.Scheduler.Simple</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">next</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>._current<span class="pl-k">&amp;&amp;-</span><span class="pl-c1">1</span><span class="pl-k">!=</span><span class="pl-v">this</span>._repeat.<span class="pl-c1">indexOf</span>(<span class="pl-v">this</span>._current)<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>._queue.<span class="pl-c1">add</span>(<span class="pl-v">this</span>._current,<span class="pl-c1">0</span>);<span class="pl-k">return</span> <span class="pl-c1">ROT</span>.Scheduler.<span class="pl-c1">prototype</span>.<span class="pl-c1">next</span>.<span class="pl-c1">call</span>(<span class="pl-v">this</span>)};<span class="pl-c1">ROT.Scheduler</span>.<span class="pl-en">Speed</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">ROT</span>.Scheduler.<span class="pl-c1">call</span>(<span class="pl-v">this</span>)};<span class="pl-c1">ROT</span>.Scheduler.Speed.extend(<span class="pl-c1">ROT</span>.Scheduler);</td>
      </tr>
      <tr>
        <td id="L53" class="blob-num js-line-number" data-line-number="53"></td>
        <td id="LC53" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Scheduler.Speed</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">add</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>._queue.<span class="pl-c1">add</span>(a,<span class="pl-c1">1</span><span class="pl-k">/</span>a.getSpeed());<span class="pl-k">return</span> <span class="pl-c1">ROT</span>.Scheduler.<span class="pl-c1">prototype</span>.add.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b)};<span class="pl-c1">ROT.Scheduler.Speed</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">next</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>._current<span class="pl-k">&amp;&amp;-</span><span class="pl-c1">1</span><span class="pl-k">!=</span><span class="pl-v">this</span>._repeat.<span class="pl-c1">indexOf</span>(<span class="pl-v">this</span>._current)<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>._queue.<span class="pl-c1">add</span>(<span class="pl-v">this</span>._current,<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-v">this</span>._current.getSpeed());<span class="pl-k">return</span> <span class="pl-c1">ROT</span>.Scheduler.<span class="pl-c1">prototype</span>.<span class="pl-c1">next</span>.<span class="pl-c1">call</span>(<span class="pl-v">this</span>)};<span class="pl-c1">ROT.Scheduler</span>.<span class="pl-en">Action</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">ROT</span>.Scheduler.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>._duration<span class="pl-k">=</span><span class="pl-v">this</span>._defaultDuration<span class="pl-k">=</span><span class="pl-c1">1</span>};<span class="pl-c1">ROT</span>.Scheduler.Action.extend(<span class="pl-c1">ROT</span>.Scheduler);</td>
      </tr>
      <tr>
        <td id="L54" class="blob-num js-line-number" data-line-number="54"></td>
        <td id="LC54" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Scheduler.Action</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">add</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>._queue.<span class="pl-c1">add</span>(a,c<span class="pl-k">||</span><span class="pl-v">this</span>._defaultDuration);<span class="pl-k">return</span> <span class="pl-c1">ROT</span>.Scheduler.<span class="pl-c1">prototype</span>.add.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b)};<span class="pl-c1">ROT.Scheduler.Action</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clear</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>._duration<span class="pl-k">=</span><span class="pl-v">this</span>._defaultDuration;<span class="pl-k">return</span> <span class="pl-c1">ROT</span>.Scheduler.<span class="pl-c1">prototype</span>.<span class="pl-c1">clear</span>.<span class="pl-c1">call</span>(<span class="pl-v">this</span>)};<span class="pl-c1">ROT.Scheduler.Action</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">remove</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">==</span><span class="pl-v">this</span>._current<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>._duration<span class="pl-k">=</span><span class="pl-v">this</span>._defaultDuration);<span class="pl-k">return</span> <span class="pl-c1">ROT</span>.Scheduler.<span class="pl-c1">prototype</span>.remove.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a)};</td>
      </tr>
      <tr>
        <td id="L55" class="blob-num js-line-number" data-line-number="55"></td>
        <td id="LC55" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Scheduler.Action</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">next</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>._current<span class="pl-k">&amp;&amp;-</span><span class="pl-c1">1</span><span class="pl-k">!=</span><span class="pl-v">this</span>._repeat.<span class="pl-c1">indexOf</span>(<span class="pl-v">this</span>._current)<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>._queue.<span class="pl-c1">add</span>(<span class="pl-v">this</span>._current,<span class="pl-v">this</span>._duration<span class="pl-k">||</span><span class="pl-v">this</span>._defaultDuration),<span class="pl-v">this</span>._duration<span class="pl-k">=</span><span class="pl-v">this</span>._defaultDuration);<span class="pl-k">return</span> <span class="pl-c1">ROT</span>.Scheduler.<span class="pl-c1">prototype</span>.<span class="pl-c1">next</span>.<span class="pl-c1">call</span>(<span class="pl-v">this</span>)};<span class="pl-c1">ROT.Scheduler.Action</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setDuration</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._current<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>._duration<span class="pl-k">=</span>a);<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">ROT</span>.<span class="pl-en">Engine</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._scheduler<span class="pl-k">=</span>a;<span class="pl-v">this</span>._lock<span class="pl-k">=</span><span class="pl-c1">1</span>};<span class="pl-c1">ROT.Engine</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">start</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.unlock()};</td>
      </tr>
      <tr>
        <td id="L56" class="blob-num js-line-number" data-line-number="56"></td>
        <td id="LC56" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Engine</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">lock</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>._lock<span class="pl-k">++</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">ROT.Engine</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">unlock</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-v">this</span>._lock)<span class="pl-k">throw</span> Error(<span class="pl-s"><span class="pl-pds">&quot;</span>Cannot unlock unlocked engine<span class="pl-pds">&quot;</span></span>);<span class="pl-k">for</span>(<span class="pl-v">this</span>._lock<span class="pl-k">--</span>;<span class="pl-k">!</span><span class="pl-v">this</span>._lock;){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>._scheduler.<span class="pl-c1">next</span>();<span class="pl-k">if</span>(<span class="pl-k">!</span>a)<span class="pl-k">return</span> <span class="pl-v">this</span>.lock();(a<span class="pl-k">=</span>a.act())<span class="pl-k">&amp;&amp;</span>a.then<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.lock(),a.then(<span class="pl-v">this</span>.unlock.bind(<span class="pl-v">this</span>)))}<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">ROT</span>.<span class="pl-en">Map</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>._width<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">ROT</span>.DEFAULT_WIDTH;<span class="pl-v">this</span>._height<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">ROT</span>.DEFAULT_HEIGHT};<span class="pl-c1">ROT.Map</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){};</td>
      </tr>
      <tr>
        <td id="L57" class="blob-num js-line-number" data-line-number="57"></td>
        <td id="LC57" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_fillMap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>[],c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-v">this</span>._width;c<span class="pl-k">++</span>){b.<span class="pl-c1">push</span>([]);<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-v">this</span>._height;d<span class="pl-k">++</span>)b[c].<span class="pl-c1">push</span>(a)}<span class="pl-k">return</span> b};<span class="pl-c1">ROT.Map</span>.<span class="pl-en">Arena</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">ROT</span>.Map.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b)};<span class="pl-c1">ROT</span>.Map.Arena.extend(<span class="pl-c1">ROT</span>.Map);<span class="pl-c1">ROT.Map.Arena</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>._width<span class="pl-k">-</span><span class="pl-c1">1</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>._height<span class="pl-k">-</span><span class="pl-c1">1</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;=</span>b;d<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;=</span>c;e<span class="pl-k">++</span>)a(d,e,d<span class="pl-k">&amp;&amp;</span>e<span class="pl-k">&amp;&amp;</span>d<span class="pl-k">&lt;</span>b<span class="pl-k">&amp;&amp;</span>e<span class="pl-k">&lt;</span>c<span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">ROT.Map</span>.<span class="pl-en">DividedMaze</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">ROT</span>.Map.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b);<span class="pl-v">this</span>._stack<span class="pl-k">=</span>[]};<span class="pl-c1">ROT</span>.Map.DividedMaze.extend(<span class="pl-c1">ROT</span>.Map);</td>
      </tr>
      <tr>
        <td id="L58" class="blob-num js-line-number" data-line-number="58"></td>
        <td id="LC58" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.DividedMaze</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>._width,c<span class="pl-k">=</span><span class="pl-v">this</span>._height;<span class="pl-v">this</span>._map<span class="pl-k">=</span>[];<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>b;d<span class="pl-k">++</span>){<span class="pl-v">this</span>._map.<span class="pl-c1">push</span>([]);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>c;e<span class="pl-k">++</span>)<span class="pl-v">this</span>._map[d].<span class="pl-c1">push</span>(<span class="pl-c1">0</span><span class="pl-k">==</span>d<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">==</span>e<span class="pl-k">||</span>d<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">==</span>b<span class="pl-k">||</span>e<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">==</span>c<span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>)}<span class="pl-v">this</span>._stack<span class="pl-k">=</span>[[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,b<span class="pl-k">-</span><span class="pl-c1">2</span>,c<span class="pl-k">-</span><span class="pl-c1">2</span>]];<span class="pl-v">this</span>._process();<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>b;d<span class="pl-k">++</span>)<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>c;e<span class="pl-k">++</span>)a(d,e,<span class="pl-v">this</span>._map[d][e]);<span class="pl-v">this</span>._map<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">ROT.Map.DividedMaze</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_process</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(;<span class="pl-v">this</span>._stack.<span class="pl-c1">length</span>;){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>._stack.<span class="pl-c1">shift</span>();<span class="pl-v">this</span>._partitionRoom(a)}};</td>
      </tr>
      <tr>
        <td id="L59" class="blob-num js-line-number" data-line-number="59"></td>
        <td id="LC59" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.DividedMaze</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_partitionRoom</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>[],c<span class="pl-k">=</span>[],d<span class="pl-k">=</span>a[<span class="pl-c1">0</span>]<span class="pl-k">+</span><span class="pl-c1">1</span>;d<span class="pl-k">&lt;</span>a[<span class="pl-c1">2</span>];d<span class="pl-k">++</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>._map[d][a[<span class="pl-c1">3</span>]<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-k">!</span><span class="pl-v">this</span>._map[d][a[<span class="pl-c1">1</span>]<span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-k">||!</span>e<span class="pl-k">||</span>d<span class="pl-k">%</span><span class="pl-c1">2</span><span class="pl-k">||</span>b.<span class="pl-c1">push</span>(d)}<span class="pl-k">for</span>(d<span class="pl-k">=</span>a[<span class="pl-c1">1</span>]<span class="pl-k">+</span><span class="pl-c1">1</span>;d<span class="pl-k">&lt;</span>a[<span class="pl-c1">3</span>];d<span class="pl-k">++</span>)e<span class="pl-k">=</span><span class="pl-v">this</span>._map[a[<span class="pl-c1">2</span>]<span class="pl-k">+</span><span class="pl-c1">1</span>][d],<span class="pl-k">!</span><span class="pl-v">this</span>._map[a[<span class="pl-c1">0</span>]<span class="pl-k">-</span><span class="pl-c1">1</span>][d]<span class="pl-k">||!</span>e<span class="pl-k">||</span>d<span class="pl-k">%</span><span class="pl-c1">2</span><span class="pl-k">||</span>c.<span class="pl-c1">push</span>(d);<span class="pl-k">if</span>(b.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>c.<span class="pl-c1">length</span>){b<span class="pl-k">=</span>b.<span class="pl-c1">random</span>();c<span class="pl-k">=</span>c.<span class="pl-c1">random</span>();<span class="pl-v">this</span>._map[b][c]<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> e<span class="pl-k">=</span>[],f<span class="pl-k">=</span>[];e.<span class="pl-c1">push</span>(f);<span class="pl-k">for</span>(d<span class="pl-k">=</span>a[<span class="pl-c1">0</span>];d<span class="pl-k">&lt;</span>b;d<span class="pl-k">++</span>)<span class="pl-v">this</span>._map[d][c]<span class="pl-k">=</span><span class="pl-c1">1</span>,f.<span class="pl-c1">push</span>([d,c]);f<span class="pl-k">=</span>[];e.<span class="pl-c1">push</span>(f);<span class="pl-k">for</span>(d<span class="pl-k">=</span>b<span class="pl-k">+</span><span class="pl-c1">1</span>;d<span class="pl-k">&lt;=</span>a[<span class="pl-c1">2</span>];d<span class="pl-k">++</span>)<span class="pl-v">this</span>._map[d][c]<span class="pl-k">=</span><span class="pl-c1">1</span>,f.<span class="pl-c1">push</span>([d,c]);f<span class="pl-k">=</span>[];e.<span class="pl-c1">push</span>(f);<span class="pl-k">for</span>(d<span class="pl-k">=</span>a[<span class="pl-c1">1</span>];d<span class="pl-k">&lt;</span>c;d<span class="pl-k">++</span>)<span class="pl-v">this</span>._map[b][d]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L60" class="blob-num js-line-number" data-line-number="60"></td>
        <td id="LC60" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>,f.<span class="pl-c1">push</span>([b,d]);f<span class="pl-k">=</span>[];e.<span class="pl-c1">push</span>(f);<span class="pl-k">for</span>(d<span class="pl-k">=</span>c<span class="pl-k">+</span><span class="pl-c1">1</span>;d<span class="pl-k">&lt;=</span>a[<span class="pl-c1">3</span>];d<span class="pl-k">++</span>)<span class="pl-v">this</span>._map[b][d]<span class="pl-k">=</span><span class="pl-c1">1</span>,f.<span class="pl-c1">push</span>([b,d]);<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span>e.<span class="pl-c1">random</span>(),d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>e.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>)f<span class="pl-k">=</span>e[d],f<span class="pl-k">!=</span>g<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span>f.<span class="pl-c1">random</span>(),<span class="pl-v">this</span>._map[f[<span class="pl-c1">0</span>]][f[<span class="pl-c1">1</span>]]<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-v">this</span>._stack.<span class="pl-c1">push</span>([a[<span class="pl-c1">0</span>],a[<span class="pl-c1">1</span>],b<span class="pl-k">-</span><span class="pl-c1">1</span>,c<span class="pl-k">-</span><span class="pl-c1">1</span>]);<span class="pl-v">this</span>._stack.<span class="pl-c1">push</span>([b<span class="pl-k">+</span><span class="pl-c1">1</span>,a[<span class="pl-c1">1</span>],a[<span class="pl-c1">2</span>],c<span class="pl-k">-</span><span class="pl-c1">1</span>]);<span class="pl-v">this</span>._stack.<span class="pl-c1">push</span>([a[<span class="pl-c1">0</span>],c<span class="pl-k">+</span><span class="pl-c1">1</span>,b<span class="pl-k">-</span><span class="pl-c1">1</span>,a[<span class="pl-c1">3</span>]]);<span class="pl-v">this</span>._stack.<span class="pl-c1">push</span>([b<span class="pl-k">+</span><span class="pl-c1">1</span>,c<span class="pl-k">+</span><span class="pl-c1">1</span>,a[<span class="pl-c1">2</span>],a[<span class="pl-c1">3</span>]])}};<span class="pl-c1">ROT.Map</span>.<span class="pl-en">IceyMaze</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">ROT</span>.Map.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b);<span class="pl-v">this</span>._regularity<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">0</span>};<span class="pl-c1">ROT</span>.Map.IceyMaze.extend(<span class="pl-c1">ROT</span>.Map);</td>
      </tr>
      <tr>
        <td id="L61" class="blob-num js-line-number" data-line-number="61"></td>
        <td id="LC61" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.IceyMaze</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>._width,c<span class="pl-k">=</span><span class="pl-v">this</span>._height,d<span class="pl-k">=</span><span class="pl-v">this</span>._fillMap(<span class="pl-c1">1</span>),b<span class="pl-k">=</span>b<span class="pl-k">-</span>(b<span class="pl-k">%</span><span class="pl-c1">2</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>),c<span class="pl-k">=</span>c<span class="pl-k">-</span>(c<span class="pl-k">%</span><span class="pl-c1">2</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>),e<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span><span class="pl-c1">0</span>,l<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=!</span><span class="pl-c1">1</span>,p<span class="pl-k">=</span>[[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>]];<span class="pl-k">do</span> <span class="pl-k">if</span>(e<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">ROT</span>.RNG.getUniform()<span class="pl-k">*</span>(b<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>),f<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">ROT</span>.RNG.getUniform()<span class="pl-k">*</span>(c<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>),l<span class="pl-k">||</span>(d[e][f]<span class="pl-k">=</span><span class="pl-c1">0</span>),<span class="pl-k">!</span>d[e][f]){<span class="pl-v">this</span>._randomize(p);<span class="pl-k">do</span>{<span class="pl-c1">0</span><span class="pl-k">==</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">ROT</span>.RNG.getUniform()<span class="pl-k">*</span>(<span class="pl-v">this</span>._regularity<span class="pl-k">+</span><span class="pl-c1">1</span>))<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>._randomize(p);<span class="pl-k">for</span>(<span class="pl-k">var</span> m<span class="pl-k">=!</span><span class="pl-c1">0</span>,q<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">4</span><span class="pl-k">&gt;</span>q;q<span class="pl-k">++</span>)<span class="pl-k">if</span>(g<span class="pl-k">=</span>e<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>p[q][<span class="pl-c1">0</span>],h<span class="pl-k">=</span>f<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>p[q][<span class="pl-c1">1</span>],<span class="pl-v">this</span>._isFree(d,g,h,b,c)){d[g][h]<span class="pl-k">=</span><span class="pl-c1">0</span>;d[e<span class="pl-k">+</span>p[q][<span class="pl-c1">0</span>]][f<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L62" class="blob-num js-line-number" data-line-number="62"></td>
        <td id="LC62" class="blob-code blob-code-inner js-file-line">p[q][<span class="pl-c1">1</span>]]<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">=</span>g;f<span class="pl-k">=</span>h;m<span class="pl-k">=!</span><span class="pl-c1">1</span>;l<span class="pl-k">++</span>;<span class="pl-k">break</span>}}<span class="pl-k">while</span>(<span class="pl-k">!</span>m)}<span class="pl-k">while</span>(l<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>b<span class="pl-k">*</span>c<span class="pl-k">/</span><span class="pl-c1">4</span>);<span class="pl-k">for</span>(q<span class="pl-k">=</span><span class="pl-c1">0</span>;q<span class="pl-k">&lt;</span><span class="pl-v">this</span>._width;q<span class="pl-k">++</span>)<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-v">this</span>._height;b<span class="pl-k">++</span>)a(q,b,d[q][b]);<span class="pl-v">this</span>._map<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L63" class="blob-num js-line-number" data-line-number="63"></td>
        <td id="LC63" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.IceyMaze</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_randomize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">4</span><span class="pl-k">&gt;</span>b;b<span class="pl-k">++</span>)a[b][<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>,a[b][<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">switch</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-c1">ROT</span>.RNG.getUniform())){<span class="pl-k">case</span> <span class="pl-c1">0</span><span class="pl-k">:</span>a[<span class="pl-c1">0</span>][<span class="pl-c1">0</span>]<span class="pl-k">=-</span><span class="pl-c1">1</span>;a[<span class="pl-c1">1</span>][<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;a[<span class="pl-c1">2</span>][<span class="pl-c1">1</span>]<span class="pl-k">=-</span><span class="pl-c1">1</span>;a[<span class="pl-c1">3</span>][<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span><span class="pl-k">:</span>a[<span class="pl-c1">3</span>][<span class="pl-c1">0</span>]<span class="pl-k">=-</span><span class="pl-c1">1</span>;a[<span class="pl-c1">2</span>][<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;a[<span class="pl-c1">1</span>][<span class="pl-c1">1</span>]<span class="pl-k">=-</span><span class="pl-c1">1</span>;a[<span class="pl-c1">0</span>][<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">2</span><span class="pl-k">:</span>a[<span class="pl-c1">2</span>][<span class="pl-c1">0</span>]<span class="pl-k">=-</span><span class="pl-c1">1</span>;a[<span class="pl-c1">3</span>][<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;a[<span class="pl-c1">0</span>][<span class="pl-c1">1</span>]<span class="pl-k">=-</span><span class="pl-c1">1</span>;a[<span class="pl-c1">1</span>][<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">3</span><span class="pl-k">:</span>a[<span class="pl-c1">1</span>][<span class="pl-c1">0</span>]<span class="pl-k">=-</span><span class="pl-c1">1</span>,a[<span class="pl-c1">0</span>][<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>,a[<span class="pl-c1">3</span>][<span class="pl-c1">1</span>]<span class="pl-k">=-</span><span class="pl-c1">1</span>,a[<span class="pl-c1">2</span>][<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>}};<span class="pl-c1">ROT.Map.IceyMaze</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_isFree</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">return</span> <span class="pl-c1">1</span><span class="pl-k">&gt;</span>b<span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">&gt;</span>c<span class="pl-k">||</span>b<span class="pl-k">&gt;=</span>d<span class="pl-k">||</span>c<span class="pl-k">&gt;=</span>e<span class="pl-k">?!</span><span class="pl-c1">1</span><span class="pl-k">:</span>a[b][c]};<span class="pl-c1">ROT.Map</span>.<span class="pl-en">EllerMaze</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">ROT</span>.Map.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b)};<span class="pl-c1">ROT</span>.Map.EllerMaze.extend(<span class="pl-c1">ROT</span>.Map);</td>
      </tr>
      <tr>
        <td id="L64" class="blob-num js-line-number" data-line-number="64"></td>
        <td id="LC64" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.EllerMaze</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>._fillMap(<span class="pl-c1">1</span>),c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>((<span class="pl-v">this</span>._width<span class="pl-k">-</span><span class="pl-c1">2</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>),d<span class="pl-k">=</span>[],e<span class="pl-k">=</span>[],f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>c;f<span class="pl-k">++</span>)d.<span class="pl-c1">push</span>(f),e.<span class="pl-c1">push</span>(f);d.<span class="pl-c1">push</span>(c<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">1</span>;g<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>._height;g<span class="pl-k">+=</span><span class="pl-c1">2</span>)<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>c;f<span class="pl-k">++</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>f<span class="pl-k">+</span><span class="pl-c1">1</span>,l<span class="pl-k">=</span>g;b[h][l]<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">!=</span>d[f<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">&amp;&amp;</span>.<span class="pl-c1">375</span><span class="pl-k">&lt;</span><span class="pl-c1">ROT</span>.RNG.getUniform()<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>._addToList(f,d,e),b[h<span class="pl-k">+</span><span class="pl-c1">1</span>][l]<span class="pl-k">=</span><span class="pl-c1">0</span>);f<span class="pl-k">!=</span>d[f]<span class="pl-k">&amp;&amp;</span>.<span class="pl-c1">375</span><span class="pl-k">&lt;</span><span class="pl-c1">ROT</span>.RNG.getUniform()<span class="pl-k">?</span><span class="pl-v">this</span>._removeFromList(f,d,e)<span class="pl-k">:</span>b[h][l<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>c;f<span class="pl-k">++</span>)h<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>f<span class="pl-k">+</span><span class="pl-c1">1</span>,l<span class="pl-k">=</span>g,b[h][l]<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">!=</span>d[f<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">==</span>d[f]<span class="pl-k">||</span>.<span class="pl-c1">375</span><span class="pl-k">&lt;</span><span class="pl-c1">ROT</span>.RNG.getUniform())<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>._addToList(f,d,e),b[h<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L65" class="blob-num js-line-number" data-line-number="65"></td>
        <td id="LC65" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>][l]<span class="pl-k">=</span><span class="pl-c1">0</span>),<span class="pl-v">this</span>._removeFromList(f,d,e);<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-v">this</span>._width;f<span class="pl-k">++</span>)<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">&lt;</span><span class="pl-v">this</span>._height;g<span class="pl-k">++</span>)a(f,g,b[f][g]);<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">ROT.Map.EllerMaze</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_removeFromList</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){c[b[a]]<span class="pl-k">=</span>c[a];b[c[a]]<span class="pl-k">=</span>b[a];c[a]<span class="pl-k">=</span>a;b[a]<span class="pl-k">=</span>a};<span class="pl-c1">ROT.Map.EllerMaze</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_addToList</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){c[b[a<span class="pl-k">+</span><span class="pl-c1">1</span>]]<span class="pl-k">=</span>c[a];b[c[a]]<span class="pl-k">=</span>b[a<span class="pl-k">+</span><span class="pl-c1">1</span>];c[a]<span class="pl-k">=</span>a<span class="pl-k">+</span><span class="pl-c1">1</span>;b[a<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>a};</td>
      </tr>
      <tr>
        <td id="L66" class="blob-num js-line-number" data-line-number="66"></td>
        <td id="LC66" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map</span>.<span class="pl-en">Cellular</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">ROT</span>.Map.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b);<span class="pl-v">this</span>._options<span class="pl-k">=</span>{born<span class="pl-k">:</span>[<span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">8</span>],survive<span class="pl-k">:</span>[<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">8</span>],topology<span class="pl-k">:</span><span class="pl-c1">8</span>,connected<span class="pl-k">:!</span><span class="pl-c1">1</span>};<span class="pl-v">this</span>.setOptions(c);<span class="pl-v">this</span>._dirs<span class="pl-k">=</span><span class="pl-c1">ROT</span>.DIRS[<span class="pl-v">this</span>._options.topology];<span class="pl-v">this</span>._map<span class="pl-k">=</span><span class="pl-v">this</span>._fillMap(<span class="pl-c1">0</span>)};<span class="pl-c1">ROT</span>.Map.Cellular.extend(<span class="pl-c1">ROT</span>.Map);<span class="pl-c1">ROT.Map.Cellular</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">randomize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-v">this</span>._width;b<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-v">this</span>._height;c<span class="pl-k">++</span>)<span class="pl-v">this</span>._map[b][c]<span class="pl-k">=</span><span class="pl-c1">ROT</span>.RNG.getUniform()<span class="pl-k">&lt;</span>a<span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L67" class="blob-num js-line-number" data-line-number="67"></td>
        <td id="LC67" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Cellular</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setOptions</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b <span class="pl-k">in</span> a)<span class="pl-v">this</span>._options[b]<span class="pl-k">=</span>a[b]};<span class="pl-c1">ROT.Map.Cellular</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>._map[a][b]<span class="pl-k">=</span>c};</td>
      </tr>
      <tr>
        <td id="L68" class="blob-num js-line-number" data-line-number="68"></td>
        <td id="LC68" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Cellular</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>._fillMap(<span class="pl-c1">0</span>),c<span class="pl-k">=</span><span class="pl-v">this</span>._options.born,d<span class="pl-k">=</span><span class="pl-v">this</span>._options.survive,e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-v">this</span>._height;e<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">1</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">==</span><span class="pl-v">this</span>._options.topology<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span><span class="pl-c1">2</span>,g<span class="pl-k">=</span>e<span class="pl-k">%</span><span class="pl-c1">2</span>);<span class="pl-k">for</span>(;g<span class="pl-k">&lt;</span><span class="pl-v">this</span>._width;g<span class="pl-k">+=</span>f){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-v">this</span>._map[g][e],l<span class="pl-k">=</span><span class="pl-v">this</span>._getNeighbors(g,e);h<span class="pl-k">&amp;&amp;-</span><span class="pl-c1">1</span><span class="pl-k">!=</span>d.<span class="pl-c1">indexOf</span>(l)<span class="pl-k">?</span>b[g][e]<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>h<span class="pl-k">||-</span><span class="pl-c1">1</span><span class="pl-k">==</span>c.<span class="pl-c1">indexOf</span>(l)<span class="pl-k">||</span>(b[g][e]<span class="pl-k">=</span><span class="pl-c1">1</span>)}}<span class="pl-v">this</span>._map<span class="pl-k">=</span>b;<span class="pl-v">this</span>._options.connected<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>._completeMaze();<span class="pl-k">if</span>(a)<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-v">this</span>._height;e<span class="pl-k">++</span>)<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">1</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">6</span><span class="pl-k">==</span><span class="pl-v">this</span>._options.topology<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span><span class="pl-c1">2</span>,g<span class="pl-k">=</span>e<span class="pl-k">%</span><span class="pl-c1">2</span>);g<span class="pl-k">&lt;</span><span class="pl-v">this</span>._width;g<span class="pl-k">+=</span>f)a(g,e,b[g][e])};</td>
      </tr>
      <tr>
        <td id="L69" class="blob-num js-line-number" data-line-number="69"></td>
        <td id="LC69" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Cellular</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_getNeighbors</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-v">this</span>._dirs.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>._dirs[d],f<span class="pl-k">=</span>a<span class="pl-k">+</span>e[<span class="pl-c1">0</span>],e<span class="pl-k">=</span>b<span class="pl-k">+</span>e[<span class="pl-c1">1</span>];<span class="pl-c1">0</span><span class="pl-k">&gt;</span>f<span class="pl-k">||</span>f<span class="pl-k">&gt;=</span><span class="pl-v">this</span>._width<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>f<span class="pl-k">||</span>e<span class="pl-k">&gt;=</span><span class="pl-v">this</span>._width<span class="pl-k">||</span>(c<span class="pl-k">+=</span><span class="pl-c1">1</span><span class="pl-k">==</span><span class="pl-v">this</span>._map[f][e]<span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>)}<span class="pl-k">return</span> c};</td>
      </tr>
      <tr>
        <td id="L70" class="blob-num js-line-number" data-line-number="70"></td>
        <td id="LC70" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Cellular</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_completeMaze</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span>[],b<span class="pl-k">=</span>{},c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-v">this</span>._width;c<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-v">this</span>._height;d<span class="pl-k">++</span>)<span class="pl-k">if</span>(<span class="pl-v">this</span>._freeSpace(c,d)){<span class="pl-k">var</span> e<span class="pl-k">=</span>[c,d];b[<span class="pl-v">this</span>._pointKey(e)]<span class="pl-k">=</span>e;a.<span class="pl-c1">push</span>([c,d])}e<span class="pl-k">=</span>a[<span class="pl-c1">ROT</span>.RNG.getUniformInt(<span class="pl-c1">0</span>,a.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>)];c<span class="pl-k">=</span><span class="pl-v">this</span>._pointKey(e);a<span class="pl-k">=</span>{};a[c]<span class="pl-k">=</span>e;<span class="pl-k">delete</span> b[c];<span class="pl-k">for</span>(<span class="pl-v">this</span>._findConnected(a,b,[e]);<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-c1">Object</span>.keys(b).<span class="pl-c1">length</span>;){e<span class="pl-k">=</span><span class="pl-v">this</span>._getFromTo(a,b);c<span class="pl-k">=</span>e[<span class="pl-c1">0</span>];d<span class="pl-k">=</span>e[<span class="pl-c1">1</span>];e<span class="pl-k">=</span>{};e[<span class="pl-v">this</span>._pointKey(c)]<span class="pl-k">=</span>c;<span class="pl-v">this</span>._findConnected(e,b,[c],<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-v">this</span>._tunnelToConnected(d,c,a,b);<span class="pl-k">for</span>(<span class="pl-k">var</span> f <span class="pl-k">in</span> e)c<span class="pl-k">=</span>e[f],<span class="pl-v">this</span>._map[c[<span class="pl-c1">0</span>]][c[<span class="pl-c1">1</span>]]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L71" class="blob-num js-line-number" data-line-number="71"></td>
        <td id="LC71" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,a[f]<span class="pl-k">=</span>c,<span class="pl-k">delete</span> b[f]}};<span class="pl-c1">ROT.Map.Cellular</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_getFromTo</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c,d,e,f<span class="pl-k">=</span><span class="pl-c1">Object</span>.keys(a),g<span class="pl-k">=</span><span class="pl-c1">Object</span>.keys(b),h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">5</span><span class="pl-k">&gt;</span>h<span class="pl-k">&amp;&amp;!</span>(f.<span class="pl-c1">length</span><span class="pl-k">&lt;</span>g.<span class="pl-c1">length</span><span class="pl-k">?</span>(c<span class="pl-k">=</span>f,d<span class="pl-k">=</span>a[c[<span class="pl-c1">ROT</span>.RNG.getUniformInt(<span class="pl-c1">0</span>,c.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>)]],c<span class="pl-k">=</span><span class="pl-v">this</span>._getClosest(d,b))<span class="pl-k">:</span>(c<span class="pl-k">=</span>g,c<span class="pl-k">=</span>b[c[<span class="pl-c1">ROT</span>.RNG.getUniformInt(<span class="pl-c1">0</span>,c.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>)]],d<span class="pl-k">=</span><span class="pl-v">this</span>._getClosest(c,a)),e<span class="pl-k">=</span>(c[<span class="pl-c1">0</span>]<span class="pl-k">-</span>d[<span class="pl-c1">0</span>])<span class="pl-k">*</span>(c[<span class="pl-c1">0</span>]<span class="pl-k">-</span>d[<span class="pl-c1">0</span>])<span class="pl-k">+</span>(c[<span class="pl-c1">1</span>]<span class="pl-k">-</span>d[<span class="pl-c1">1</span>])<span class="pl-k">*</span>(c[<span class="pl-c1">1</span>]<span class="pl-k">-</span>d[<span class="pl-c1">1</span>]),<span class="pl-c1">64</span><span class="pl-k">&gt;</span>e);h<span class="pl-k">++</span>);<span class="pl-k">return</span>[c,d]};</td>
      </tr>
      <tr>
        <td id="L72" class="blob-num js-line-number" data-line-number="72"></td>
        <td id="LC72" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Cellular</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_getClosest</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">null</span>,d<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">for</span>(k <span class="pl-k">in</span> b){<span class="pl-k">var</span> e<span class="pl-k">=</span>b[k],f<span class="pl-k">=</span>(e[<span class="pl-c1">0</span>]<span class="pl-k">-</span>a[<span class="pl-c1">0</span>])<span class="pl-k">*</span>(e[<span class="pl-c1">0</span>]<span class="pl-k">-</span>a[<span class="pl-c1">0</span>])<span class="pl-k">+</span>(e[<span class="pl-c1">1</span>]<span class="pl-k">-</span>a[<span class="pl-c1">1</span>])<span class="pl-k">*</span>(e[<span class="pl-c1">1</span>]<span class="pl-k">-</span>a[<span class="pl-c1">1</span>]);<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">==</span>d<span class="pl-k">||</span>f<span class="pl-k">&lt;</span>d)d<span class="pl-k">=</span>f,c<span class="pl-k">=</span>e}<span class="pl-k">return</span> c};<span class="pl-c1">ROT.Map.Cellular</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_findConnected</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">for</span>(;<span class="pl-c1">0</span><span class="pl-k">&lt;</span>c.<span class="pl-c1">length</span>;)<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span>c.<span class="pl-c1">splice</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)[<span class="pl-c1">0</span>],e<span class="pl-k">=</span>[[e[<span class="pl-c1">0</span>]<span class="pl-k">+</span><span class="pl-c1">1</span>,e[<span class="pl-c1">1</span>]],[e[<span class="pl-c1">0</span>]<span class="pl-k">-</span><span class="pl-c1">1</span>,e[<span class="pl-c1">1</span>]],[e[<span class="pl-c1">0</span>],e[<span class="pl-c1">1</span>]<span class="pl-k">+</span><span class="pl-c1">1</span>],[e[<span class="pl-c1">0</span>],e[<span class="pl-c1">1</span>]<span class="pl-k">-</span><span class="pl-c1">1</span>]],f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>e.<span class="pl-c1">length</span>;f<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-v">this</span>._pointKey(e[f]);<span class="pl-c1">null</span><span class="pl-k">==</span>a[g]<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>._freeSpace(e[f][<span class="pl-c1">0</span>],e[f][<span class="pl-c1">1</span>])<span class="pl-k">&amp;&amp;</span>(a[g]<span class="pl-k">=</span>e[f],d<span class="pl-k">||delete</span> b[g],c.<span class="pl-c1">push</span>(e[f]))}};</td>
      </tr>
      <tr>
        <td id="L73" class="blob-num js-line-number" data-line-number="73"></td>
        <td id="LC73" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Cellular</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_tunnelToConnected</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-v">this</span>._pointKey(b);<span class="pl-k">var</span> e,f;b[<span class="pl-c1">0</span>]<span class="pl-k">&lt;</span>a[<span class="pl-c1">0</span>]<span class="pl-k">?</span>(e<span class="pl-k">=</span>b,f<span class="pl-k">=</span>a)<span class="pl-k">:</span>(e<span class="pl-k">=</span>a,f<span class="pl-k">=</span>b);<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span>e[<span class="pl-c1">0</span>];g<span class="pl-k">&lt;=</span>f[<span class="pl-c1">0</span>];g<span class="pl-k">++</span>){<span class="pl-v">this</span>._map[g][e[<span class="pl-c1">1</span>]]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> h<span class="pl-k">=</span>[g,e[<span class="pl-c1">1</span>]],l<span class="pl-k">=</span><span class="pl-v">this</span>._pointKey(h);c[l]<span class="pl-k">=</span>h;<span class="pl-k">delete</span> d[l]}g<span class="pl-k">=</span>f[<span class="pl-c1">0</span>];b[<span class="pl-c1">1</span>]<span class="pl-k">&lt;</span>a[<span class="pl-c1">1</span>]<span class="pl-k">?</span>(e<span class="pl-k">=</span>b,f<span class="pl-k">=</span>a)<span class="pl-k">:</span>(e<span class="pl-k">=</span>a,f<span class="pl-k">=</span>b);<span class="pl-k">for</span>(a<span class="pl-k">=</span>e[<span class="pl-c1">1</span>];a<span class="pl-k">&lt;</span>f[<span class="pl-c1">1</span>];a<span class="pl-k">++</span>)<span class="pl-v">this</span>._map[g][a]<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span>[g,a],l<span class="pl-k">=</span><span class="pl-v">this</span>._pointKey(h),c[l]<span class="pl-k">=</span>h,<span class="pl-k">delete</span> d[l]};<span class="pl-c1">ROT.Map.Cellular</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_freeSpace</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&lt;=</span>a<span class="pl-k">&amp;&amp;</span>a<span class="pl-k">&lt;</span><span class="pl-v">this</span>._width<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;=</span>b<span class="pl-k">&amp;&amp;</span>b<span class="pl-k">&lt;</span><span class="pl-v">this</span>._height<span class="pl-k">&amp;&amp;</span><span class="pl-c1">1</span><span class="pl-k">!=</span><span class="pl-v">this</span>._map[a][b]};</td>
      </tr>
      <tr>
        <td id="L74" class="blob-num js-line-number" data-line-number="74"></td>
        <td id="LC74" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Cellular</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_pointKey</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a[<span class="pl-c1">0</span>]<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a[<span class="pl-c1">1</span>]};<span class="pl-c1">ROT.Map</span>.<span class="pl-en">Dungeon</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">ROT</span>.Map.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b);<span class="pl-v">this</span>._rooms<span class="pl-k">=</span>[];<span class="pl-v">this</span>._corridors<span class="pl-k">=</span>[]};<span class="pl-c1">ROT</span>.Map.Dungeon.extend(<span class="pl-c1">ROT</span>.Map);<span class="pl-c1">ROT.Map.Dungeon</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getRooms</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._rooms};<span class="pl-c1">ROT.Map.Dungeon</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getCorridors</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._corridors};</td>
      </tr>
      <tr>
        <td id="L75" class="blob-num js-line-number" data-line-number="75"></td>
        <td id="LC75" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map</span>.<span class="pl-en">Digger</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">ROT</span>.Map.Dungeon.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b);<span class="pl-v">this</span>._options<span class="pl-k">=</span>{roomWidth<span class="pl-k">:</span>[<span class="pl-c1">3</span>,<span class="pl-c1">9</span>],roomHeight<span class="pl-k">:</span>[<span class="pl-c1">3</span>,<span class="pl-c1">5</span>],corridorLength<span class="pl-k">:</span>[<span class="pl-c1">3</span>,<span class="pl-c1">10</span>],dugPercentage<span class="pl-k">:</span>.<span class="pl-c1">2</span>,timeLimit<span class="pl-k">:</span><span class="pl-c1">1E3</span>};<span class="pl-k">for</span>(<span class="pl-k">var</span> d <span class="pl-k">in</span> c)<span class="pl-v">this</span>._options[d]<span class="pl-k">=</span>c[d];<span class="pl-v">this</span>._features<span class="pl-k">=</span>{Room<span class="pl-k">:</span><span class="pl-c1">4</span>,Corridor<span class="pl-k">:</span><span class="pl-c1">4</span>};<span class="pl-v">this</span>._featureAttempts<span class="pl-k">=</span><span class="pl-c1">20</span>;<span class="pl-v">this</span>._walls<span class="pl-k">=</span>{};<span class="pl-v">this</span>._digCallback<span class="pl-k">=</span><span class="pl-v">this</span>._digCallback.bind(<span class="pl-v">this</span>);<span class="pl-v">this</span>._canBeDugCallback<span class="pl-k">=</span><span class="pl-v">this</span>._canBeDugCallback.bind(<span class="pl-v">this</span>);<span class="pl-v">this</span>._isWallCallback<span class="pl-k">=</span><span class="pl-v">this</span>._isWallCallback.bind(<span class="pl-v">this</span>);<span class="pl-v">this</span>._priorityWallCallback<span class="pl-k">=</span><span class="pl-v">this</span>._priorityWallCallback.bind(<span class="pl-v">this</span>)};<span class="pl-c1">ROT</span>.Map.Digger.extend(<span class="pl-c1">ROT</span>.Map.Dungeon);</td>
      </tr>
      <tr>
        <td id="L76" class="blob-num js-line-number" data-line-number="76"></td>
        <td id="LC76" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Digger</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._rooms<span class="pl-k">=</span>[];<span class="pl-v">this</span>._corridors<span class="pl-k">=</span>[];<span class="pl-v">this</span>._map<span class="pl-k">=</span><span class="pl-v">this</span>._fillMap(<span class="pl-c1">1</span>);<span class="pl-v">this</span>._walls<span class="pl-k">=</span>{};<span class="pl-v">this</span>._dug<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> b<span class="pl-k">=</span>(<span class="pl-v">this</span>._width<span class="pl-k">-</span><span class="pl-c1">2</span>)<span class="pl-k">*</span>(<span class="pl-v">this</span>._height<span class="pl-k">-</span><span class="pl-c1">2</span>);<span class="pl-v">this</span>._firstRoom();<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Date</span>.now();<span class="pl-k">do</span>{<span class="pl-k">if</span>(<span class="pl-c1">Date</span>.now()<span class="pl-k">-</span>c<span class="pl-k">&gt;</span><span class="pl-v">this</span>._options.timeLimit)<span class="pl-k">break</span>;<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>._findWall();<span class="pl-k">if</span>(<span class="pl-k">!</span>d)<span class="pl-k">break</span>;<span class="pl-k">var</span> e<span class="pl-k">=</span>d.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span>),d<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(e[<span class="pl-c1">0</span>]),e<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(e[<span class="pl-c1">1</span>]),f<span class="pl-k">=</span><span class="pl-v">this</span>._getDiggingDirection(d,e);<span class="pl-k">if</span>(f){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">do</span> <span class="pl-k">if</span>(g<span class="pl-k">++</span>,<span class="pl-v">this</span>._tryFeature(d,e,f[<span class="pl-c1">0</span>],f[<span class="pl-c1">1</span>])){<span class="pl-v">this</span>._removeSurroundingWalls(d,e);<span class="pl-v">this</span>._removeSurroundingWalls(d<span class="pl-k">-</span>f[<span class="pl-c1">0</span>],</td>
      </tr>
      <tr>
        <td id="L77" class="blob-num js-line-number" data-line-number="77"></td>
        <td id="LC77" class="blob-code blob-code-inner js-file-line">e<span class="pl-k">-</span>f[<span class="pl-c1">1</span>]);<span class="pl-k">break</span>}<span class="pl-k">while</span>(g<span class="pl-k">&lt;</span><span class="pl-v">this</span>._featureAttempts);<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">0</span>,h;<span class="pl-k">for</span>(h <span class="pl-k">in</span> <span class="pl-v">this</span>._walls)<span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>._walls[h]<span class="pl-k">&amp;&amp;</span>g<span class="pl-k">++</span>}}<span class="pl-k">while</span>(<span class="pl-v">this</span>._dug<span class="pl-k">/</span>b<span class="pl-k">&lt;</span><span class="pl-v">this</span>._options.dugPercentage<span class="pl-k">||</span>g);<span class="pl-v">this</span>._addDoors();<span class="pl-k">if</span>(a)<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-v">this</span>._width;b<span class="pl-k">++</span>)<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-v">this</span>._height;c<span class="pl-k">++</span>)a(b,c,<span class="pl-v">this</span>._map[b][c]);<span class="pl-v">this</span>._walls<span class="pl-k">=</span>{};<span class="pl-v">this</span>._map<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">ROT.Map.Digger</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_digCallback</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">0</span><span class="pl-k">==</span>c<span class="pl-k">||</span><span class="pl-c1">2</span><span class="pl-k">==</span>c<span class="pl-k">?</span>(<span class="pl-v">this</span>._map[a][b]<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-v">this</span>._dug<span class="pl-k">++</span>)<span class="pl-k">:</span><span class="pl-v">this</span>._walls[a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b]<span class="pl-k">=</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L78" class="blob-num js-line-number" data-line-number="78"></td>
        <td id="LC78" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Digger</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_isWallCallback</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;</span>a<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>b<span class="pl-k">||</span>a<span class="pl-k">&gt;=</span><span class="pl-v">this</span>._width<span class="pl-k">||</span>b<span class="pl-k">&gt;=</span><span class="pl-v">this</span>._height<span class="pl-k">?!</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">==</span><span class="pl-v">this</span>._map[a][b]};<span class="pl-c1">ROT.Map.Digger</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_canBeDugCallback</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">1</span><span class="pl-k">&gt;</span>a<span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">&gt;</span>b<span class="pl-k">||</span>a<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&gt;=</span><span class="pl-v">this</span>._width<span class="pl-k">||</span>b<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&gt;=</span><span class="pl-v">this</span>._height<span class="pl-k">?!</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">==</span><span class="pl-v">this</span>._map[a][b]};<span class="pl-c1">ROT.Map.Digger</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_priorityWallCallback</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>._walls[a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b]<span class="pl-k">=</span><span class="pl-c1">2</span>};</td>
      </tr>
      <tr>
        <td id="L79" class="blob-num js-line-number" data-line-number="79"></td>
        <td id="LC79" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Digger</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_firstRoom</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">ROT</span>.Map.Feature.Room.createRandomCenter(<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>._width<span class="pl-k">/</span><span class="pl-c1">2</span>),<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>._height<span class="pl-k">/</span><span class="pl-c1">2</span>),<span class="pl-v">this</span>._options);<span class="pl-v">this</span>._rooms.<span class="pl-c1">push</span>(a);a.create(<span class="pl-v">this</span>._digCallback)};<span class="pl-c1">ROT.Map.Digger</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_findWall</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span>[],b<span class="pl-k">=</span>[],c;<span class="pl-k">for</span>(c <span class="pl-k">in</span> <span class="pl-v">this</span>._walls)<span class="pl-c1">2</span><span class="pl-k">==</span><span class="pl-v">this</span>._walls[c]<span class="pl-k">?</span>b.<span class="pl-c1">push</span>(c)<span class="pl-k">:</span>a.<span class="pl-c1">push</span>(c);a<span class="pl-k">=</span>b.<span class="pl-c1">length</span><span class="pl-k">?</span>b<span class="pl-k">:</span>a;<span class="pl-k">if</span>(<span class="pl-k">!</span>a.<span class="pl-c1">length</span>)<span class="pl-k">return</span> <span class="pl-c1">null</span>;c<span class="pl-k">=</span>a.<span class="pl-c1">random</span>();<span class="pl-k">delete</span> <span class="pl-v">this</span>._walls[c];<span class="pl-k">return</span> c};</td>
      </tr>
      <tr>
        <td id="L80" class="blob-num js-line-number" data-line-number="80"></td>
        <td id="LC80" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Digger</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_tryFeature</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">ROT</span>.RNG.getWeightedValue(<span class="pl-v">this</span>._features),e<span class="pl-k">=</span><span class="pl-c1">ROT</span>.Map.Feature[e].createRandomAt(a,b,c,d,<span class="pl-v">this</span>._options);<span class="pl-k">if</span>(<span class="pl-k">!</span>e.isValid(<span class="pl-v">this</span>._isWallCallback,<span class="pl-v">this</span>._canBeDugCallback))<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;e.create(<span class="pl-v">this</span>._digCallback);e <span class="pl-k">instanceof</span> <span class="pl-c1">ROT</span>.Map.Feature.Room<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>._rooms.<span class="pl-c1">push</span>(e);e <span class="pl-k">instanceof</span> <span class="pl-c1">ROT</span>.Map.Feature.Corridor<span class="pl-k">&amp;&amp;</span>(e.createPriorityWalls(<span class="pl-v">this</span>._priorityWallCallback),<span class="pl-v">this</span>._corridors.<span class="pl-c1">push</span>(e));<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L81" class="blob-num js-line-number" data-line-number="81"></td>
        <td id="LC81" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Digger</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_removeSurroundingWalls</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">ROT</span>.DIRS[<span class="pl-c1">4</span>],d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>c.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>c[d],f<span class="pl-k">=</span>a<span class="pl-k">+</span>e[<span class="pl-c1">0</span>],g<span class="pl-k">=</span>b<span class="pl-k">+</span>e[<span class="pl-c1">1</span>];<span class="pl-k">delete</span> <span class="pl-v">this</span>._walls[f<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>g];f<span class="pl-k">=</span>a<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>e[<span class="pl-c1">0</span>];g<span class="pl-k">=</span>b<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>e[<span class="pl-c1">1</span>];<span class="pl-k">delete</span> <span class="pl-v">this</span>._walls[f<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>g]}};<span class="pl-c1">ROT.Map.Digger</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_getDiggingDirection</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;=</span>a<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&gt;=</span>b<span class="pl-k">||</span>a<span class="pl-k">&gt;=</span><span class="pl-v">this</span>._width<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">||</span>b<span class="pl-k">&gt;=</span><span class="pl-v">this</span>._height<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">return</span> <span class="pl-c1">null</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">null</span>,d<span class="pl-k">=</span><span class="pl-c1">ROT</span>.DIRS[<span class="pl-c1">4</span>],e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>d.<span class="pl-c1">length</span>;e<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>d[e];<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-v">this</span>._map[a<span class="pl-k">+</span>f[<span class="pl-c1">0</span>]][b<span class="pl-k">+</span>f[<span class="pl-c1">1</span>]]){<span class="pl-k">if</span>(c)<span class="pl-k">return</span> <span class="pl-c1">null</span>;c<span class="pl-k">=</span>f}}<span class="pl-k">return</span> c<span class="pl-k">?</span>[<span class="pl-k">-</span>c[<span class="pl-c1">0</span>],<span class="pl-k">-</span>c[<span class="pl-c1">1</span>]]<span class="pl-k">:</span><span class="pl-c1">null</span>};</td>
      </tr>
      <tr>
        <td id="L82" class="blob-num js-line-number" data-line-number="82"></td>
        <td id="LC82" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Digger</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_addDoors</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>._map,<span class="pl-en">b</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> <span class="pl-c1">1</span><span class="pl-k">==</span>a[b][c]},c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-v">this</span>._rooms.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>._rooms[c];d.clearDoors();d.addDoors(b)}};</td>
      </tr>
      <tr>
        <td id="L83" class="blob-num js-line-number" data-line-number="83"></td>
        <td id="LC83" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map</span>.<span class="pl-en">Uniform</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">ROT</span>.Map.Dungeon.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b);<span class="pl-v">this</span>._options<span class="pl-k">=</span>{roomWidth<span class="pl-k">:</span>[<span class="pl-c1">3</span>,<span class="pl-c1">9</span>],roomHeight<span class="pl-k">:</span>[<span class="pl-c1">3</span>,<span class="pl-c1">5</span>],roomDugPercentage<span class="pl-k">:</span>.<span class="pl-c1">1</span>,timeLimit<span class="pl-k">:</span><span class="pl-c1">1E3</span>};<span class="pl-k">for</span>(<span class="pl-k">var</span> d <span class="pl-k">in</span> c)<span class="pl-v">this</span>._options[d]<span class="pl-k">=</span>c[d];<span class="pl-v">this</span>._corridorAttempts<span class="pl-k">=</span><span class="pl-v">this</span>._roomAttempts<span class="pl-k">=</span><span class="pl-c1">20</span>;<span class="pl-v">this</span>._connected<span class="pl-k">=</span>[];<span class="pl-v">this</span>._unconnected<span class="pl-k">=</span>[];<span class="pl-v">this</span>._digCallback<span class="pl-k">=</span><span class="pl-v">this</span>._digCallback.bind(<span class="pl-v">this</span>);<span class="pl-v">this</span>._canBeDugCallback<span class="pl-k">=</span><span class="pl-v">this</span>._canBeDugCallback.bind(<span class="pl-v">this</span>);<span class="pl-v">this</span>._isWallCallback<span class="pl-k">=</span><span class="pl-v">this</span>._isWallCallback.bind(<span class="pl-v">this</span>)};<span class="pl-c1">ROT</span>.Map.Uniform.extend(<span class="pl-c1">ROT</span>.Map.Dungeon);</td>
      </tr>
      <tr>
        <td id="L84" class="blob-num js-line-number" data-line-number="84"></td>
        <td id="LC84" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Uniform</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Date</span>.now();;){<span class="pl-k">if</span>(<span class="pl-c1">Date</span>.now()<span class="pl-k">-</span>b<span class="pl-k">&gt;</span><span class="pl-v">this</span>._options.timeLimit)<span class="pl-k">return</span> <span class="pl-c1">null</span>;<span class="pl-v">this</span>._map<span class="pl-k">=</span><span class="pl-v">this</span>._fillMap(<span class="pl-c1">1</span>);<span class="pl-v">this</span>._dug<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._rooms<span class="pl-k">=</span>[];<span class="pl-v">this</span>._unconnected<span class="pl-k">=</span>[];<span class="pl-v">this</span>._generateRooms();<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-c1">2</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>._rooms.<span class="pl-c1">length</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>._generateCorridors())<span class="pl-k">break</span>}<span class="pl-k">if</span>(a)<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-v">this</span>._width;b<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-v">this</span>._height;c<span class="pl-k">++</span>)a(b,c,<span class="pl-v">this</span>._map[b][c]);<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L85" class="blob-num js-line-number" data-line-number="85"></td>
        <td id="LC85" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Uniform</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_generateRooms</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>._width<span class="pl-k">-</span><span class="pl-c1">2</span>,b<span class="pl-k">=</span><span class="pl-v">this</span>._height<span class="pl-k">-</span><span class="pl-c1">2</span>;<span class="pl-k">do</span>{<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>._generateRoom();<span class="pl-k">if</span>(<span class="pl-v">this</span>._dug<span class="pl-k">/</span>(a<span class="pl-k">*</span>b)<span class="pl-k">&gt;</span><span class="pl-v">this</span>._options.roomDugPercentage)<span class="pl-k">break</span>}<span class="pl-k">while</span>(c)};<span class="pl-c1">ROT.Map.Uniform</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_generateRoom</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span><span class="pl-v">this</span>._roomAttempts;){a<span class="pl-k">++</span>;<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">ROT</span>.Map.Feature.Room.createRandom(<span class="pl-v">this</span>._width,<span class="pl-v">this</span>._height,<span class="pl-v">this</span>._options);<span class="pl-k">if</span>(b.isValid(<span class="pl-v">this</span>._isWallCallback,<span class="pl-v">this</span>._canBeDugCallback))<span class="pl-k">return</span> b.create(<span class="pl-v">this</span>._digCallback),<span class="pl-v">this</span>._rooms.<span class="pl-c1">push</span>(b),b}<span class="pl-k">return</span> <span class="pl-c1">null</span>};</td>
      </tr>
      <tr>
        <td id="L86" class="blob-num js-line-number" data-line-number="86"></td>
        <td id="LC86" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Uniform</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_generateCorridors</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span><span class="pl-v">this</span>._corridorAttempts;){a<span class="pl-k">++</span>;<span class="pl-v">this</span>._corridors<span class="pl-k">=</span>[];<span class="pl-v">this</span>._map<span class="pl-k">=</span><span class="pl-v">this</span>._fillMap(<span class="pl-c1">1</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-v">this</span>._rooms.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>._rooms[b];c.clearDoors();c.create(<span class="pl-v">this</span>._digCallback)}<span class="pl-v">this</span>._unconnected<span class="pl-k">=</span><span class="pl-v">this</span>._rooms.<span class="pl-c1">slice</span>().randomize();<span class="pl-v">this</span>._connected<span class="pl-k">=</span>[];<span class="pl-k">for</span>(<span class="pl-v">this</span>._unconnected.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>._connected.<span class="pl-c1">push</span>(<span class="pl-v">this</span>._unconnected.<span class="pl-c1">pop</span>());;){b<span class="pl-k">=</span><span class="pl-v">this</span>._connected.<span class="pl-c1">random</span>();b<span class="pl-k">=</span><span class="pl-v">this</span>._closestRoom(<span class="pl-v">this</span>._unconnected,b);c<span class="pl-k">=</span><span class="pl-v">this</span>._closestRoom(<span class="pl-v">this</span>._connected,b);</td>
      </tr>
      <tr>
        <td id="L87" class="blob-num js-line-number" data-line-number="87"></td>
        <td id="LC87" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-v">this</span>._connectRooms(b,c))<span class="pl-k">break</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-v">this</span>._unconnected.<span class="pl-c1">length</span>)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>}}<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>};<span class="pl-c1">ROT.Map.Uniform</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_closestRoom</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Infinity</span>,d<span class="pl-k">=</span>b.getCenter(),e<span class="pl-k">=</span><span class="pl-c1">null</span>,f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>a.<span class="pl-c1">length</span>;f<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>a[f],h<span class="pl-k">=</span>g.getCenter(),l<span class="pl-k">=</span>h[<span class="pl-c1">0</span>]<span class="pl-k">-</span>d[<span class="pl-c1">0</span>],h<span class="pl-k">=</span>h[<span class="pl-c1">1</span>]<span class="pl-k">-</span>d[<span class="pl-c1">1</span>],l<span class="pl-k">=</span>l<span class="pl-k">*</span>l<span class="pl-k">+</span>h<span class="pl-k">*</span>h;l<span class="pl-k">&lt;</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span>l,e<span class="pl-k">=</span>g)}<span class="pl-k">return</span> e};</td>
      </tr>
      <tr>
        <td id="L88" class="blob-num js-line-number" data-line-number="88"></td>
        <td id="LC88" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Uniform</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_connectRooms</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>a.getCenter(),d<span class="pl-k">=</span>b.getCenter(),e<span class="pl-k">=</span>d[<span class="pl-c1">0</span>]<span class="pl-k">-</span>c[<span class="pl-c1">0</span>],c<span class="pl-k">=</span>d[<span class="pl-c1">1</span>]<span class="pl-k">-</span>c[<span class="pl-c1">1</span>];<span class="pl-k">if</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(e)<span class="pl-k">&lt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(c))<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>c<span class="pl-k">?</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span>(c<span class="pl-k">+</span><span class="pl-c1">2</span>)<span class="pl-k">%</span><span class="pl-c1">4</span>,g<span class="pl-k">=</span>b.getLeft(),h<span class="pl-k">=</span>b.getRight(),e<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">else</span> c<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>e<span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>,f<span class="pl-k">=</span>(c<span class="pl-k">+</span><span class="pl-c1">2</span>)<span class="pl-k">%</span><span class="pl-c1">4</span>,g<span class="pl-k">=</span>b.getTop(),h<span class="pl-k">=</span>b.getBottom(),e<span class="pl-k">=</span><span class="pl-c1">1</span>;c<span class="pl-k">=</span><span class="pl-v">this</span>._placeInWall(a,c);<span class="pl-k">if</span>(<span class="pl-k">!</span>c)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(c[e]<span class="pl-k">&gt;=</span>g<span class="pl-k">&amp;&amp;</span>c[e]<span class="pl-k">&lt;=</span>h){<span class="pl-k">var</span> l<span class="pl-k">=</span>c.<span class="pl-c1">slice</span>(),d<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">switch</span>(f){<span class="pl-k">case</span> <span class="pl-c1">0</span><span class="pl-k">:</span>d<span class="pl-k">=</span>b.getTop()<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span><span class="pl-k">:</span>d<span class="pl-k">=</span>b.getRight()<span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">2</span><span class="pl-k">:</span>d<span class="pl-k">=</span>b.getBottom()<span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">3</span><span class="pl-k">:</span>d<span class="pl-k">=</span>b.getLeft()<span class="pl-k">-</span><span class="pl-c1">1</span>}l[(e<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>d;<span class="pl-v">this</span>._digLine([c,l])}<span class="pl-k">else</span> <span class="pl-k">if</span>(c[e]<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L89" class="blob-num js-line-number" data-line-number="89"></td>
        <td id="LC89" class="blob-code blob-code-inner js-file-line">g<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">||</span>c[e]<span class="pl-k">&gt;</span>h<span class="pl-k">+</span><span class="pl-c1">1</span>){d<span class="pl-k">=</span>c[e]<span class="pl-k">-</span>d[e];<span class="pl-k">switch</span>(f){<span class="pl-k">case</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-k">case</span> <span class="pl-c1">1</span><span class="pl-k">:</span>l<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>d<span class="pl-k">?</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-k">case</span> <span class="pl-c1">3</span><span class="pl-k">:</span>l<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>d<span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>}l<span class="pl-k">=</span><span class="pl-v">this</span>._placeInWall(b,(f<span class="pl-k">+</span>l)<span class="pl-k">%</span><span class="pl-c1">4</span>);<span class="pl-k">if</span>(<span class="pl-k">!</span>l)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;f<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>];f[e]<span class="pl-k">=</span>c[e];d<span class="pl-k">=</span>(e<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">2</span>;f[d]<span class="pl-k">=</span>l[d];<span class="pl-v">this</span>._digLine([c,f,l])}<span class="pl-k">else</span>{d<span class="pl-k">=</span>(e<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">2</span>;l<span class="pl-k">=</span><span class="pl-v">this</span>._placeInWall(b,f);<span class="pl-k">if</span>(<span class="pl-k">!</span>l)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>((l[d]<span class="pl-k">+</span>c[d])<span class="pl-k">/</span><span class="pl-c1">2</span>);g<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>];h<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>];g[e]<span class="pl-k">=</span>c[e];g[d]<span class="pl-k">=</span>f;h[e]<span class="pl-k">=</span>l[e];h[d]<span class="pl-k">=</span>f;<span class="pl-v">this</span>._digLine([c,g,h,l])}a.addDoor(c[<span class="pl-c1">0</span>],c[<span class="pl-c1">1</span>]);b.addDoor(l[<span class="pl-c1">0</span>],l[<span class="pl-c1">1</span>]);e<span class="pl-k">=</span><span class="pl-v">this</span>._unconnected.<span class="pl-c1">indexOf</span>(a);<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!=</span>e<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>._unconnected.<span class="pl-c1">splice</span>(e,<span class="pl-c1">1</span>),<span class="pl-v">this</span>._connected.<span class="pl-c1">push</span>(a));e<span class="pl-k">=</span><span class="pl-v">this</span>._unconnected.<span class="pl-c1">indexOf</span>(b);</td>
      </tr>
      <tr>
        <td id="L90" class="blob-num js-line-number" data-line-number="90"></td>
        <td id="LC90" class="blob-code blob-code-inner js-file-line"><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!=</span>e<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>._unconnected.<span class="pl-c1">splice</span>(e,<span class="pl-c1">1</span>),<span class="pl-v">this</span>._connected.<span class="pl-c1">push</span>(b));<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L91" class="blob-num js-line-number" data-line-number="91"></td>
        <td id="LC91" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Uniform</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_placeInWall</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],d<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],e<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">switch</span>(b){<span class="pl-k">case</span> <span class="pl-c1">0</span><span class="pl-k">:</span>d<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-c1">0</span>];c<span class="pl-k">=</span>[a.getLeft(),a.getTop()<span class="pl-k">-</span><span class="pl-c1">1</span>];e<span class="pl-k">=</span>a.getRight()<span class="pl-k">-</span>a.getLeft()<span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span><span class="pl-k">:</span>d<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>];c<span class="pl-k">=</span>[a.getRight()<span class="pl-k">+</span><span class="pl-c1">1</span>,a.getTop()];e<span class="pl-k">=</span>a.getBottom()<span class="pl-k">-</span>a.getTop()<span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">2</span><span class="pl-k">:</span>d<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-c1">0</span>];c<span class="pl-k">=</span>[a.getLeft(),a.getBottom()<span class="pl-k">+</span><span class="pl-c1">1</span>];e<span class="pl-k">=</span>a.getRight()<span class="pl-k">-</span>a.getLeft()<span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">3</span><span class="pl-k">:</span>d<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>],c<span class="pl-k">=</span>[a.getLeft()<span class="pl-k">-</span><span class="pl-c1">1</span>,a.getTop()],e<span class="pl-k">=</span>a.getBottom()<span class="pl-k">-</span>a.getTop()<span class="pl-k">+</span><span class="pl-c1">1</span>}<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span>[],g<span class="pl-k">=-</span><span class="pl-c1">2</span>,h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span>e;h<span class="pl-k">++</span>){<span class="pl-k">var</span> l<span class="pl-k">=</span>c[<span class="pl-c1">0</span>]<span class="pl-k">+</span>h<span class="pl-k">*</span>d[<span class="pl-c1">0</span>],m<span class="pl-k">=</span>c[<span class="pl-c1">1</span>]<span class="pl-k">+</span>h<span class="pl-k">*</span>d[<span class="pl-c1">1</span>];f.<span class="pl-c1">push</span>(<span class="pl-c1">null</span>);<span class="pl-c1">1</span><span class="pl-k">==</span><span class="pl-v">this</span>._map[l][m]<span class="pl-k">?</span>g<span class="pl-k">!=</span>h<span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L92" class="blob-num js-line-number" data-line-number="92"></td>
        <td id="LC92" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span><span class="pl-k">&amp;&amp;</span>(f[h]<span class="pl-k">=</span>[l,m])<span class="pl-k">:</span>(g<span class="pl-k">=</span>h)<span class="pl-k">&amp;&amp;</span>(f[h<span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">null</span>)}<span class="pl-k">for</span>(h<span class="pl-k">=</span>f.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>h;h<span class="pl-k">--</span>)f[h]<span class="pl-k">||</span>f.<span class="pl-c1">splice</span>(h,<span class="pl-c1">1</span>);<span class="pl-k">return</span> f.<span class="pl-c1">length</span><span class="pl-k">?</span>f.<span class="pl-c1">random</span>()<span class="pl-k">:</span><span class="pl-c1">null</span>};<span class="pl-c1">ROT.Map.Uniform</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_digLine</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">1</span>;b<span class="pl-k">&lt;</span>a.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>a[b<span class="pl-k">-</span><span class="pl-c1">1</span>],d<span class="pl-k">=</span>a[b],c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">ROT.Map</span>.Feature.Corridor(c[<span class="pl-c1">0</span>],c[<span class="pl-c1">1</span>],d[<span class="pl-c1">0</span>],d[<span class="pl-c1">1</span>]);c.create(<span class="pl-v">this</span>._digCallback);<span class="pl-v">this</span>._corridors.<span class="pl-c1">push</span>(c)}};<span class="pl-c1">ROT.Map.Uniform</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_digCallback</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>._map[a][b]<span class="pl-k">=</span>c;<span class="pl-c1">0</span><span class="pl-k">==</span>c<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>._dug<span class="pl-k">++</span>};</td>
      </tr>
      <tr>
        <td id="L93" class="blob-num js-line-number" data-line-number="93"></td>
        <td id="LC93" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Uniform</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_isWallCallback</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;</span>a<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>b<span class="pl-k">||</span>a<span class="pl-k">&gt;=</span><span class="pl-v">this</span>._width<span class="pl-k">||</span>b<span class="pl-k">&gt;=</span><span class="pl-v">this</span>._height<span class="pl-k">?!</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">==</span><span class="pl-v">this</span>._map[a][b]};<span class="pl-c1">ROT.Map.Uniform</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_canBeDugCallback</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">1</span><span class="pl-k">&gt;</span>a<span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">&gt;</span>b<span class="pl-k">||</span>a<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&gt;=</span><span class="pl-v">this</span>._width<span class="pl-k">||</span>b<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&gt;=</span><span class="pl-v">this</span>._height<span class="pl-k">?!</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">==</span><span class="pl-v">this</span>._map[a][b]};</td>
      </tr>
      <tr>
        <td id="L94" class="blob-num js-line-number" data-line-number="94"></td>
        <td id="LC94" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map</span>.<span class="pl-en">Rogue</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">ROT</span>.Map.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b);<span class="pl-v">this</span>._options<span class="pl-k">=</span>{cellWidth<span class="pl-k">:</span><span class="pl-c1">3</span>,cellHeight<span class="pl-k">:</span><span class="pl-c1">3</span>};<span class="pl-k">for</span>(<span class="pl-k">var</span> d <span class="pl-k">in</span> c)<span class="pl-v">this</span>._options[d]<span class="pl-k">=</span>c[d];<span class="pl-v">this</span>._options.hasOwnProperty(<span class="pl-s"><span class="pl-pds">&quot;</span>roomWidth<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span>(<span class="pl-v">this</span>._options.roomWidth<span class="pl-k">=</span><span class="pl-v">this</span>._calculateRoomSize(<span class="pl-v">this</span>._width,<span class="pl-v">this</span>._options.cellWidth));<span class="pl-v">this</span>._options.hasOwnProperty(<span class="pl-s"><span class="pl-pds">&quot;</span>roomHeight<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span>(<span class="pl-v">this</span>._options.roomHeight<span class="pl-k">=</span><span class="pl-v">this</span>._calculateRoomSize(<span class="pl-v">this</span>._height,<span class="pl-v">this</span>._options.cellHeight))};<span class="pl-c1">ROT</span>.Map.Rogue.extend(<span class="pl-c1">ROT</span>.Map);</td>
      </tr>
      <tr>
        <td id="L95" class="blob-num js-line-number" data-line-number="95"></td>
        <td id="LC95" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Rogue</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.map<span class="pl-k">=</span><span class="pl-v">this</span>._fillMap(<span class="pl-c1">1</span>);<span class="pl-v">this</span>.rooms<span class="pl-k">=</span>[];<span class="pl-v">this</span>.connectedCells<span class="pl-k">=</span>[];<span class="pl-v">this</span>._initRooms();<span class="pl-v">this</span>._connectRooms();<span class="pl-v">this</span>._connectUnconnectedRooms();<span class="pl-v">this</span>._createRandomRoomConnections();<span class="pl-v">this</span>._createRooms();<span class="pl-v">this</span>._createCorridors();<span class="pl-k">if</span>(a)<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-v">this</span>._width;b<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-v">this</span>._height;c<span class="pl-k">++</span>)a(b,c,<span class="pl-v">this</span>.map[b][c]);<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">ROT.Map.Rogue</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_calculateRoomSize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a<span class="pl-k">/</span>b<span class="pl-k">*</span>.<span class="pl-c1">8</span>),d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a<span class="pl-k">/</span>b<span class="pl-k">*</span>.<span class="pl-c1">25</span>);<span class="pl-c1">2</span><span class="pl-k">&gt;</span>d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span><span class="pl-c1">2</span>);<span class="pl-c1">2</span><span class="pl-k">&gt;</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">2</span>);<span class="pl-k">return</span>[d,c]};</td>
      </tr>
      <tr>
        <td id="L96" class="blob-num js-line-number" data-line-number="96"></td>
        <td id="LC96" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Rogue</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_initRooms</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span><span class="pl-v">this</span>._options.cellWidth;a<span class="pl-k">++</span>){<span class="pl-v">this</span>.rooms.<span class="pl-c1">push</span>([]);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-v">this</span>._options.cellHeight;b<span class="pl-k">++</span>)<span class="pl-v">this</span>.rooms[a].<span class="pl-c1">push</span>({x<span class="pl-k">:</span><span class="pl-c1">0</span>,y<span class="pl-k">:</span><span class="pl-c1">0</span>,width<span class="pl-k">:</span><span class="pl-c1">0</span>,height<span class="pl-k">:</span><span class="pl-c1">0</span>,connections<span class="pl-k">:</span>[],cellx<span class="pl-k">:</span>a,celly<span class="pl-k">:</span>b})}};</td>
      </tr>
      <tr>
        <td id="L97" class="blob-num js-line-number" data-line-number="97"></td>
        <td id="LC97" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Rogue</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_connectRooms</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">ROT</span>.RNG.getUniformInt(<span class="pl-c1">0</span>,<span class="pl-v">this</span>._options.cellWidth<span class="pl-k">-</span><span class="pl-c1">1</span>),b<span class="pl-k">=</span><span class="pl-c1">ROT</span>.RNG.getUniformInt(<span class="pl-c1">0</span>,<span class="pl-v">this</span>._options.cellHeight<span class="pl-k">-</span><span class="pl-c1">1</span>),c,d,e<span class="pl-k">=!</span><span class="pl-c1">1</span>,f;<span class="pl-k">do</span>{<span class="pl-k">var</span> g<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>,<span class="pl-c1">6</span>],g<span class="pl-k">=</span>g.randomize();<span class="pl-k">do</span> <span class="pl-k">if</span>(e<span class="pl-k">=!</span><span class="pl-c1">1</span>,c<span class="pl-k">=</span>g.<span class="pl-c1">pop</span>(),d<span class="pl-k">=</span>a<span class="pl-k">+</span><span class="pl-c1">ROT</span>.DIRS[<span class="pl-c1">8</span>][c][<span class="pl-c1">0</span>],c<span class="pl-k">=</span>b<span class="pl-k">+</span><span class="pl-c1">ROT</span>.DIRS[<span class="pl-c1">8</span>][c][<span class="pl-c1">1</span>],<span class="pl-k">!</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>d<span class="pl-k">||</span>d<span class="pl-k">&gt;=</span><span class="pl-v">this</span>._options.cellWidth<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>c<span class="pl-k">||</span>c<span class="pl-k">&gt;=</span><span class="pl-v">this</span>._options.cellHeight)){f<span class="pl-k">=</span><span class="pl-v">this</span>.rooms[a][b];<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>f.connections.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>f.connections[<span class="pl-c1">0</span>][<span class="pl-c1">0</span>]<span class="pl-k">==</span>d<span class="pl-k">&amp;&amp;</span>f.connections[<span class="pl-c1">0</span>][<span class="pl-c1">1</span>]<span class="pl-k">==</span>c)<span class="pl-k">break</span>;f<span class="pl-k">=</span><span class="pl-v">this</span>.rooms[d][c];<span class="pl-c1">0</span><span class="pl-k">==</span>f.connections.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(f.connections.<span class="pl-c1">push</span>([a,</td>
      </tr>
      <tr>
        <td id="L98" class="blob-num js-line-number" data-line-number="98"></td>
        <td id="LC98" class="blob-code blob-code-inner js-file-line">b]),<span class="pl-v">this</span>.connectedCells.<span class="pl-c1">push</span>([d,c]),a<span class="pl-k">=</span>d,b<span class="pl-k">=</span>c,e<span class="pl-k">=!</span><span class="pl-c1">0</span>)}<span class="pl-k">while</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>g.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">==</span>e)}<span class="pl-k">while</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>g.<span class="pl-c1">length</span>)};</td>
      </tr>
      <tr>
        <td id="L99" class="blob-num js-line-number" data-line-number="99"></td>
        <td id="LC99" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Rogue</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_connectUnconnectedRooms</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>._options.cellWidth,b<span class="pl-k">=</span><span class="pl-v">this</span>._options.cellHeight;<span class="pl-v">this</span>.connectedCells<span class="pl-k">=</span><span class="pl-v">this</span>.connectedCells.randomize();<span class="pl-k">for</span>(<span class="pl-k">var</span> c,d,e,f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-v">this</span>._options.cellWidth;f<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">&lt;</span><span class="pl-v">this</span>._options.cellHeight;g<span class="pl-k">++</span>)<span class="pl-k">if</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.rooms[f][g],<span class="pl-c1">0</span><span class="pl-k">==</span>c.connections.<span class="pl-c1">length</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>,<span class="pl-c1">6</span>],h<span class="pl-k">=</span>h.randomize();e<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-k">do</span>{<span class="pl-k">var</span> l<span class="pl-k">=</span>h.<span class="pl-c1">pop</span>(),m<span class="pl-k">=</span>f<span class="pl-k">+</span><span class="pl-c1">ROT</span>.DIRS[<span class="pl-c1">8</span>][l][<span class="pl-c1">0</span>],l<span class="pl-k">=</span>g<span class="pl-k">+</span><span class="pl-c1">ROT</span>.DIRS[<span class="pl-c1">8</span>][l][<span class="pl-c1">1</span>];<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>m<span class="pl-k">||</span>m<span class="pl-k">&gt;=</span>a<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>l<span class="pl-k">||</span>l<span class="pl-k">&gt;=</span>b)){d<span class="pl-k">=</span><span class="pl-v">this</span>.rooms[m][l];e<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">==</span>d.connections.<span class="pl-c1">length</span>)<span class="pl-k">break</span>;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;</span>d.connections.<span class="pl-c1">length</span>;m<span class="pl-k">++</span>)<span class="pl-k">if</span>(d.connections[m][<span class="pl-c1">0</span>]<span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L100" class="blob-num js-line-number" data-line-number="100"></td>
        <td id="LC100" class="blob-code blob-code-inner js-file-line">f<span class="pl-k">&amp;&amp;</span>d.connections[m][<span class="pl-c1">1</span>]<span class="pl-k">==</span>g){e<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>}<span class="pl-k">if</span>(e)<span class="pl-k">break</span>}}<span class="pl-k">while</span>(h.<span class="pl-c1">length</span>);e<span class="pl-k">?</span>c.connections.<span class="pl-c1">push</span>([d.cellx,d.celly])<span class="pl-k">:</span><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>-- Unable to connect room.<span class="pl-pds">&quot;</span></span>)}};<span class="pl-c1">ROT.Map.Rogue</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_createRandomRoomConnections</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){};</td>
      </tr>
      <tr>
        <td id="L101" class="blob-num js-line-number" data-line-number="101"></td>
        <td id="LC101" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Rogue</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_createRooms</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>._width,b<span class="pl-k">=</span><span class="pl-v">this</span>._height,c<span class="pl-k">=</span><span class="pl-v">this</span>._options.cellWidth,d<span class="pl-k">=</span><span class="pl-v">this</span>._options.cellHeight,e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>._width<span class="pl-k">/</span>c),f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>._height<span class="pl-k">/</span>d),g,h,l<span class="pl-k">=</span><span class="pl-v">this</span>._options.roomWidth,m<span class="pl-k">=</span><span class="pl-v">this</span>._options.roomHeight,p,q,n,r<span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">&lt;</span>c;r<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> t<span class="pl-k">=</span><span class="pl-c1">0</span>;t<span class="pl-k">&lt;</span>d;t<span class="pl-k">++</span>){p<span class="pl-k">=</span>e<span class="pl-k">*</span>r;q<span class="pl-k">=</span>f<span class="pl-k">*</span>t;<span class="pl-c1">0</span><span class="pl-k">==</span>p<span class="pl-k">&amp;&amp;</span>(p<span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-c1">0</span><span class="pl-k">==</span>q<span class="pl-k">&amp;&amp;</span>(q<span class="pl-k">=</span><span class="pl-c1">1</span>);g<span class="pl-k">=</span><span class="pl-c1">ROT</span>.RNG.getUniformInt(l[<span class="pl-c1">0</span>],l[<span class="pl-c1">1</span>]);h<span class="pl-k">=</span><span class="pl-c1">ROT</span>.RNG.getUniformInt(m[<span class="pl-c1">0</span>],m[<span class="pl-c1">1</span>]);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>t)<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-v">this</span>.rooms[r][t<span class="pl-k">-</span><span class="pl-c1">1</span>];<span class="pl-c1">3</span><span class="pl-k">&gt;</span>q<span class="pl-k">-</span>(n.<span class="pl-c1">y</span><span class="pl-k">+</span>n.<span class="pl-c1">height</span>);)q<span class="pl-k">++</span>;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>r)<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-v">this</span>.rooms[r<span class="pl-k">-</span><span class="pl-c1">1</span>][t];<span class="pl-c1">3</span><span class="pl-k">&gt;</span>p<span class="pl-k">-</span>(n.<span class="pl-c1">x</span><span class="pl-k">+</span>n.<span class="pl-c1">width</span>);)p<span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L102" class="blob-num js-line-number" data-line-number="102"></td>
        <td id="LC102" class="blob-code blob-code-inner js-file-line">n<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-c1">ROT</span>.RNG.getUniformInt(<span class="pl-c1">0</span>,e<span class="pl-k">-</span>g)<span class="pl-k">/</span><span class="pl-c1">2</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-c1">ROT</span>.RNG.getUniformInt(<span class="pl-c1">0</span>,f<span class="pl-k">-</span>h)<span class="pl-k">/</span><span class="pl-c1">2</span>);p<span class="pl-k">+</span>n<span class="pl-k">+</span>g<span class="pl-k">&gt;=</span>a;)n<span class="pl-k">?</span>n<span class="pl-k">--:</span>g<span class="pl-k">--</span>;<span class="pl-k">for</span>(;q<span class="pl-k">+</span>u<span class="pl-k">+</span>h<span class="pl-k">&gt;=</span>b;)u<span class="pl-k">?</span>u<span class="pl-k">--:</span>h<span class="pl-k">--</span>;p<span class="pl-k">+=</span>n;q<span class="pl-k">+=</span>u;<span class="pl-v">this</span>.rooms[r][t].<span class="pl-c1">x</span><span class="pl-k">=</span>p;<span class="pl-v">this</span>.rooms[r][t].<span class="pl-c1">y</span><span class="pl-k">=</span>q;<span class="pl-v">this</span>.rooms[r][t].<span class="pl-c1">width</span><span class="pl-k">=</span>g;<span class="pl-v">this</span>.rooms[r][t].<span class="pl-c1">height</span><span class="pl-k">=</span>h;<span class="pl-k">for</span>(n<span class="pl-k">=</span>p;n<span class="pl-k">&lt;</span>p<span class="pl-k">+</span>g;n<span class="pl-k">++</span>)<span class="pl-k">for</span>(u<span class="pl-k">=</span>q;u<span class="pl-k">&lt;</span>q<span class="pl-k">+</span>h;u<span class="pl-k">++</span>)<span class="pl-v">this</span>.map[n][u]<span class="pl-k">=</span><span class="pl-c1">0</span>}};</td>
      </tr>
      <tr>
        <td id="L103" class="blob-num js-line-number" data-line-number="103"></td>
        <td id="LC103" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Rogue</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_getWallPosition</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c,d,e;<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">==</span>b<span class="pl-k">||</span><span class="pl-c1">3</span><span class="pl-k">==</span>b)c<span class="pl-k">=</span><span class="pl-c1">ROT</span>.RNG.getUniformInt(a.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">1</span>,a.<span class="pl-c1">x</span><span class="pl-k">+</span>a.<span class="pl-c1">width</span><span class="pl-k">-</span><span class="pl-c1">2</span>),<span class="pl-c1">1</span><span class="pl-k">==</span>b<span class="pl-k">?</span>(d<span class="pl-k">=</span>a.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">2</span>,e<span class="pl-k">=</span>d<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">:</span>(d<span class="pl-k">=</span>a.<span class="pl-c1">y</span><span class="pl-k">+</span>a.<span class="pl-c1">height</span><span class="pl-k">+</span><span class="pl-c1">1</span>,e<span class="pl-k">=</span>d<span class="pl-k">-</span><span class="pl-c1">1</span>),<span class="pl-v">this</span>.map[c][e]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">2</span><span class="pl-k">==</span>b<span class="pl-k">||</span><span class="pl-c1">4</span><span class="pl-k">==</span>b)d<span class="pl-k">=</span><span class="pl-c1">ROT</span>.RNG.getUniformInt(a.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">1</span>,a.<span class="pl-c1">y</span><span class="pl-k">+</span>a.<span class="pl-c1">height</span><span class="pl-k">-</span><span class="pl-c1">2</span>),<span class="pl-c1">2</span><span class="pl-k">==</span>b<span class="pl-k">?</span>(c<span class="pl-k">=</span>a.<span class="pl-c1">x</span><span class="pl-k">+</span>a.<span class="pl-c1">width</span><span class="pl-k">+</span><span class="pl-c1">1</span>,e<span class="pl-k">=</span>c<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">:</span>(c<span class="pl-k">=</span>a.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">2</span>,e<span class="pl-k">=</span>c<span class="pl-k">+</span><span class="pl-c1">1</span>),<span class="pl-v">this</span>.map[e][d]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span>[c,d]};</td>
      </tr>
      <tr>
        <td id="L104" class="blob-num js-line-number" data-line-number="104"></td>
        <td id="LC104" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Rogue</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_drawCorridore</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>b[<span class="pl-c1">0</span>]<span class="pl-k">-</span>a[<span class="pl-c1">0</span>],d<span class="pl-k">=</span>b[<span class="pl-c1">1</span>]<span class="pl-k">-</span>a[<span class="pl-c1">1</span>],e<span class="pl-k">=</span>a[<span class="pl-c1">0</span>],f<span class="pl-k">=</span>a[<span class="pl-c1">1</span>],g,h,l<span class="pl-k">=</span>[];h<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(c);<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(d);g<span class="pl-k">=</span><span class="pl-c1">ROT</span>.RNG.getUniform();<span class="pl-k">var</span> p<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>g,c<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>c<span class="pl-k">?</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">6</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>d<span class="pl-k">?</span><span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span>m<span class="pl-k">?</span>(g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(m<span class="pl-k">*</span>g),l.<span class="pl-c1">push</span>([d,g]),l.<span class="pl-c1">push</span>([c,h]),g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(m<span class="pl-k">*</span>p),l.<span class="pl-c1">push</span>([d,g]))<span class="pl-k">:</span>(g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(h<span class="pl-k">*</span>g),l.<span class="pl-c1">push</span>([c,g]),l.<span class="pl-c1">push</span>([d,m]),g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(h<span class="pl-k">*</span>p),l.<span class="pl-c1">push</span>([c,g]));<span class="pl-k">for</span>(<span class="pl-v">this</span>.map[e][f]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;</span>l.<span class="pl-c1">length</span>;)<span class="pl-k">for</span>(h<span class="pl-k">=</span>l.<span class="pl-c1">pop</span>();<span class="pl-c1">0</span><span class="pl-k">&lt;</span>h[<span class="pl-c1">1</span>];)e<span class="pl-k">+=</span><span class="pl-c1">ROT</span>.DIRS[<span class="pl-c1">8</span>][h[<span class="pl-c1">0</span>]][<span class="pl-c1">0</span>],f<span class="pl-k">+=</span><span class="pl-c1">ROT</span>.DIRS[<span class="pl-c1">8</span>][h[<span class="pl-c1">0</span>]][<span class="pl-c1">1</span>],<span class="pl-v">this</span>.map[e][f]<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-k">--</span>h[<span class="pl-c1">1</span>]};</td>
      </tr>
      <tr>
        <td id="L105" class="blob-num js-line-number" data-line-number="105"></td>
        <td id="LC105" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Rogue</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_createCorridors</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>._options.cellWidth,b<span class="pl-k">=</span><span class="pl-v">this</span>._options.cellHeight,c,d,e,f,g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">&lt;</span>a;g<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span>b;h<span class="pl-k">++</span>){c<span class="pl-k">=</span><span class="pl-v">this</span>.rooms[g][h];<span class="pl-k">for</span>(<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;</span>c.connections.<span class="pl-c1">length</span>;l<span class="pl-k">++</span>)d<span class="pl-k">=</span>c.connections[l],d<span class="pl-k">=</span><span class="pl-v">this</span>.rooms[d[<span class="pl-c1">0</span>]][d[<span class="pl-c1">1</span>]],d.cellx<span class="pl-k">&gt;</span>c.cellx<span class="pl-k">?</span>(e<span class="pl-k">=</span><span class="pl-c1">2</span>,f<span class="pl-k">=</span><span class="pl-c1">4</span>)<span class="pl-k">:</span>d.cellx<span class="pl-k">&lt;</span>c.cellx<span class="pl-k">?</span>(e<span class="pl-k">=</span><span class="pl-c1">4</span>,f<span class="pl-k">=</span><span class="pl-c1">2</span>)<span class="pl-k">:</span>d.celly<span class="pl-k">&gt;</span>c.celly<span class="pl-k">?</span>(e<span class="pl-k">=</span><span class="pl-c1">3</span>,f<span class="pl-k">=</span><span class="pl-c1">1</span>)<span class="pl-k">:</span>d.celly<span class="pl-k">&lt;</span>c.celly<span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=</span><span class="pl-c1">1</span>,f<span class="pl-k">=</span><span class="pl-c1">3</span>),<span class="pl-v">this</span>._drawCorridore(<span class="pl-v">this</span>._getWallPosition(c,e),<span class="pl-v">this</span>._getWallPosition(d,f))}};<span class="pl-c1">ROT.Map</span>.<span class="pl-en">Feature</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};</td>
      </tr>
      <tr>
        <td id="L106" class="blob-num js-line-number" data-line-number="106"></td>
        <td id="LC106" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Feature</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">isValid</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){};<span class="pl-c1">ROT.Map.Feature</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){};<span class="pl-c1">ROT.Map.Feature</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">debug</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">ROT.Map.Feature</span>.<span class="pl-en">createRandomAt</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){};<span class="pl-c1">ROT.Map.Feature</span>.<span class="pl-en">Room</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-v">this</span>._x1<span class="pl-k">=</span>a;<span class="pl-v">this</span>._y1<span class="pl-k">=</span>b;<span class="pl-v">this</span>._x2<span class="pl-k">=</span>c;<span class="pl-v">this</span>._y2<span class="pl-k">=</span>d;<span class="pl-v">this</span>._doors<span class="pl-k">=</span>{};<span class="pl-c1">4</span><span class="pl-k">&lt;</span>arguments.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.addDoor(e,f)};<span class="pl-c1">ROT</span>.Map.Feature.Room.extend(<span class="pl-c1">ROT</span>.Map.Feature);</td>
      </tr>
      <tr>
        <td id="L107" class="blob-num js-line-number" data-line-number="107"></td>
        <td id="LC107" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Feature.Room</span>.<span class="pl-en">createRandomAt</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>e.roomWidth[<span class="pl-c1">0</span>],g<span class="pl-k">=</span>e.roomWidth[<span class="pl-c1">1</span>],h<span class="pl-k">=</span><span class="pl-c1">ROT</span>.RNG.getUniformInt(f,g),f<span class="pl-k">=</span>e.roomHeight[<span class="pl-c1">0</span>],g<span class="pl-k">=</span>e.roomHeight[<span class="pl-c1">1</span>];e<span class="pl-k">=</span><span class="pl-c1">ROT</span>.RNG.getUniformInt(f,g);<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">==</span>c)<span class="pl-k">return</span> c<span class="pl-k">=</span>b<span class="pl-k">-</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">ROT</span>.RNG.getUniform()<span class="pl-k">*</span>e),<span class="pl-k">new</span> <span class="pl-en">this</span>(a<span class="pl-k">+</span><span class="pl-c1">1</span>,c,a<span class="pl-k">+</span>h,c<span class="pl-k">+</span>e<span class="pl-k">-</span><span class="pl-c1">1</span>,a,b);<span class="pl-k">if</span>(<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">==</span>c)<span class="pl-k">return</span> c<span class="pl-k">=</span>b<span class="pl-k">-</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">ROT</span>.RNG.getUniform()<span class="pl-k">*</span>e),<span class="pl-k">new</span> <span class="pl-en">this</span>(a<span class="pl-k">-</span>h,c,a<span class="pl-k">-</span><span class="pl-c1">1</span>,c<span class="pl-k">+</span>e<span class="pl-k">-</span><span class="pl-c1">1</span>,a,b);<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">==</span>d)<span class="pl-k">return</span> c<span class="pl-k">=</span>a<span class="pl-k">-</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">ROT</span>.RNG.getUniform()<span class="pl-k">*</span>h),<span class="pl-k">new</span> <span class="pl-en">this</span>(c,b<span class="pl-k">+</span><span class="pl-c1">1</span>,c<span class="pl-k">+</span>h<span class="pl-k">-</span><span class="pl-c1">1</span>,b<span class="pl-k">+</span>e,a,b);<span class="pl-k">if</span>(<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">==</span>d)<span class="pl-k">return</span> c<span class="pl-k">=</span>a<span class="pl-k">-</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">ROT</span>.RNG.getUniform()<span class="pl-k">*</span>h),<span class="pl-k">new</span> <span class="pl-en">this</span>(c,</td>
      </tr>
      <tr>
        <td id="L108" class="blob-num js-line-number" data-line-number="108"></td>
        <td id="LC108" class="blob-code blob-code-inner js-file-line">b<span class="pl-k">-</span>e,c<span class="pl-k">+</span>h<span class="pl-k">-</span><span class="pl-c1">1</span>,b<span class="pl-k">-</span><span class="pl-c1">1</span>,a,b);<span class="pl-k">throw</span> Error(<span class="pl-s"><span class="pl-pds">&quot;</span>dx or dy must be 1 or -1<span class="pl-pds">&quot;</span></span>);};<span class="pl-c1">ROT.Map.Feature.Room</span>.<span class="pl-en">createRandomCenter</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>c.roomWidth[<span class="pl-c1">0</span>],e<span class="pl-k">=</span>c.roomWidth[<span class="pl-c1">1</span>],f<span class="pl-k">=</span><span class="pl-c1">ROT</span>.RNG.getUniformInt(d,e),d<span class="pl-k">=</span>c.roomHeight[<span class="pl-c1">0</span>],e<span class="pl-k">=</span>c.roomHeight[<span class="pl-c1">1</span>];c<span class="pl-k">=</span><span class="pl-c1">ROT</span>.RNG.getUniformInt(d,e);a<span class="pl-k">-=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">ROT</span>.RNG.getUniform()<span class="pl-k">*</span>f);b<span class="pl-k">-=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">ROT</span>.RNG.getUniform()<span class="pl-k">*</span>c);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">this</span>(a,b,a<span class="pl-k">+</span>f<span class="pl-k">-</span><span class="pl-c1">1</span>,b<span class="pl-k">+</span>c<span class="pl-k">-</span><span class="pl-c1">1</span>)};</td>
      </tr>
      <tr>
        <td id="L109" class="blob-num js-line-number" data-line-number="109"></td>
        <td id="LC109" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Feature.Room</span>.<span class="pl-en">createRandom</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>c.roomWidth[<span class="pl-c1">0</span>],e<span class="pl-k">=</span>c.roomWidth[<span class="pl-c1">1</span>],f<span class="pl-k">=</span><span class="pl-c1">ROT</span>.RNG.getUniformInt(d,e),d<span class="pl-k">=</span>c.roomHeight[<span class="pl-c1">0</span>],e<span class="pl-k">=</span>c.roomHeight[<span class="pl-c1">1</span>];c<span class="pl-k">=</span><span class="pl-c1">ROT</span>.RNG.getUniformInt(d,e);a<span class="pl-k">=</span>a<span class="pl-k">-</span>f<span class="pl-k">-</span><span class="pl-c1">1</span>;b<span class="pl-k">=</span>b<span class="pl-k">-</span>c<span class="pl-k">-</span><span class="pl-c1">1</span>;a<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">ROT</span>.RNG.getUniform()<span class="pl-k">*</span>a);b<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">ROT</span>.RNG.getUniform()<span class="pl-k">*</span>b);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">this</span>(a,b,a<span class="pl-k">+</span>f<span class="pl-k">-</span><span class="pl-c1">1</span>,b<span class="pl-k">+</span>c<span class="pl-k">-</span><span class="pl-c1">1</span>)};<span class="pl-c1">ROT.Map.Feature.Room</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addDoor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>._doors[a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b]<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L110" class="blob-num js-line-number" data-line-number="110"></td>
        <td id="LC110" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Feature.Room</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getDoors</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b <span class="pl-k">in</span> <span class="pl-v">this</span>._doors){<span class="pl-k">var</span> c<span class="pl-k">=</span>b.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span>);a(<span class="pl-c1">parseInt</span>(c[<span class="pl-c1">0</span>]),<span class="pl-c1">parseInt</span>(c[<span class="pl-c1">1</span>]))}<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">ROT.Map.Feature.Room</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clearDoors</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>._doors<span class="pl-k">=</span>{};<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">ROT.Map.Feature.Room</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addDoors</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>._x1<span class="pl-k">-</span><span class="pl-c1">1</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>._x2<span class="pl-k">+</span><span class="pl-c1">1</span>,d<span class="pl-k">=</span><span class="pl-v">this</span>._y1<span class="pl-k">-</span><span class="pl-c1">1</span>,e<span class="pl-k">=</span><span class="pl-v">this</span>._y2<span class="pl-k">+</span><span class="pl-c1">1</span>,f<span class="pl-k">=</span>b;f<span class="pl-k">&lt;=</span>c;f<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span>d;g<span class="pl-k">&lt;=</span>e;g<span class="pl-k">++</span>)<span class="pl-k">if</span>(f<span class="pl-k">==</span>b<span class="pl-k">||</span>f<span class="pl-k">==</span>c<span class="pl-k">||</span>g<span class="pl-k">==</span>d<span class="pl-k">||</span>g<span class="pl-k">==</span>e)a(f,g)<span class="pl-k">||</span><span class="pl-v">this</span>.addDoor(f,g);<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L111" class="blob-num js-line-number" data-line-number="111"></td>
        <td id="LC111" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Feature.Room</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">debug</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>room<span class="pl-pds">&quot;</span></span>,<span class="pl-v">this</span>._x1,<span class="pl-v">this</span>._y1,<span class="pl-v">this</span>._x2,<span class="pl-v">this</span>._y2)};<span class="pl-c1">ROT.Map.Feature.Room</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">isValid</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>._x1<span class="pl-k">-</span><span class="pl-c1">1</span>,d<span class="pl-k">=</span><span class="pl-v">this</span>._x2<span class="pl-k">+</span><span class="pl-c1">1</span>,e<span class="pl-k">=</span><span class="pl-v">this</span>._y1<span class="pl-k">-</span><span class="pl-c1">1</span>,f<span class="pl-k">=</span><span class="pl-v">this</span>._y2<span class="pl-k">+</span><span class="pl-c1">1</span>,g<span class="pl-k">=</span>c;g<span class="pl-k">&lt;=</span>d;g<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span>e;h<span class="pl-k">&lt;=</span>f;h<span class="pl-k">++</span>)<span class="pl-k">if</span>(g<span class="pl-k">==</span>c<span class="pl-k">||</span>g<span class="pl-k">==</span>d<span class="pl-k">||</span>h<span class="pl-k">==</span>e<span class="pl-k">||</span>h<span class="pl-k">==</span>f){<span class="pl-k">if</span>(<span class="pl-k">!</span>a(g,h))<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-k">!</span>b(g,h))<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L112" class="blob-num js-line-number" data-line-number="112"></td>
        <td id="LC112" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Feature.Room</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>._x1<span class="pl-k">-</span><span class="pl-c1">1</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>._x2<span class="pl-k">+</span><span class="pl-c1">1</span>,d<span class="pl-k">=</span><span class="pl-v">this</span>._y1<span class="pl-k">-</span><span class="pl-c1">1</span>,e<span class="pl-k">=</span><span class="pl-v">this</span>._y2<span class="pl-k">+</span><span class="pl-c1">1</span>,f<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>b;g<span class="pl-k">&lt;=</span>c;g<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span>d;h<span class="pl-k">&lt;=</span>e;h<span class="pl-k">++</span>)f<span class="pl-k">=</span>g<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>h <span class="pl-k">in</span> <span class="pl-v">this</span>._doors<span class="pl-k">?</span><span class="pl-c1">2</span><span class="pl-k">:</span>g<span class="pl-k">==</span>b<span class="pl-k">||</span>g<span class="pl-k">==</span>c<span class="pl-k">||</span>h<span class="pl-k">==</span>d<span class="pl-k">||</span>h<span class="pl-k">==</span>e<span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>,a(g,h,f)};<span class="pl-c1">ROT.Map.Feature.Room</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getCenter</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>[<span class="pl-c1">Math</span>.<span class="pl-c1">round</span>((<span class="pl-v">this</span>._x1<span class="pl-k">+</span><span class="pl-v">this</span>._x2)<span class="pl-k">/</span><span class="pl-c1">2</span>),<span class="pl-c1">Math</span>.<span class="pl-c1">round</span>((<span class="pl-v">this</span>._y1<span class="pl-k">+</span><span class="pl-v">this</span>._y2)<span class="pl-k">/</span><span class="pl-c1">2</span>)]};<span class="pl-c1">ROT.Map.Feature.Room</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getLeft</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._x1};<span class="pl-c1">ROT.Map.Feature.Room</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getRight</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._x2};</td>
      </tr>
      <tr>
        <td id="L113" class="blob-num js-line-number" data-line-number="113"></td>
        <td id="LC113" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Feature.Room</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getTop</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._y1};<span class="pl-c1">ROT.Map.Feature.Room</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getBottom</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._y2};<span class="pl-c1">ROT.Map.Feature</span>.<span class="pl-en">Corridor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-v">this</span>._startX<span class="pl-k">=</span>a;<span class="pl-v">this</span>._startY<span class="pl-k">=</span>b;<span class="pl-v">this</span>._endX<span class="pl-k">=</span>c;<span class="pl-v">this</span>._endY<span class="pl-k">=</span>d;<span class="pl-v">this</span>._endsWithAWall<span class="pl-k">=!</span><span class="pl-c1">0</span>};<span class="pl-c1">ROT</span>.Map.Feature.Corridor.extend(<span class="pl-c1">ROT</span>.Map.Feature);<span class="pl-c1">ROT.Map.Feature.Corridor</span>.<span class="pl-en">createRandomAt</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){e<span class="pl-k">=</span><span class="pl-c1">ROT</span>.RNG.getUniformInt(e.corridorLength[<span class="pl-c1">0</span>],e.corridorLength[<span class="pl-c1">1</span>]);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">this</span>(a,b,a<span class="pl-k">+</span>c<span class="pl-k">*</span>e,b<span class="pl-k">+</span>d<span class="pl-k">*</span>e)};</td>
      </tr>
      <tr>
        <td id="L114" class="blob-num js-line-number" data-line-number="114"></td>
        <td id="LC114" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Feature.Corridor</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">debug</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>corridor<span class="pl-pds">&quot;</span></span>,<span class="pl-v">this</span>._startX,<span class="pl-v">this</span>._startY,<span class="pl-v">this</span>._endX,<span class="pl-v">this</span>._endY)};</td>
      </tr>
      <tr>
        <td id="L115" class="blob-num js-line-number" data-line-number="115"></td>
        <td id="LC115" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Feature.Corridor</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">isValid</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>._startX,d<span class="pl-k">=</span><span class="pl-v">this</span>._startY,e<span class="pl-k">=</span><span class="pl-v">this</span>._endX<span class="pl-k">-</span>c,f<span class="pl-k">=</span><span class="pl-v">this</span>._endY<span class="pl-k">-</span>d,g<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(e),<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(f));e<span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">/=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(e));f<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">/=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(f));<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span>f,l<span class="pl-k">=-</span>e,m<span class="pl-k">=!</span><span class="pl-c1">0</span>,p<span class="pl-k">=</span><span class="pl-c1">0</span>;p<span class="pl-k">&lt;</span>g;p<span class="pl-k">++</span>){<span class="pl-k">var</span> q<span class="pl-k">=</span>c<span class="pl-k">+</span>p<span class="pl-k">*</span>e,n<span class="pl-k">=</span>d<span class="pl-k">+</span>p<span class="pl-k">*</span>f;b(q,n)<span class="pl-k">||</span>(m<span class="pl-k">=!</span><span class="pl-c1">1</span>);a(q<span class="pl-k">+</span>h,n<span class="pl-k">+</span>l)<span class="pl-k">||</span>(m<span class="pl-k">=!</span><span class="pl-c1">1</span>);a(q<span class="pl-k">-</span>h,n<span class="pl-k">-</span>l)<span class="pl-k">||</span>(m<span class="pl-k">=!</span><span class="pl-c1">1</span>);<span class="pl-k">if</span>(<span class="pl-k">!</span>m){g<span class="pl-k">=</span>p;<span class="pl-v">this</span>._endX<span class="pl-k">=</span>q<span class="pl-k">-</span>e;<span class="pl-v">this</span>._endY<span class="pl-k">=</span>n<span class="pl-k">-</span>f;<span class="pl-k">break</span>}}<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">==</span>g<span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">==</span>g<span class="pl-k">&amp;&amp;</span>a(<span class="pl-v">this</span>._endX<span class="pl-k">+</span>e,<span class="pl-v">this</span>._endY<span class="pl-k">+</span>f))<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;c<span class="pl-k">=!</span>a(<span class="pl-v">this</span>._endX<span class="pl-k">+</span>e<span class="pl-k">+</span>h,<span class="pl-v">this</span>._endY<span class="pl-k">+</span>f<span class="pl-k">+</span>l);h<span class="pl-k">=!</span>a(<span class="pl-v">this</span>._endX<span class="pl-k">+</span>e<span class="pl-k">-</span>h,<span class="pl-v">this</span>._endY<span class="pl-k">+</span>f<span class="pl-k">-</span>l);<span class="pl-v">this</span>._endsWithAWall<span class="pl-k">=</span>a(<span class="pl-v">this</span>._endX<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L116" class="blob-num js-line-number" data-line-number="116"></td>
        <td id="LC116" class="blob-code blob-code-inner js-file-line">e,<span class="pl-v">this</span>._endY<span class="pl-k">+</span>f);<span class="pl-k">return</span>(c<span class="pl-k">||</span>h)<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>._endsWithAWall<span class="pl-k">?!</span><span class="pl-c1">1</span><span class="pl-k">:!</span><span class="pl-c1">0</span>};<span class="pl-c1">ROT.Map.Feature.Corridor</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>._startX,c<span class="pl-k">=</span><span class="pl-v">this</span>._startY,d<span class="pl-k">=</span><span class="pl-v">this</span>._endX<span class="pl-k">-</span>b,e<span class="pl-k">=</span><span class="pl-v">this</span>._endY<span class="pl-k">-</span>c,f<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(d),<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(e));d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">/=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(d));e<span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">/=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(e));<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">++</span>)a(b<span class="pl-k">+</span>g<span class="pl-k">*</span>d,c<span class="pl-k">+</span>g<span class="pl-k">*</span>e,<span class="pl-c1">0</span>);<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L117" class="blob-num js-line-number" data-line-number="117"></td>
        <td id="LC117" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Map.Feature.Corridor</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">createPriorityWalls</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-v">this</span>._endsWithAWall){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>._endX<span class="pl-k">-</span><span class="pl-v">this</span>._startX,c<span class="pl-k">=</span><span class="pl-v">this</span>._endY<span class="pl-k">-</span><span class="pl-v">this</span>._startY;b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">/=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(b));c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">/=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(c));<span class="pl-k">var</span> d<span class="pl-k">=</span>c,e<span class="pl-k">=-</span>b;a(<span class="pl-v">this</span>._endX<span class="pl-k">+</span>b,<span class="pl-v">this</span>._endY<span class="pl-k">+</span>c);a(<span class="pl-v">this</span>._endX<span class="pl-k">+</span>d,<span class="pl-v">this</span>._endY<span class="pl-k">+</span>e);a(<span class="pl-v">this</span>._endX<span class="pl-k">-</span>d,<span class="pl-v">this</span>._endY<span class="pl-k">-</span>e)}};<span class="pl-c1">ROT</span>.<span class="pl-en">Noise</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">ROT.Noise</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">get</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){};</td>
      </tr>
      <tr>
        <td id="L118" class="blob-num js-line-number" data-line-number="118"></td>
        <td id="LC118" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Noise</span>.<span class="pl-en">Simplex</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">ROT</span>.Noise.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>._F2<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">*</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">3</span>)<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-v">this</span>._G2<span class="pl-k">=</span>(<span class="pl-c1">3</span><span class="pl-k">-</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">3</span>))<span class="pl-k">/</span><span class="pl-c1">6</span>;<span class="pl-v">this</span>._gradients<span class="pl-k">=</span>[[<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>],[<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>],[<span class="pl-c1">1</span>,<span class="pl-c1">0</span>],[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>],[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>],[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>],[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>]];<span class="pl-k">var</span> b<span class="pl-k">=</span>[];a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">256</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>a;c<span class="pl-k">++</span>)b.<span class="pl-c1">push</span>(c);b<span class="pl-k">=</span>b.randomize();<span class="pl-v">this</span>._perms<span class="pl-k">=</span>[];<span class="pl-v">this</span>._indexes<span class="pl-k">=</span>[];<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-c1">2</span><span class="pl-k">*</span>a;c<span class="pl-k">++</span>)<span class="pl-v">this</span>._perms.<span class="pl-c1">push</span>(b[c<span class="pl-k">%</span>a]),<span class="pl-v">this</span>._indexes.<span class="pl-c1">push</span>(<span class="pl-v">this</span>._perms[c]<span class="pl-k">%</span><span class="pl-v">this</span>._gradients.<span class="pl-c1">length</span>)};<span class="pl-c1">ROT</span>.Noise.Simplex.extend(<span class="pl-c1">ROT</span>.Noise);</td>
      </tr>
      <tr>
        <td id="L119" class="blob-num js-line-number" data-line-number="119"></td>
        <td id="LC119" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Noise.Simplex</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">get</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>._perms,d<span class="pl-k">=</span><span class="pl-v">this</span>._indexes,e<span class="pl-k">=</span>c.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-c1">2</span>,f<span class="pl-k">=</span><span class="pl-v">this</span>._G2,g<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span><span class="pl-c1">0</span>,l<span class="pl-k">=</span><span class="pl-c1">0</span>,m,p<span class="pl-k">=</span>(a<span class="pl-k">+</span>b)<span class="pl-k">*</span><span class="pl-v">this</span>._F2,q<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a<span class="pl-k">+</span>p);m<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(b<span class="pl-k">+</span>p);<span class="pl-k">var</span> p<span class="pl-k">=</span>(q<span class="pl-k">+</span>m)<span class="pl-k">*</span>f,n<span class="pl-k">=</span>a<span class="pl-k">-</span>(q<span class="pl-k">-</span>p),r<span class="pl-k">=</span>b<span class="pl-k">-</span>(m<span class="pl-k">-</span>p),t,u;n<span class="pl-k">&gt;</span>r<span class="pl-k">?</span>(t<span class="pl-k">=</span><span class="pl-c1">1</span>,u<span class="pl-k">=</span><span class="pl-c1">0</span>)<span class="pl-k">:</span>(t<span class="pl-k">=</span><span class="pl-c1">0</span>,u<span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-k">var</span> w<span class="pl-k">=</span>n<span class="pl-k">-</span>t<span class="pl-k">+</span>f,x<span class="pl-k">=</span>r<span class="pl-k">-</span>u<span class="pl-k">+</span>f,p<span class="pl-k">=</span>n<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>f,f<span class="pl-k">=</span>r<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>f,q<span class="pl-k">=</span>q.mod(e),e<span class="pl-k">=</span>m.mod(e),v<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">-</span>n<span class="pl-k">*</span>n<span class="pl-k">-</span>r<span class="pl-k">*</span>r;<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>v<span class="pl-k">&amp;&amp;</span>(v<span class="pl-k">*=</span>v,m<span class="pl-k">=</span>d[q<span class="pl-k">+</span>c[e]],m<span class="pl-k">=</span><span class="pl-v">this</span>._gradients[m],g<span class="pl-k">=</span>v<span class="pl-k">*</span>v<span class="pl-k">*</span>(m[<span class="pl-c1">0</span>]<span class="pl-k">*</span>n<span class="pl-k">+</span>m[<span class="pl-c1">1</span>]<span class="pl-k">*</span>r));n<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">-</span>w<span class="pl-k">*</span>w<span class="pl-k">-</span>x<span class="pl-k">*</span>x;<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>n<span class="pl-k">&amp;&amp;</span>(n<span class="pl-k">*=</span>n,m<span class="pl-k">=</span>d[q<span class="pl-k">+</span>t<span class="pl-k">+</span>c[e<span class="pl-k">+</span>u]],m<span class="pl-k">=</span><span class="pl-v">this</span>._gradients[m],h<span class="pl-k">=</span>n<span class="pl-k">*</span>n<span class="pl-k">*</span>(m[<span class="pl-c1">0</span>]<span class="pl-k">*</span>w<span class="pl-k">+</span>m[<span class="pl-c1">1</span>]<span class="pl-k">*</span>x));n<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">-</span>p<span class="pl-k">*</span>p<span class="pl-k">-</span>f<span class="pl-k">*</span>f;<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>n<span class="pl-k">&amp;&amp;</span>(n<span class="pl-k">*=</span>n,m<span class="pl-k">=</span>d[q<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">+</span>c[e<span class="pl-k">+</span><span class="pl-c1">1</span>]],</td>
      </tr>
      <tr>
        <td id="L120" class="blob-num js-line-number" data-line-number="120"></td>
        <td id="LC120" class="blob-code blob-code-inner js-file-line">m<span class="pl-k">=</span><span class="pl-v">this</span>._gradients[m],l<span class="pl-k">=</span>n<span class="pl-k">*</span>n<span class="pl-k">*</span>(m[<span class="pl-c1">0</span>]<span class="pl-k">*</span>p<span class="pl-k">+</span>m[<span class="pl-c1">1</span>]<span class="pl-k">*</span>f));<span class="pl-k">return</span> <span class="pl-c1">70</span><span class="pl-k">*</span>(g<span class="pl-k">+</span>h<span class="pl-k">+</span>l)};<span class="pl-c1">ROT</span>.<span class="pl-en">FOV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>._lightPasses<span class="pl-k">=</span>a;<span class="pl-v">this</span>._options<span class="pl-k">=</span>{topology<span class="pl-k">:</span><span class="pl-c1">8</span>};<span class="pl-k">for</span>(<span class="pl-k">var</span> c <span class="pl-k">in</span> b)<span class="pl-v">this</span>._options[c]<span class="pl-k">=</span>b[c]};<span class="pl-c1">ROT.FOV</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">compute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){};</td>
      </tr>
      <tr>
        <td id="L121" class="blob-num js-line-number" data-line-number="121"></td>
        <td id="LC121" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.FOV</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_getCircle</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>[],e,f,g;<span class="pl-k">switch</span>(<span class="pl-v">this</span>._options.topology){<span class="pl-k">case</span> <span class="pl-c1">4</span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-c1">1</span>;g<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>];e<span class="pl-k">=</span>[<span class="pl-c1">ROT</span>.DIRS[<span class="pl-c1">8</span>][<span class="pl-c1">7</span>],<span class="pl-c1">ROT</span>.DIRS[<span class="pl-c1">8</span>][<span class="pl-c1">1</span>],<span class="pl-c1">ROT</span>.DIRS[<span class="pl-c1">8</span>][<span class="pl-c1">3</span>],<span class="pl-c1">ROT</span>.DIRS[<span class="pl-c1">8</span>][<span class="pl-c1">5</span>]];<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">6</span><span class="pl-k">:</span>e<span class="pl-k">=</span><span class="pl-c1">ROT</span>.DIRS[<span class="pl-c1">6</span>];f<span class="pl-k">=</span><span class="pl-c1">1</span>;g<span class="pl-k">=</span>[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>];<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">8</span><span class="pl-k">:</span>e<span class="pl-k">=</span><span class="pl-c1">ROT</span>.DIRS[<span class="pl-c1">4</span>],f<span class="pl-k">=</span><span class="pl-c1">2</span>,g<span class="pl-k">=</span>[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>]}a<span class="pl-k">+=</span>g[<span class="pl-c1">0</span>]<span class="pl-k">*</span>c;b<span class="pl-k">+=</span>g[<span class="pl-c1">1</span>]<span class="pl-k">*</span>c;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">&lt;</span>e.<span class="pl-c1">length</span>;g<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span>c<span class="pl-k">*</span>f;h<span class="pl-k">++</span>)d.<span class="pl-c1">push</span>([a,b]),a<span class="pl-k">+=</span>e[g][<span class="pl-c1">0</span>],b<span class="pl-k">+=</span>e[g][<span class="pl-c1">1</span>];<span class="pl-k">return</span> d};<span class="pl-c1">ROT.FOV</span>.<span class="pl-en">DiscreteShadowcasting</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">ROT</span>.FOV.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b)};<span class="pl-c1">ROT</span>.FOV.DiscreteShadowcasting.extend(<span class="pl-c1">ROT</span>.FOV);</td>
      </tr>
      <tr>
        <td id="L122" class="blob-num js-line-number" data-line-number="122"></td>
        <td id="LC122" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.FOV.DiscreteShadowcasting</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">compute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){d(a,b,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">if</span>(<span class="pl-v">this</span>._lightPasses(a,b))<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span>[],f,g,h,l,m,p<span class="pl-k">=</span><span class="pl-c1">1</span>;p<span class="pl-k">&lt;=</span>c;p<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-v">this</span>._getCircle(a,b,p),n<span class="pl-k">=</span><span class="pl-c1">360</span><span class="pl-k">/</span>q.<span class="pl-c1">length</span>,r<span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">&lt;</span>q.<span class="pl-c1">length</span>;r<span class="pl-k">++</span>)<span class="pl-k">if</span>(h<span class="pl-k">=</span>q[r][<span class="pl-c1">0</span>],l<span class="pl-k">=</span>q[r][<span class="pl-c1">1</span>],f<span class="pl-k">=</span>n<span class="pl-k">*</span>(r<span class="pl-k">-</span>.<span class="pl-c1">5</span>),g<span class="pl-k">=</span>f<span class="pl-k">+</span>n,m<span class="pl-k">=!</span><span class="pl-v">this</span>._lightPasses(h,l),<span class="pl-v">this</span>._visibleCoords(<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(f),<span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(g),m,e)<span class="pl-k">&amp;&amp;</span>d(h,l,p,<span class="pl-c1">1</span>),<span class="pl-c1">2</span><span class="pl-k">==</span>e.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">==</span>e[<span class="pl-c1">0</span>]<span class="pl-k">&amp;&amp;</span><span class="pl-c1">360</span><span class="pl-k">==</span>e[<span class="pl-c1">1</span>])<span class="pl-k">return</span>};</td>
      </tr>
      <tr>
        <td id="L123" class="blob-num js-line-number" data-line-number="123"></td>
        <td id="LC123" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.FOV.DiscreteShadowcasting</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_visibleCoords</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>a){<span class="pl-k">var</span> e<span class="pl-k">=</span>arguments.<span class="pl-c1">callee</span>(<span class="pl-c1">0</span>,b,c,d),f<span class="pl-k">=</span>arguments.<span class="pl-c1">callee</span>(<span class="pl-c1">360</span><span class="pl-k">+</span>a,<span class="pl-c1">360</span>,c,d);<span class="pl-k">return</span> e<span class="pl-k">||</span>f}<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>d.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>d[e]<span class="pl-k">&lt;</span>a;)e<span class="pl-k">++</span>;<span class="pl-k">if</span>(e<span class="pl-k">==</span>d.<span class="pl-c1">length</span>)<span class="pl-k">return</span> c<span class="pl-k">&amp;&amp;</span>d.<span class="pl-c1">push</span>(a,b),<span class="pl-k">!</span><span class="pl-c1">0</span>;f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(e<span class="pl-k">%</span><span class="pl-c1">2</span>){<span class="pl-k">for</span>(;e<span class="pl-k">&lt;</span>d.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>d[e]<span class="pl-k">&lt;</span>b;)e<span class="pl-k">++</span>,f<span class="pl-k">++</span>;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">==</span>f)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;c<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">%</span><span class="pl-c1">2</span><span class="pl-k">?</span>d.<span class="pl-c1">splice</span>(e<span class="pl-k">-</span>f,f,b)<span class="pl-k">:</span>d.<span class="pl-c1">splice</span>(e<span class="pl-k">-</span>f,f))}<span class="pl-k">else</span>{<span class="pl-k">for</span>(;e<span class="pl-k">&lt;</span>d.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>d[e]<span class="pl-k">&lt;</span>b;)e<span class="pl-k">++</span>,f<span class="pl-k">++</span>;<span class="pl-k">if</span>(a<span class="pl-k">==</span>d[e<span class="pl-k">-</span>f]<span class="pl-k">&amp;&amp;</span><span class="pl-c1">1</span><span class="pl-k">==</span>f)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;c<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">%</span><span class="pl-c1">2</span><span class="pl-k">?</span>d.<span class="pl-c1">splice</span>(e<span class="pl-k">-</span>f,f,a)<span class="pl-k">:</span>d.<span class="pl-c1">splice</span>(e<span class="pl-k">-</span>f,f,a,b))}<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L124" class="blob-num js-line-number" data-line-number="124"></td>
        <td id="LC124" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.FOV</span>.<span class="pl-en">PreciseShadowcasting</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">ROT</span>.FOV.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b)};<span class="pl-c1">ROT</span>.FOV.PreciseShadowcasting.extend(<span class="pl-c1">ROT</span>.FOV);<span class="pl-c1">ROT.FOV.PreciseShadowcasting</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">compute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){d(a,b,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">if</span>(<span class="pl-v">this</span>._lightPasses(a,b))<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span>[],f,g,h,l,m,p<span class="pl-k">=</span><span class="pl-c1">1</span>;p<span class="pl-k">&lt;=</span>c;p<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-v">this</span>._getCircle(a,b,p),n<span class="pl-k">=</span>q.<span class="pl-c1">length</span>,r<span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">&lt;</span>n;r<span class="pl-k">++</span>)<span class="pl-k">if</span>(f<span class="pl-k">=</span>q[r][<span class="pl-c1">0</span>],g<span class="pl-k">=</span>q[r][<span class="pl-c1">1</span>],l<span class="pl-k">=</span>[r<span class="pl-k">?</span><span class="pl-c1">2</span><span class="pl-k">*</span>r<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">*</span>n<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">2</span><span class="pl-k">*</span>n],m<span class="pl-k">=</span>[<span class="pl-c1">2</span><span class="pl-k">*</span>r<span class="pl-k">+</span><span class="pl-c1">1</span>,<span class="pl-c1">2</span><span class="pl-k">*</span>n],h<span class="pl-k">=!</span><span class="pl-v">this</span>._lightPasses(f,g),(h<span class="pl-k">=</span><span class="pl-v">this</span>._checkVisibility(l,m,h,e))<span class="pl-k">&amp;&amp;</span>d(f,g,p,h),<span class="pl-c1">2</span><span class="pl-k">==</span>e.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">==</span>e[<span class="pl-c1">0</span>][<span class="pl-c1">0</span>]<span class="pl-k">&amp;&amp;</span>e[<span class="pl-c1">1</span>][<span class="pl-c1">0</span>]<span class="pl-k">==</span>e[<span class="pl-c1">1</span>][<span class="pl-c1">1</span>])<span class="pl-k">return</span>};</td>
      </tr>
      <tr>
        <td id="L125" class="blob-num js-line-number" data-line-number="125"></td>
        <td id="LC125" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.FOV.PreciseShadowcasting</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_checkVisibility</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">if</span>(a[<span class="pl-c1">0</span>]<span class="pl-k">&gt;</span>b[<span class="pl-c1">0</span>])<span class="pl-k">return</span> a<span class="pl-k">=</span><span class="pl-v">this</span>._checkVisibility(a,[a[<span class="pl-c1">1</span>],a[<span class="pl-c1">1</span>]],c,d),b<span class="pl-k">=</span><span class="pl-v">this</span>._checkVisibility([<span class="pl-c1">0</span>,<span class="pl-c1">1</span>],b,c,d),(a<span class="pl-k">+</span>b)<span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=!</span><span class="pl-c1">1</span>;e<span class="pl-k">&lt;</span>d.<span class="pl-c1">length</span>;){<span class="pl-k">var</span> g<span class="pl-k">=</span>d[e],g<span class="pl-k">=</span>g[<span class="pl-c1">0</span>]<span class="pl-k">*</span>a[<span class="pl-c1">1</span>]<span class="pl-k">-</span>a[<span class="pl-c1">0</span>]<span class="pl-k">*</span>g[<span class="pl-c1">1</span>];<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>g){<span class="pl-c1">0</span><span class="pl-k">!=</span>g<span class="pl-k">||</span>e<span class="pl-k">%</span><span class="pl-c1">2</span><span class="pl-k">||</span>(f<span class="pl-k">=!</span><span class="pl-c1">0</span>);<span class="pl-k">break</span>}e<span class="pl-k">++</span>}<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span>d.<span class="pl-c1">length</span>,l<span class="pl-k">=!</span><span class="pl-c1">1</span>;h<span class="pl-k">--</span>;)<span class="pl-k">if</span>(g<span class="pl-k">=</span>d[h],g<span class="pl-k">=</span>b[<span class="pl-c1">0</span>]<span class="pl-k">*</span>g[<span class="pl-c1">1</span>]<span class="pl-k">-</span>g[<span class="pl-c1">0</span>]<span class="pl-k">*</span>b[<span class="pl-c1">1</span>],<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>g){<span class="pl-c1">0</span><span class="pl-k">==</span>g<span class="pl-k">&amp;&amp;</span>h<span class="pl-k">%</span><span class="pl-c1">2</span><span class="pl-k">&amp;&amp;</span>(l<span class="pl-k">=!</span><span class="pl-c1">0</span>);<span class="pl-k">break</span>}g<span class="pl-k">=!</span><span class="pl-c1">0</span>;e<span class="pl-k">==</span>h<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">||</span>l)<span class="pl-k">?</span>g<span class="pl-k">=!</span><span class="pl-c1">1</span><span class="pl-k">:</span>f<span class="pl-k">&amp;&amp;</span>l<span class="pl-k">&amp;&amp;</span>e<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">==</span>h<span class="pl-k">&amp;&amp;</span>h<span class="pl-k">%</span><span class="pl-c1">2</span><span class="pl-k">?</span>g<span class="pl-k">=!</span><span class="pl-c1">1</span><span class="pl-k">:</span>e<span class="pl-k">&gt;</span>h<span class="pl-k">&amp;&amp;</span>e<span class="pl-k">%</span><span class="pl-c1">2</span><span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">=!</span><span class="pl-c1">1</span>);<span class="pl-k">if</span>(<span class="pl-k">!</span>g)<span class="pl-k">return</span> <span class="pl-c1">0</span>;f<span class="pl-k">=</span>h<span class="pl-k">-</span>e<span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(f<span class="pl-k">%</span><span class="pl-c1">2</span>)e<span class="pl-k">%</span><span class="pl-c1">2</span><span class="pl-k">?</span>(h<span class="pl-k">=</span>d[e],h<span class="pl-k">=</span>(b[<span class="pl-c1">0</span>]<span class="pl-k">*</span>h[<span class="pl-c1">1</span>]<span class="pl-k">-</span>h[<span class="pl-c1">0</span>]<span class="pl-k">*</span>b[<span class="pl-c1">1</span>])<span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L126" class="blob-num js-line-number" data-line-number="126"></td>
        <td id="LC126" class="blob-code blob-code-inner js-file-line">(h[<span class="pl-c1">1</span>]<span class="pl-k">*</span>b[<span class="pl-c1">1</span>]),c<span class="pl-k">&amp;&amp;</span>d.<span class="pl-c1">splice</span>(e,f,b))<span class="pl-k">:</span>(h<span class="pl-k">=</span>d[h],h<span class="pl-k">=</span>(h[<span class="pl-c1">0</span>]<span class="pl-k">*</span>a[<span class="pl-c1">1</span>]<span class="pl-k">-</span>a[<span class="pl-c1">0</span>]<span class="pl-k">*</span>h[<span class="pl-c1">1</span>])<span class="pl-k">/</span>(a[<span class="pl-c1">1</span>]<span class="pl-k">*</span>h[<span class="pl-c1">1</span>]),c<span class="pl-k">&amp;&amp;</span>d.<span class="pl-c1">splice</span>(e,f,a));<span class="pl-k">else</span> <span class="pl-k">if</span>(e<span class="pl-k">%</span><span class="pl-c1">2</span>)l<span class="pl-k">=</span>d[e],h<span class="pl-k">=</span>d[h],h<span class="pl-k">=</span>(h[<span class="pl-c1">0</span>]<span class="pl-k">*</span>l[<span class="pl-c1">1</span>]<span class="pl-k">-</span>l[<span class="pl-c1">0</span>]<span class="pl-k">*</span>h[<span class="pl-c1">1</span>])<span class="pl-k">/</span>(l[<span class="pl-c1">1</span>]<span class="pl-k">*</span>h[<span class="pl-c1">1</span>]),c<span class="pl-k">&amp;&amp;</span>d.<span class="pl-c1">splice</span>(e,f);<span class="pl-k">else</span> <span class="pl-k">return</span> c<span class="pl-k">&amp;&amp;</span>d.<span class="pl-c1">splice</span>(e,f,a,b),<span class="pl-c1">1</span>;<span class="pl-k">return</span> h<span class="pl-k">/</span>((b[<span class="pl-c1">0</span>]<span class="pl-k">*</span>a[<span class="pl-c1">1</span>]<span class="pl-k">-</span>a[<span class="pl-c1">0</span>]<span class="pl-k">*</span>b[<span class="pl-c1">1</span>])<span class="pl-k">/</span>(a[<span class="pl-c1">1</span>]<span class="pl-k">*</span>b[<span class="pl-c1">1</span>]))};<span class="pl-c1">ROT.FOV</span>.<span class="pl-en">RecursiveShadowcasting</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">ROT</span>.FOV.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b)};<span class="pl-c1">ROT</span>.FOV.RecursiveShadowcasting.extend(<span class="pl-c1">ROT</span>.FOV);<span class="pl-c1">ROT</span>.FOV.RecursiveShadowcasting.OCTANTS<span class="pl-k">=</span>[[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>],[<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>],[<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>],[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>],[<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>],[<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>]];</td>
      </tr>
      <tr>
        <td id="L127" class="blob-num js-line-number" data-line-number="127"></td>
        <td id="LC127" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.FOV.RecursiveShadowcasting</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">compute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){d(a,b,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-c1">ROT</span>.FOV.RecursiveShadowcasting.OCTANTS.<span class="pl-c1">length</span>;e<span class="pl-k">++</span>)<span class="pl-v">this</span>._renderOctant(a,b,<span class="pl-c1">ROT</span>.FOV.RecursiveShadowcasting.OCTANTS[e],c,d)};</td>
      </tr>
      <tr>
        <td id="L128" class="blob-num js-line-number" data-line-number="128"></td>
        <td id="LC128" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.FOV.RecursiveShadowcasting</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">compute180</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){e(a,b,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">var</span> f<span class="pl-k">=</span>(d<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">8</span>)<span class="pl-k">%</span><span class="pl-c1">8</span>,g<span class="pl-k">=</span>(d<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">8</span>)<span class="pl-k">%</span><span class="pl-c1">8</span>;<span class="pl-v">this</span>._renderOctant(a,b,<span class="pl-c1">ROT</span>.FOV.RecursiveShadowcasting.OCTANTS[(d<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">8</span>)<span class="pl-k">%</span><span class="pl-c1">8</span>],c,e);<span class="pl-v">this</span>._renderOctant(a,b,<span class="pl-c1">ROT</span>.FOV.RecursiveShadowcasting.OCTANTS[f],c,e);<span class="pl-v">this</span>._renderOctant(a,b,<span class="pl-c1">ROT</span>.FOV.RecursiveShadowcasting.OCTANTS[d],c,e);<span class="pl-v">this</span>._renderOctant(a,b,<span class="pl-c1">ROT</span>.FOV.RecursiveShadowcasting.OCTANTS[g],c,e)};</td>
      </tr>
      <tr>
        <td id="L129" class="blob-num js-line-number" data-line-number="129"></td>
        <td id="LC129" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.FOV.RecursiveShadowcasting</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">compute90</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){e(a,b,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">var</span> f<span class="pl-k">=</span>(d<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">8</span>)<span class="pl-k">%</span><span class="pl-c1">8</span>;<span class="pl-v">this</span>._renderOctant(a,b,<span class="pl-c1">ROT</span>.FOV.RecursiveShadowcasting.OCTANTS[d],c,e);<span class="pl-v">this</span>._renderOctant(a,b,<span class="pl-c1">ROT</span>.FOV.RecursiveShadowcasting.OCTANTS[f],c,e)};<span class="pl-c1">ROT.FOV.RecursiveShadowcasting</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_renderOctant</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-v">this</span>._castVisibility(a,b,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,d<span class="pl-k">+</span><span class="pl-c1">1</span>,c[<span class="pl-c1">0</span>],c[<span class="pl-c1">1</span>],c[<span class="pl-c1">2</span>],c[<span class="pl-c1">3</span>],e)};</td>
      </tr>
      <tr>
        <td id="L130" class="blob-num js-line-number" data-line-number="130"></td>
        <td id="LC130" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.FOV.RecursiveShadowcasting</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_castVisibility</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>,<span class="pl-smi">m</span>,<span class="pl-smi">p</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span>(d<span class="pl-k">&lt;</span>e))<span class="pl-k">for</span>(;c<span class="pl-k">&lt;=</span>f;c<span class="pl-k">++</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> q<span class="pl-k">=-</span>c<span class="pl-k">-</span><span class="pl-c1">1</span>,n<span class="pl-k">=-</span>c,r<span class="pl-k">=!</span><span class="pl-c1">1</span>,t<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">0</span><span class="pl-k">&gt;=</span>q;){<span class="pl-k">var</span> q<span class="pl-k">=</span>q<span class="pl-k">+</span><span class="pl-c1">1</span>,u<span class="pl-k">=</span>a<span class="pl-k">+</span>q<span class="pl-k">*</span>g<span class="pl-k">+</span>n<span class="pl-k">*</span>h,w<span class="pl-k">=</span>b<span class="pl-k">+</span>q<span class="pl-k">*</span>l<span class="pl-k">+</span>n<span class="pl-k">*</span>m,x<span class="pl-k">=</span>(q<span class="pl-k">-</span>.<span class="pl-c1">5</span>)<span class="pl-k">/</span>(n<span class="pl-k">+</span>.<span class="pl-c1">5</span>),v<span class="pl-k">=</span>(q<span class="pl-k">+</span>.<span class="pl-c1">5</span>)<span class="pl-k">/</span>(n<span class="pl-k">-</span>.<span class="pl-c1">5</span>);<span class="pl-k">if</span>(<span class="pl-k">!</span>(v<span class="pl-k">&gt;</span>d)){<span class="pl-k">if</span>(x<span class="pl-k">&lt;</span>e)<span class="pl-k">break</span>;q<span class="pl-k">*</span>q<span class="pl-k">+</span>n<span class="pl-k">*</span>n<span class="pl-k">&lt;</span>f<span class="pl-k">*</span>f<span class="pl-k">&amp;&amp;</span>p(u,w,c,<span class="pl-c1">1</span>);r<span class="pl-k">?</span><span class="pl-v">this</span>._lightPasses(u,w)<span class="pl-k">?</span>(r<span class="pl-k">=!</span><span class="pl-c1">1</span>,d<span class="pl-k">=</span>t)<span class="pl-k">:</span>t<span class="pl-k">=</span>v<span class="pl-k">:!</span><span class="pl-v">this</span>._lightPasses(u,w)<span class="pl-k">&amp;&amp;</span>c<span class="pl-k">&lt;</span>f<span class="pl-k">&amp;&amp;</span>(r<span class="pl-k">=!</span><span class="pl-c1">0</span>,<span class="pl-v">this</span>._castVisibility(a,b,c<span class="pl-k">+</span><span class="pl-c1">1</span>,d,x,f,g,h,l,m,p),t<span class="pl-k">=</span>v)}}<span class="pl-k">if</span>(r)<span class="pl-k">break</span>}};</td>
      </tr>
      <tr>
        <td id="L131" class="blob-num js-line-number" data-line-number="131"></td>
        <td id="LC131" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT</span>.Color<span class="pl-k">=</span>{<span class="pl-en">fromString</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c;<span class="pl-k">if</span>(a <span class="pl-k">in</span> <span class="pl-v">this</span>._cache)b<span class="pl-k">=</span><span class="pl-v">this</span>._cache[a];<span class="pl-k">else</span>{<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>#<span class="pl-pds">&quot;</span></span><span class="pl-k">==</span>a.<span class="pl-c1">charAt</span>(<span class="pl-c1">0</span>))<span class="pl-k">if</span>(b<span class="pl-k">=</span>a.<span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-c1">[<span class="pl-c1">0-9a-f</span>]</span><span class="pl-pds">/</span>gi</span>).map(<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">parseInt</span>(a,<span class="pl-c1">16</span>)}),<span class="pl-c1">3</span><span class="pl-k">==</span>b.<span class="pl-c1">length</span>)b<span class="pl-k">=</span>b.map(<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">17</span><span class="pl-k">*</span>a});<span class="pl-k">else</span> <span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>c;c<span class="pl-k">++</span>)b[c<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">+=</span><span class="pl-c1">16</span><span class="pl-k">*</span>b[c],b.<span class="pl-c1">splice</span>(c,<span class="pl-c1">1</span>);<span class="pl-k">else</span> b<span class="pl-k">=</span>(c<span class="pl-k">=</span>a.<span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">/</span>rgb<span class="pl-cce">\(</span>(<span class="pl-c1">[<span class="pl-c1">0-9</span>, ]</span><span class="pl-k">+</span>)<span class="pl-cce">\)</span><span class="pl-pds">/</span>i</span>))<span class="pl-k">?</span>c[<span class="pl-c1">1</span>].<span class="pl-c1">split</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span><span class="pl-pds">/</span></span>).map(<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">parseInt</span>(a)})<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>];<span class="pl-v">this</span>._cache[a]<span class="pl-k">=</span>b}<span class="pl-k">return</span> b.<span class="pl-c1">slice</span>()},<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>a.<span class="pl-c1">slice</span>(),d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>d;d<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">1</span>;e<span class="pl-k">&lt;</span>arguments.<span class="pl-c1">length</span>;e<span class="pl-k">++</span>)c[d]<span class="pl-k">+=</span></td>
      </tr>
      <tr>
        <td id="L132" class="blob-num js-line-number" data-line-number="132"></td>
        <td id="LC132" class="blob-code blob-code-inner js-file-line">arguments[e][d];<span class="pl-k">return</span> c},<span class="pl-en">add_</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>c;c<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">1</span>;d<span class="pl-k">&lt;</span>arguments.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>)a[c]<span class="pl-k">+=</span>arguments[d][c];<span class="pl-k">return</span> a},<span class="pl-en">multiply</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>a.<span class="pl-c1">slice</span>(),d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>d;d<span class="pl-k">++</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">1</span>;e<span class="pl-k">&lt;</span>arguments.<span class="pl-c1">length</span>;e<span class="pl-k">++</span>)c[d]<span class="pl-k">*=</span>arguments[e][d]<span class="pl-k">/</span><span class="pl-c1">255</span>;c[d]<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(c[d])}<span class="pl-k">return</span> c},<span class="pl-en">multiply_</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>c;c<span class="pl-k">++</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">1</span>;d<span class="pl-k">&lt;</span>arguments.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>)a[c]<span class="pl-k">*=</span>arguments[d][c]<span class="pl-k">/</span><span class="pl-c1">255</span>;a[c]<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(a[c])}<span class="pl-k">return</span> a},<span class="pl-en">interpolate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">3</span><span class="pl-k">&gt;</span>arguments.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span>.<span class="pl-c1">5</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span>a.<span class="pl-c1">slice</span>(),e<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>e;e<span class="pl-k">++</span>)d[e]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L133" class="blob-num js-line-number" data-line-number="133"></td>
        <td id="LC133" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(d[e]<span class="pl-k">+</span>c<span class="pl-k">*</span>(b[e]<span class="pl-k">-</span>a[e]));<span class="pl-k">return</span> d},<span class="pl-en">interpolateHSL</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">3</span><span class="pl-k">&gt;</span>arguments.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span>.<span class="pl-c1">5</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.rgb2hsl(a),e<span class="pl-k">=</span><span class="pl-v">this</span>.rgb2hsl(b),f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>f;f<span class="pl-k">++</span>)d[f]<span class="pl-k">+=</span>c<span class="pl-k">*</span>(e[f]<span class="pl-k">-</span>d[f]);<span class="pl-k">return</span> <span class="pl-v">this</span>.hsl2rgb(d)},<span class="pl-en">randomize</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){b <span class="pl-k">instanceof</span> <span class="pl-c1">Array</span><span class="pl-k">||</span>(b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-c1">ROT</span>.RNG.getNormal(<span class="pl-c1">0</span>,b)));<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>a.<span class="pl-c1">slice</span>(),d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>d;d<span class="pl-k">++</span>)c[d]<span class="pl-k">+=</span>b <span class="pl-k">instanceof</span> <span class="pl-c1">Array</span><span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-c1">ROT</span>.RNG.getNormal(<span class="pl-c1">0</span>,b[d]))<span class="pl-k">:</span>b;<span class="pl-k">return</span> c},<span class="pl-en">rgb2hsl</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a[<span class="pl-c1">0</span>]<span class="pl-k">/</span><span class="pl-c1">255</span>,c<span class="pl-k">=</span>a[<span class="pl-c1">1</span>]<span class="pl-k">/</span><span class="pl-c1">255</span>;a<span class="pl-k">=</span>a[<span class="pl-c1">2</span>]<span class="pl-k">/</span><span class="pl-c1">255</span>;<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(b,c,a),e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(b,c,a),f,g<span class="pl-k">=</span>(d<span class="pl-k">+</span>e)<span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-k">if</span>(d<span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L134" class="blob-num js-line-number" data-line-number="134"></td>
        <td id="LC134" class="blob-code blob-code-inner js-file-line">e)f<span class="pl-k">=</span>e<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">else</span>{<span class="pl-k">var</span> h<span class="pl-k">=</span>d<span class="pl-k">-</span>e,e<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">&lt;</span>g<span class="pl-k">?</span>h<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">-</span>d<span class="pl-k">-</span>e)<span class="pl-k">:</span>h<span class="pl-k">/</span>(d<span class="pl-k">+</span>e);<span class="pl-k">switch</span>(d){<span class="pl-k">case</span> b<span class="pl-k">:</span>f<span class="pl-k">=</span>(c<span class="pl-k">-</span>a)<span class="pl-k">/</span>h<span class="pl-k">+</span>(c<span class="pl-k">&lt;</span>a<span class="pl-k">?</span><span class="pl-c1">6</span><span class="pl-k">:</span><span class="pl-c1">0</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> c<span class="pl-k">:</span>f<span class="pl-k">=</span>(a<span class="pl-k">-</span>b)<span class="pl-k">/</span>h<span class="pl-k">+</span><span class="pl-c1">2</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> a<span class="pl-k">:</span>f<span class="pl-k">=</span>(b<span class="pl-k">-</span>c)<span class="pl-k">/</span>h<span class="pl-k">+</span><span class="pl-c1">4</span>}f<span class="pl-k">/=</span><span class="pl-c1">6</span>}<span class="pl-k">return</span>[f,e,g]},<span class="pl-en">hsl2rgb</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a[<span class="pl-c1">2</span>];<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">==</span>a[<span class="pl-c1">1</span>])<span class="pl-k">return</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-c1">255</span><span class="pl-k">*</span>b),[b,b,b];<span class="pl-k">var</span> <span class="pl-en">c</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">0</span><span class="pl-k">&gt;</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">+=</span><span class="pl-c1">1</span>);<span class="pl-c1">1</span><span class="pl-k">&lt;</span>c<span class="pl-k">&amp;&amp;--</span>c;<span class="pl-k">return</span> c<span class="pl-k">&lt;</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">6</span><span class="pl-k">?</span>a<span class="pl-k">+</span><span class="pl-c1">6</span><span class="pl-k">*</span>(b<span class="pl-k">-</span>a)<span class="pl-k">*</span>c<span class="pl-k">:</span>.<span class="pl-c1">5</span><span class="pl-k">&gt;</span>c<span class="pl-k">?</span>b<span class="pl-k">:</span>c<span class="pl-k">&lt;</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">3</span><span class="pl-k">?</span>a<span class="pl-k">+</span>(b<span class="pl-k">-</span>a)<span class="pl-k">*</span>(<span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">3</span><span class="pl-k">-</span>c)<span class="pl-k">*</span><span class="pl-c1">6</span><span class="pl-k">:</span>a},d<span class="pl-k">=</span>a[<span class="pl-c1">1</span>],d<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">&gt;</span>b<span class="pl-k">?</span>b<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>d)<span class="pl-k">:</span>b<span class="pl-k">+</span>d<span class="pl-k">-</span>b<span class="pl-k">*</span>d,e<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>b<span class="pl-k">-</span>d,b<span class="pl-k">=</span>c(e,d,a[<span class="pl-c1">0</span>]<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>),f<span class="pl-k">=</span>c(e,d,a[<span class="pl-c1">0</span>]);a<span class="pl-k">=</span>c(e,d,a[<span class="pl-c1">0</span>]<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>);<span class="pl-k">return</span>[<span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-c1">255</span><span class="pl-k">*</span>b),<span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-c1">255</span><span class="pl-k">*</span>f),<span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-c1">255</span><span class="pl-k">*</span>a)]},<span class="pl-en">toRGB</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>rgb(<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L135" class="blob-num js-line-number" data-line-number="135"></td>
        <td id="LC135" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>._clamp(a[<span class="pl-c1">0</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-v">this</span>._clamp(a[<span class="pl-c1">1</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-v">this</span>._clamp(a[<span class="pl-c1">2</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span>},<span class="pl-en">toHex</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>[],c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>c;c<span class="pl-k">++</span>)b.<span class="pl-c1">push</span>(<span class="pl-v">this</span>._clamp(a[c]).<span class="pl-c1">toString</span>(<span class="pl-c1">16</span>).lpad(<span class="pl-s"><span class="pl-pds">&quot;</span>0<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">2</span>));<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>#<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>)},<span class="pl-en">_clamp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;</span>a<span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">255</span><span class="pl-k">&lt;</span>a<span class="pl-k">?</span><span class="pl-c1">255</span><span class="pl-k">:</span>a},_cache<span class="pl-k">:</span>{black<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],navy<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">128</span>],darkblue<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">139</span>],mediumblue<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">205</span>],blue<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">255</span>],darkgreen<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">100</span>,<span class="pl-c1">0</span>],green<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">128</span>,<span class="pl-c1">0</span>],teal<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">128</span>,<span class="pl-c1">128</span>],darkcyan<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">139</span>,<span class="pl-c1">139</span>],deepskyblue<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">191</span>,<span class="pl-c1">255</span>],darkturquoise<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">206</span>,<span class="pl-c1">209</span>],mediumspringgreen<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">250</span>,<span class="pl-c1">154</span>],lime<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">255</span>,<span class="pl-c1">0</span>],springgreen<span class="pl-k">:</span>[<span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L136" class="blob-num js-line-number" data-line-number="136"></td>
        <td id="LC136" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">255</span>,<span class="pl-c1">127</span>],aqua<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">255</span>,<span class="pl-c1">255</span>],cyan<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">255</span>,<span class="pl-c1">255</span>],midnightblue<span class="pl-k">:</span>[<span class="pl-c1">25</span>,<span class="pl-c1">25</span>,<span class="pl-c1">112</span>],dodgerblue<span class="pl-k">:</span>[<span class="pl-c1">30</span>,<span class="pl-c1">144</span>,<span class="pl-c1">255</span>],forestgreen<span class="pl-k">:</span>[<span class="pl-c1">34</span>,<span class="pl-c1">139</span>,<span class="pl-c1">34</span>],seagreen<span class="pl-k">:</span>[<span class="pl-c1">46</span>,<span class="pl-c1">139</span>,<span class="pl-c1">87</span>],darkslategray<span class="pl-k">:</span>[<span class="pl-c1">47</span>,<span class="pl-c1">79</span>,<span class="pl-c1">79</span>],darkslategrey<span class="pl-k">:</span>[<span class="pl-c1">47</span>,<span class="pl-c1">79</span>,<span class="pl-c1">79</span>],limegreen<span class="pl-k">:</span>[<span class="pl-c1">50</span>,<span class="pl-c1">205</span>,<span class="pl-c1">50</span>],mediumseagreen<span class="pl-k">:</span>[<span class="pl-c1">60</span>,<span class="pl-c1">179</span>,<span class="pl-c1">113</span>],turquoise<span class="pl-k">:</span>[<span class="pl-c1">64</span>,<span class="pl-c1">224</span>,<span class="pl-c1">208</span>],royalblue<span class="pl-k">:</span>[<span class="pl-c1">65</span>,<span class="pl-c1">105</span>,<span class="pl-c1">225</span>],steelblue<span class="pl-k">:</span>[<span class="pl-c1">70</span>,<span class="pl-c1">130</span>,<span class="pl-c1">180</span>],darkslateblue<span class="pl-k">:</span>[<span class="pl-c1">72</span>,<span class="pl-c1">61</span>,<span class="pl-c1">139</span>],mediumturquoise<span class="pl-k">:</span>[<span class="pl-c1">72</span>,<span class="pl-c1">209</span>,<span class="pl-c1">204</span>],indigo<span class="pl-k">:</span>[<span class="pl-c1">75</span>,<span class="pl-c1">0</span>,<span class="pl-c1">130</span>],darkolivegreen<span class="pl-k">:</span>[<span class="pl-c1">85</span>,<span class="pl-c1">107</span>,<span class="pl-c1">47</span>],cadetblue<span class="pl-k">:</span>[<span class="pl-c1">95</span>,<span class="pl-c1">158</span>,<span class="pl-c1">160</span>],cornflowerblue<span class="pl-k">:</span>[<span class="pl-c1">100</span>,<span class="pl-c1">149</span>,<span class="pl-c1">237</span>],mediumaquamarine<span class="pl-k">:</span>[<span class="pl-c1">102</span>,<span class="pl-c1">205</span>,<span class="pl-c1">170</span>],dimgray<span class="pl-k">:</span>[<span class="pl-c1">105</span>,</td>
      </tr>
      <tr>
        <td id="L137" class="blob-num js-line-number" data-line-number="137"></td>
        <td id="LC137" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">105</span>,<span class="pl-c1">105</span>],dimgrey<span class="pl-k">:</span>[<span class="pl-c1">105</span>,<span class="pl-c1">105</span>,<span class="pl-c1">105</span>],slateblue<span class="pl-k">:</span>[<span class="pl-c1">106</span>,<span class="pl-c1">90</span>,<span class="pl-c1">205</span>],olivedrab<span class="pl-k">:</span>[<span class="pl-c1">107</span>,<span class="pl-c1">142</span>,<span class="pl-c1">35</span>],slategray<span class="pl-k">:</span>[<span class="pl-c1">112</span>,<span class="pl-c1">128</span>,<span class="pl-c1">144</span>],slategrey<span class="pl-k">:</span>[<span class="pl-c1">112</span>,<span class="pl-c1">128</span>,<span class="pl-c1">144</span>],lightslategray<span class="pl-k">:</span>[<span class="pl-c1">119</span>,<span class="pl-c1">136</span>,<span class="pl-c1">153</span>],lightslategrey<span class="pl-k">:</span>[<span class="pl-c1">119</span>,<span class="pl-c1">136</span>,<span class="pl-c1">153</span>],mediumslateblue<span class="pl-k">:</span>[<span class="pl-c1">123</span>,<span class="pl-c1">104</span>,<span class="pl-c1">238</span>],lawngreen<span class="pl-k">:</span>[<span class="pl-c1">124</span>,<span class="pl-c1">252</span>,<span class="pl-c1">0</span>],chartreuse<span class="pl-k">:</span>[<span class="pl-c1">127</span>,<span class="pl-c1">255</span>,<span class="pl-c1">0</span>],aquamarine<span class="pl-k">:</span>[<span class="pl-c1">127</span>,<span class="pl-c1">255</span>,<span class="pl-c1">212</span>],maroon<span class="pl-k">:</span>[<span class="pl-c1">128</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],purple<span class="pl-k">:</span>[<span class="pl-c1">128</span>,<span class="pl-c1">0</span>,<span class="pl-c1">128</span>],olive<span class="pl-k">:</span>[<span class="pl-c1">128</span>,<span class="pl-c1">128</span>,<span class="pl-c1">0</span>],gray<span class="pl-k">:</span>[<span class="pl-c1">128</span>,<span class="pl-c1">128</span>,<span class="pl-c1">128</span>],grey<span class="pl-k">:</span>[<span class="pl-c1">128</span>,<span class="pl-c1">128</span>,<span class="pl-c1">128</span>],skyblue<span class="pl-k">:</span>[<span class="pl-c1">135</span>,<span class="pl-c1">206</span>,<span class="pl-c1">235</span>],lightskyblue<span class="pl-k">:</span>[<span class="pl-c1">135</span>,<span class="pl-c1">206</span>,<span class="pl-c1">250</span>],blueviolet<span class="pl-k">:</span>[<span class="pl-c1">138</span>,<span class="pl-c1">43</span>,<span class="pl-c1">226</span>],darkred<span class="pl-k">:</span>[<span class="pl-c1">139</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],darkmagenta<span class="pl-k">:</span>[<span class="pl-c1">139</span>,<span class="pl-c1">0</span>,<span class="pl-c1">139</span>],saddlebrown<span class="pl-k">:</span>[<span class="pl-c1">139</span>,</td>
      </tr>
      <tr>
        <td id="L138" class="blob-num js-line-number" data-line-number="138"></td>
        <td id="LC138" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">69</span>,<span class="pl-c1">19</span>],darkseagreen<span class="pl-k">:</span>[<span class="pl-c1">143</span>,<span class="pl-c1">188</span>,<span class="pl-c1">143</span>],lightgreen<span class="pl-k">:</span>[<span class="pl-c1">144</span>,<span class="pl-c1">238</span>,<span class="pl-c1">144</span>],mediumpurple<span class="pl-k">:</span>[<span class="pl-c1">147</span>,<span class="pl-c1">112</span>,<span class="pl-c1">216</span>],darkviolet<span class="pl-k">:</span>[<span class="pl-c1">148</span>,<span class="pl-c1">0</span>,<span class="pl-c1">211</span>],palegreen<span class="pl-k">:</span>[<span class="pl-c1">152</span>,<span class="pl-c1">251</span>,<span class="pl-c1">152</span>],darkorchid<span class="pl-k">:</span>[<span class="pl-c1">153</span>,<span class="pl-c1">50</span>,<span class="pl-c1">204</span>],yellowgreen<span class="pl-k">:</span>[<span class="pl-c1">154</span>,<span class="pl-c1">205</span>,<span class="pl-c1">50</span>],sienna<span class="pl-k">:</span>[<span class="pl-c1">160</span>,<span class="pl-c1">82</span>,<span class="pl-c1">45</span>],brown<span class="pl-k">:</span>[<span class="pl-c1">165</span>,<span class="pl-c1">42</span>,<span class="pl-c1">42</span>],darkgray<span class="pl-k">:</span>[<span class="pl-c1">169</span>,<span class="pl-c1">169</span>,<span class="pl-c1">169</span>],darkgrey<span class="pl-k">:</span>[<span class="pl-c1">169</span>,<span class="pl-c1">169</span>,<span class="pl-c1">169</span>],lightblue<span class="pl-k">:</span>[<span class="pl-c1">173</span>,<span class="pl-c1">216</span>,<span class="pl-c1">230</span>],greenyellow<span class="pl-k">:</span>[<span class="pl-c1">173</span>,<span class="pl-c1">255</span>,<span class="pl-c1">47</span>],paleturquoise<span class="pl-k">:</span>[<span class="pl-c1">175</span>,<span class="pl-c1">238</span>,<span class="pl-c1">238</span>],lightsteelblue<span class="pl-k">:</span>[<span class="pl-c1">176</span>,<span class="pl-c1">196</span>,<span class="pl-c1">222</span>],powderblue<span class="pl-k">:</span>[<span class="pl-c1">176</span>,<span class="pl-c1">224</span>,<span class="pl-c1">230</span>],firebrick<span class="pl-k">:</span>[<span class="pl-c1">178</span>,<span class="pl-c1">34</span>,<span class="pl-c1">34</span>],darkgoldenrod<span class="pl-k">:</span>[<span class="pl-c1">184</span>,<span class="pl-c1">134</span>,<span class="pl-c1">11</span>],mediumorchid<span class="pl-k">:</span>[<span class="pl-c1">186</span>,<span class="pl-c1">85</span>,<span class="pl-c1">211</span>],rosybrown<span class="pl-k">:</span>[<span class="pl-c1">188</span>,<span class="pl-c1">143</span>,<span class="pl-c1">143</span>],darkkhaki<span class="pl-k">:</span>[<span class="pl-c1">189</span>,</td>
      </tr>
      <tr>
        <td id="L139" class="blob-num js-line-number" data-line-number="139"></td>
        <td id="LC139" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">183</span>,<span class="pl-c1">107</span>],silver<span class="pl-k">:</span>[<span class="pl-c1">192</span>,<span class="pl-c1">192</span>,<span class="pl-c1">192</span>],mediumvioletred<span class="pl-k">:</span>[<span class="pl-c1">199</span>,<span class="pl-c1">21</span>,<span class="pl-c1">133</span>],indianred<span class="pl-k">:</span>[<span class="pl-c1">205</span>,<span class="pl-c1">92</span>,<span class="pl-c1">92</span>],peru<span class="pl-k">:</span>[<span class="pl-c1">205</span>,<span class="pl-c1">133</span>,<span class="pl-c1">63</span>],chocolate<span class="pl-k">:</span>[<span class="pl-c1">210</span>,<span class="pl-c1">105</span>,<span class="pl-c1">30</span>],tan<span class="pl-k">:</span>[<span class="pl-c1">210</span>,<span class="pl-c1">180</span>,<span class="pl-c1">140</span>],lightgray<span class="pl-k">:</span>[<span class="pl-c1">211</span>,<span class="pl-c1">211</span>,<span class="pl-c1">211</span>],lightgrey<span class="pl-k">:</span>[<span class="pl-c1">211</span>,<span class="pl-c1">211</span>,<span class="pl-c1">211</span>],palevioletred<span class="pl-k">:</span>[<span class="pl-c1">216</span>,<span class="pl-c1">112</span>,<span class="pl-c1">147</span>],thistle<span class="pl-k">:</span>[<span class="pl-c1">216</span>,<span class="pl-c1">191</span>,<span class="pl-c1">216</span>],orchid<span class="pl-k">:</span>[<span class="pl-c1">218</span>,<span class="pl-c1">112</span>,<span class="pl-c1">214</span>],goldenrod<span class="pl-k">:</span>[<span class="pl-c1">218</span>,<span class="pl-c1">165</span>,<span class="pl-c1">32</span>],crimson<span class="pl-k">:</span>[<span class="pl-c1">220</span>,<span class="pl-c1">20</span>,<span class="pl-c1">60</span>],gainsboro<span class="pl-k">:</span>[<span class="pl-c1">220</span>,<span class="pl-c1">220</span>,<span class="pl-c1">220</span>],plum<span class="pl-k">:</span>[<span class="pl-c1">221</span>,<span class="pl-c1">160</span>,<span class="pl-c1">221</span>],burlywood<span class="pl-k">:</span>[<span class="pl-c1">222</span>,<span class="pl-c1">184</span>,<span class="pl-c1">135</span>],lightcyan<span class="pl-k">:</span>[<span class="pl-c1">224</span>,<span class="pl-c1">255</span>,<span class="pl-c1">255</span>],lavender<span class="pl-k">:</span>[<span class="pl-c1">230</span>,<span class="pl-c1">230</span>,<span class="pl-c1">250</span>],darksalmon<span class="pl-k">:</span>[<span class="pl-c1">233</span>,<span class="pl-c1">150</span>,<span class="pl-c1">122</span>],violet<span class="pl-k">:</span>[<span class="pl-c1">238</span>,<span class="pl-c1">130</span>,<span class="pl-c1">238</span>],palegoldenrod<span class="pl-k">:</span>[<span class="pl-c1">238</span>,<span class="pl-c1">232</span>,<span class="pl-c1">170</span>],lightcoral<span class="pl-k">:</span>[<span class="pl-c1">240</span>,</td>
      </tr>
      <tr>
        <td id="L140" class="blob-num js-line-number" data-line-number="140"></td>
        <td id="LC140" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">128</span>,<span class="pl-c1">128</span>],khaki<span class="pl-k">:</span>[<span class="pl-c1">240</span>,<span class="pl-c1">230</span>,<span class="pl-c1">140</span>],aliceblue<span class="pl-k">:</span>[<span class="pl-c1">240</span>,<span class="pl-c1">248</span>,<span class="pl-c1">255</span>],honeydew<span class="pl-k">:</span>[<span class="pl-c1">240</span>,<span class="pl-c1">255</span>,<span class="pl-c1">240</span>],azure<span class="pl-k">:</span>[<span class="pl-c1">240</span>,<span class="pl-c1">255</span>,<span class="pl-c1">255</span>],sandybrown<span class="pl-k">:</span>[<span class="pl-c1">244</span>,<span class="pl-c1">164</span>,<span class="pl-c1">96</span>],wheat<span class="pl-k">:</span>[<span class="pl-c1">245</span>,<span class="pl-c1">222</span>,<span class="pl-c1">179</span>],beige<span class="pl-k">:</span>[<span class="pl-c1">245</span>,<span class="pl-c1">245</span>,<span class="pl-c1">220</span>],whitesmoke<span class="pl-k">:</span>[<span class="pl-c1">245</span>,<span class="pl-c1">245</span>,<span class="pl-c1">245</span>],mintcream<span class="pl-k">:</span>[<span class="pl-c1">245</span>,<span class="pl-c1">255</span>,<span class="pl-c1">250</span>],ghostwhite<span class="pl-k">:</span>[<span class="pl-c1">248</span>,<span class="pl-c1">248</span>,<span class="pl-c1">255</span>],salmon<span class="pl-k">:</span>[<span class="pl-c1">250</span>,<span class="pl-c1">128</span>,<span class="pl-c1">114</span>],antiquewhite<span class="pl-k">:</span>[<span class="pl-c1">250</span>,<span class="pl-c1">235</span>,<span class="pl-c1">215</span>],linen<span class="pl-k">:</span>[<span class="pl-c1">250</span>,<span class="pl-c1">240</span>,<span class="pl-c1">230</span>],lightgoldenrodyellow<span class="pl-k">:</span>[<span class="pl-c1">250</span>,<span class="pl-c1">250</span>,<span class="pl-c1">210</span>],oldlace<span class="pl-k">:</span>[<span class="pl-c1">253</span>,<span class="pl-c1">245</span>,<span class="pl-c1">230</span>],red<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],fuchsia<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">0</span>,<span class="pl-c1">255</span>],magenta<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">0</span>,<span class="pl-c1">255</span>],deeppink<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">20</span>,<span class="pl-c1">147</span>],orangered<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">69</span>,<span class="pl-c1">0</span>],tomato<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">99</span>,<span class="pl-c1">71</span>],hotpink<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">105</span>,<span class="pl-c1">180</span>],coral<span class="pl-k">:</span>[<span class="pl-c1">255</span>,</td>
      </tr>
      <tr>
        <td id="L141" class="blob-num js-line-number" data-line-number="141"></td>
        <td id="LC141" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">127</span>,<span class="pl-c1">80</span>],darkorange<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">140</span>,<span class="pl-c1">0</span>],lightsalmon<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">160</span>,<span class="pl-c1">122</span>],orange<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">165</span>,<span class="pl-c1">0</span>],lightpink<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">182</span>,<span class="pl-c1">193</span>],pink<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">192</span>,<span class="pl-c1">203</span>],gold<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">215</span>,<span class="pl-c1">0</span>],peachpuff<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">218</span>,<span class="pl-c1">185</span>],navajowhite<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">222</span>,<span class="pl-c1">173</span>],moccasin<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">228</span>,<span class="pl-c1">181</span>],bisque<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">228</span>,<span class="pl-c1">196</span>],mistyrose<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">228</span>,<span class="pl-c1">225</span>],blanchedalmond<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">235</span>,<span class="pl-c1">205</span>],papayawhip<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">239</span>,<span class="pl-c1">213</span>],lavenderblush<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">240</span>,<span class="pl-c1">245</span>],seashell<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">245</span>,<span class="pl-c1">238</span>],cornsilk<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">248</span>,<span class="pl-c1">220</span>],lemonchiffon<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">250</span>,<span class="pl-c1">205</span>],floralwhite<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">250</span>,<span class="pl-c1">240</span>],snow<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">250</span>,<span class="pl-c1">250</span>],yellow<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">255</span>,<span class="pl-c1">0</span>],lightyellow<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">255</span>,<span class="pl-c1">224</span>],ivory<span class="pl-k">:</span>[<span class="pl-c1">255</span>,</td>
      </tr>
      <tr>
        <td id="L142" class="blob-num js-line-number" data-line-number="142"></td>
        <td id="LC142" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">255</span>,<span class="pl-c1">240</span>],white<span class="pl-k">:</span>[<span class="pl-c1">255</span>,<span class="pl-c1">255</span>,<span class="pl-c1">255</span>]}};<span class="pl-c1">ROT</span>.<span class="pl-en">Lighting</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>._reflectivityCallback<span class="pl-k">=</span>a;<span class="pl-v">this</span>._options<span class="pl-k">=</span>{passes<span class="pl-k">:</span><span class="pl-c1">1</span>,emissionThreshold<span class="pl-k">:</span><span class="pl-c1">100</span>,range<span class="pl-k">:</span><span class="pl-c1">10</span>};<span class="pl-v">this</span>._fov<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>._lights<span class="pl-k">=</span>{};<span class="pl-v">this</span>._reflectivityCache<span class="pl-k">=</span>{};<span class="pl-v">this</span>._fovCache<span class="pl-k">=</span>{};<span class="pl-v">this</span>.setOptions(b)};<span class="pl-c1">ROT.Lighting</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setOptions</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b <span class="pl-k">in</span> a)<span class="pl-v">this</span>._options[b]<span class="pl-k">=</span>a[b];a<span class="pl-k">&amp;&amp;</span>a.range<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.<span class="pl-c1">reset</span>();<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">ROT.Lighting</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setFOV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._fov<span class="pl-k">=</span>a;<span class="pl-v">this</span>._fovCache<span class="pl-k">=</span>{};<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L143" class="blob-num js-line-number" data-line-number="143"></td>
        <td id="LC143" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Lighting</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setLight</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){a<span class="pl-k">=</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b;c<span class="pl-k">?</span><span class="pl-v">this</span>._lights[a]<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>string<span class="pl-pds">&quot;</span></span><span class="pl-k">==typeof</span> c<span class="pl-k">?</span><span class="pl-c1">ROT</span>.Color.fromString(c)<span class="pl-k">:</span>c<span class="pl-k">:delete</span> <span class="pl-v">this</span>._lights[a];<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">ROT.Lighting</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clearLights</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>._lights<span class="pl-k">=</span>{}};<span class="pl-c1">ROT.Lighting</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">reset</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>._reflectivityCache<span class="pl-k">=</span>{};<span class="pl-v">this</span>._fovCache<span class="pl-k">=</span>{};<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L144" class="blob-num js-line-number" data-line-number="144"></td>
        <td id="LC144" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Lighting</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">compute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>{},c<span class="pl-k">=</span>{},d<span class="pl-k">=</span>{},e;<span class="pl-k">for</span>(e <span class="pl-k">in</span> <span class="pl-v">this</span>._lights){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-v">this</span>._lights[e];c[e]<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>];<span class="pl-c1">ROT</span>.Color.add_(c[e],f)}<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-v">this</span>._options.passes;e<span class="pl-k">++</span>)<span class="pl-v">this</span>._emitLight(c,d,b),e<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">!=</span><span class="pl-v">this</span>._options.passes<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>._computeEmitters(d,b));<span class="pl-k">for</span>(<span class="pl-k">var</span> g <span class="pl-k">in</span> d)c<span class="pl-k">=</span>g.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span>),b<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(c[<span class="pl-c1">0</span>]),c<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(c[<span class="pl-c1">1</span>]),a(b,c,d[g]);<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L145" class="blob-num js-line-number" data-line-number="145"></td>
        <td id="LC145" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Lighting</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_emitLight</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> d <span class="pl-k">in</span> a){<span class="pl-k">var</span> e<span class="pl-k">=</span>d.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span>),f<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(e[<span class="pl-c1">0</span>]),e<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(e[<span class="pl-c1">1</span>]);<span class="pl-v">this</span>._emitLightFromCell(f,e,a[d],b);c[d]<span class="pl-k">=</span><span class="pl-c1">1</span>}<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L146" class="blob-num js-line-number" data-line-number="146"></td>
        <td id="LC146" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Lighting</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_computeEmitters</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>{},d;<span class="pl-k">for</span>(d <span class="pl-k">in</span> a)<span class="pl-k">if</span>(<span class="pl-k">!</span>(d <span class="pl-k">in</span> b)){<span class="pl-k">var</span> e<span class="pl-k">=</span>a[d];<span class="pl-k">if</span>(d <span class="pl-k">in</span> <span class="pl-v">this</span>._reflectivityCache)<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-v">this</span>._reflectivityCache[d];<span class="pl-k">else</span>{<span class="pl-k">var</span> g<span class="pl-k">=</span>d.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span>),f<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(g[<span class="pl-c1">0</span>]),g<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(g[<span class="pl-c1">1</span>]),f<span class="pl-k">=</span><span class="pl-v">this</span>._reflectivityCallback(f,g);<span class="pl-v">this</span>._reflectivityCache[d]<span class="pl-k">=</span>f}<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">!=</span>f){<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span>[],h<span class="pl-k">=</span><span class="pl-c1">0</span>,l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>l;l<span class="pl-k">++</span>){<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(e[l]<span class="pl-k">*</span>f);g[l]<span class="pl-k">=</span>m;h<span class="pl-k">+=</span>m}h<span class="pl-k">&gt;</span><span class="pl-v">this</span>._options.emissionThreshold<span class="pl-k">&amp;&amp;</span>(c[d]<span class="pl-k">=</span>g)}}<span class="pl-k">return</span> c};</td>
      </tr>
      <tr>
        <td id="L147" class="blob-num js-line-number" data-line-number="147"></td>
        <td id="LC147" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Lighting</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_emitLightFromCell</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b;a<span class="pl-k">=</span>e <span class="pl-k">in</span> <span class="pl-v">this</span>._fovCache<span class="pl-k">?</span><span class="pl-v">this</span>._fovCache[e]<span class="pl-k">:</span><span class="pl-v">this</span>._updateFOV(a,b);<span class="pl-k">for</span>(<span class="pl-k">var</span> f <span class="pl-k">in</span> a){b<span class="pl-k">=</span>a[f];f <span class="pl-k">in</span> d<span class="pl-k">?</span>e<span class="pl-k">=</span>d[f]<span class="pl-k">:</span>(e<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],d[f]<span class="pl-k">=</span>e);<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>g;g<span class="pl-k">++</span>)e[g]<span class="pl-k">+=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(c[g]<span class="pl-k">*</span>b)}<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">ROT.Lighting</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_updateFOV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>{};<span class="pl-v">this</span>._fovCache[a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b]<span class="pl-k">=</span>c;<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>._options.range;<span class="pl-v">this</span>._fov.compute(a,b,d,<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">g</span>,<span class="pl-smi">h</span>){g<span class="pl-k">=</span>h<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>g<span class="pl-k">/</span>d);<span class="pl-c1">0</span><span class="pl-k">!=</span>g<span class="pl-k">&amp;&amp;</span>(c[a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b]<span class="pl-k">=</span>g)}.bind(<span class="pl-v">this</span>));<span class="pl-k">return</span> c};</td>
      </tr>
      <tr>
        <td id="L148" class="blob-num js-line-number" data-line-number="148"></td>
        <td id="LC148" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT</span>.<span class="pl-en">Path</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-v">this</span>._toX<span class="pl-k">=</span>a;<span class="pl-v">this</span>._toY<span class="pl-k">=</span>b;<span class="pl-v">this</span>._fromY<span class="pl-k">=</span><span class="pl-v">this</span>._fromX<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>._passableCallback<span class="pl-k">=</span>c;<span class="pl-v">this</span>._options<span class="pl-k">=</span>{topology<span class="pl-k">:</span><span class="pl-c1">8</span>};<span class="pl-k">for</span>(<span class="pl-k">var</span> e <span class="pl-k">in</span> d)<span class="pl-v">this</span>._options[e]<span class="pl-k">=</span>d[e];<span class="pl-v">this</span>._dirs<span class="pl-k">=</span><span class="pl-c1">ROT</span>.DIRS[<span class="pl-v">this</span>._options.topology];<span class="pl-c1">8</span><span class="pl-k">==</span><span class="pl-v">this</span>._options.topology<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>._dirs<span class="pl-k">=</span>[<span class="pl-v">this</span>._dirs[<span class="pl-c1">0</span>],<span class="pl-v">this</span>._dirs[<span class="pl-c1">2</span>],<span class="pl-v">this</span>._dirs[<span class="pl-c1">4</span>],<span class="pl-v">this</span>._dirs[<span class="pl-c1">6</span>],<span class="pl-v">this</span>._dirs[<span class="pl-c1">1</span>],<span class="pl-v">this</span>._dirs[<span class="pl-c1">3</span>],<span class="pl-v">this</span>._dirs[<span class="pl-c1">5</span>],<span class="pl-v">this</span>._dirs[<span class="pl-c1">7</span>]])};<span class="pl-c1">ROT.Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">compute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){};</td>
      </tr>
      <tr>
        <td id="L149" class="blob-num js-line-number" data-line-number="149"></td>
        <td id="LC149" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_getNeighbors</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>[],d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-v">this</span>._dirs.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>._dirs[d],f<span class="pl-k">=</span>a<span class="pl-k">+</span>e[<span class="pl-c1">0</span>],e<span class="pl-k">=</span>b<span class="pl-k">+</span>e[<span class="pl-c1">1</span>];<span class="pl-v">this</span>._passableCallback(f,e)<span class="pl-k">&amp;&amp;</span>c.<span class="pl-c1">push</span>([f,e])}<span class="pl-k">return</span> c};<span class="pl-c1">ROT.Path</span>.<span class="pl-en">Dijkstra</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">ROT</span>.Path.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b,c,d);<span class="pl-v">this</span>._computed<span class="pl-k">=</span>{};<span class="pl-v">this</span>._todo<span class="pl-k">=</span>[];<span class="pl-v">this</span>._add(a,b,<span class="pl-c1">null</span>)};<span class="pl-c1">ROT</span>.Path.Dijkstra.extend(<span class="pl-c1">ROT</span>.Path);</td>
      </tr>
      <tr>
        <td id="L150" class="blob-num js-line-number" data-line-number="150"></td>
        <td id="LC150" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Path.Dijkstra</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">compute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b;d <span class="pl-k">in</span> <span class="pl-v">this</span>._computed<span class="pl-k">||</span><span class="pl-v">this</span>._compute(a,b);<span class="pl-k">if</span>(d <span class="pl-k">in</span> <span class="pl-v">this</span>._computed)<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-v">this</span>._computed[d];a;)c(a.<span class="pl-c1">x</span>,a.<span class="pl-c1">y</span>),a<span class="pl-k">=</span>a.prev};<span class="pl-c1">ROT.Path.Dijkstra</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_compute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(;<span class="pl-v">this</span>._todo.<span class="pl-c1">length</span>;){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>._todo.<span class="pl-c1">shift</span>();<span class="pl-k">if</span>(c.<span class="pl-c1">x</span><span class="pl-k">==</span>a<span class="pl-k">&amp;&amp;</span>c.<span class="pl-c1">y</span><span class="pl-k">==</span>b)<span class="pl-k">break</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>._getNeighbors(c.<span class="pl-c1">x</span>,c.<span class="pl-c1">y</span>),e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>d.<span class="pl-c1">length</span>;e<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>d[e],g<span class="pl-k">=</span>f[<span class="pl-c1">0</span>],f<span class="pl-k">=</span>f[<span class="pl-c1">1</span>];g<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>f <span class="pl-k">in</span> <span class="pl-v">this</span>._computed<span class="pl-k">||</span><span class="pl-v">this</span>._add(g,f,c)}}};</td>
      </tr>
      <tr>
        <td id="L151" class="blob-num js-line-number" data-line-number="151"></td>
        <td id="LC151" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Path.Dijkstra</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_add</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){c<span class="pl-k">=</span>{x<span class="pl-k">:</span>a,y<span class="pl-k">:</span>b,prev<span class="pl-k">:</span>c};<span class="pl-v">this</span>._computed[a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b]<span class="pl-k">=</span>c;<span class="pl-v">this</span>._todo.<span class="pl-c1">push</span>(c)};<span class="pl-c1">ROT.Path</span>.<span class="pl-en">AStar</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">ROT</span>.Path.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b,c,d);<span class="pl-v">this</span>._todo<span class="pl-k">=</span>[];<span class="pl-v">this</span>._done<span class="pl-k">=</span>{};<span class="pl-v">this</span>._fromY<span class="pl-k">=</span><span class="pl-v">this</span>._fromX<span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-c1">ROT</span>.Path.AStar.extend(<span class="pl-c1">ROT</span>.Path);</td>
      </tr>
      <tr>
        <td id="L152" class="blob-num js-line-number" data-line-number="152"></td>
        <td id="LC152" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Path.AStar</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">compute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>._todo<span class="pl-k">=</span>[];<span class="pl-v">this</span>._done<span class="pl-k">=</span>{};<span class="pl-v">this</span>._fromX<span class="pl-k">=</span>a;<span class="pl-v">this</span>._fromY<span class="pl-k">=</span>b;<span class="pl-k">for</span>(<span class="pl-v">this</span>._add(<span class="pl-v">this</span>._toX,<span class="pl-v">this</span>._toY,<span class="pl-c1">null</span>);<span class="pl-v">this</span>._todo.<span class="pl-c1">length</span>;){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>._todo.<span class="pl-c1">shift</span>();<span class="pl-k">if</span>(d.<span class="pl-c1">x</span><span class="pl-k">==</span>a<span class="pl-k">&amp;&amp;</span>d.<span class="pl-c1">y</span><span class="pl-k">==</span>b)<span class="pl-k">break</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>._getNeighbors(d.<span class="pl-c1">x</span>,d.<span class="pl-c1">y</span>),f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>e.<span class="pl-c1">length</span>;f<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>e[f],h<span class="pl-k">=</span>g[<span class="pl-c1">0</span>],g<span class="pl-k">=</span>g[<span class="pl-c1">1</span>];h<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>g <span class="pl-k">in</span> <span class="pl-v">this</span>._done<span class="pl-k">||</span><span class="pl-v">this</span>._add(h,g,d)}}<span class="pl-k">if</span>(d<span class="pl-k">=</span><span class="pl-v">this</span>._done[a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b])<span class="pl-k">for</span>(;d;)c(d.<span class="pl-c1">x</span>,d.<span class="pl-c1">y</span>),d<span class="pl-k">=</span>d.prev};</td>
      </tr>
      <tr>
        <td id="L153" class="blob-num js-line-number" data-line-number="153"></td>
        <td id="LC153" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Path.AStar</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_add</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){c<span class="pl-k">=</span>{x<span class="pl-k">:</span>a,y<span class="pl-k">:</span>b,prev<span class="pl-k">:</span>c,g<span class="pl-k">:</span>c<span class="pl-k">?</span>c.g<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>,h<span class="pl-k">:</span><span class="pl-v">this</span>._distance(a,b)};<span class="pl-v">this</span>._done[a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b]<span class="pl-k">=</span>c;a<span class="pl-k">=</span>c.g<span class="pl-k">+</span>c.h;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-v">this</span>._todo.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>._todo[b];<span class="pl-k">if</span>(a<span class="pl-k">&lt;</span>d.g<span class="pl-k">+</span>d.h){<span class="pl-v">this</span>._todo.<span class="pl-c1">splice</span>(b,<span class="pl-c1">0</span>,c);<span class="pl-k">return</span>}}<span class="pl-v">this</span>._todo.<span class="pl-c1">push</span>(c)};</td>
      </tr>
      <tr>
        <td id="L154" class="blob-num js-line-number" data-line-number="154"></td>
        <td id="LC154" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ROT.Path.AStar</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_distance</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">switch</span>(<span class="pl-v">this</span>._options.topology){<span class="pl-k">case</span> <span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(a<span class="pl-k">-</span><span class="pl-v">this</span>._fromX)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(b<span class="pl-k">-</span><span class="pl-v">this</span>._fromY);<span class="pl-k">case</span> <span class="pl-c1">6</span><span class="pl-k">:</span><span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(a<span class="pl-k">-</span><span class="pl-v">this</span>._fromX),d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(b<span class="pl-k">-</span><span class="pl-v">this</span>._fromY);<span class="pl-k">return</span> d<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,(c<span class="pl-k">-</span>d)<span class="pl-k">/</span><span class="pl-c1">2</span>);<span class="pl-k">case</span> <span class="pl-c1">8</span><span class="pl-k">:</span><span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(a<span class="pl-k">-</span><span class="pl-v">this</span>._fromX),<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(b<span class="pl-k">-</span><span class="pl-v">this</span>._fromY))}<span class="pl-k">throw</span> Error(<span class="pl-s"><span class="pl-pds">&quot;</span>Illegal topology<span class="pl-pds">&quot;</span></span>);};</td>
      </tr>
</table>

  </div>

</div>

<a href="#jump-to-line" rel="facebox[.linejump]" data-hotkey="l" style="display:none">Jump to Line</a>
<div id="jump-to-line" style="display:none">
  <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="" class="js-jump-to-line-form" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
    <input class="linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" aria-label="Jump to line" autofocus>
    <button type="submit" class="btn">Go</button>
</form></div>

        </div>
      </div>
      <div class="modal-backdrop"></div>
    </div>
  </div>


    </div>

      <div class="container">
  <div class="site-footer" role="contentinfo">
    <ul class="site-footer-links right">
        <li><a href="https://status.github.com/" data-ga-click="Footer, go to status, text:status">Status</a></li>
      <li><a href="https://developer.github.com" data-ga-click="Footer, go to api, text:api">API</a></li>
      <li><a href="https://training.github.com" data-ga-click="Footer, go to training, text:training">Training</a></li>
      <li><a href="https://shop.github.com" data-ga-click="Footer, go to shop, text:shop">Shop</a></li>
        <li><a href="https://github.com/blog" data-ga-click="Footer, go to blog, text:blog">Blog</a></li>
        <li><a href="https://github.com/about" data-ga-click="Footer, go to about, text:about">About</a></li>
        <li><a href="https://github.com/pricing" data-ga-click="Footer, go to pricing, text:pricing">Pricing</a></li>

    </ul>

    <a href="https://github.com" aria-label="Homepage">
      <span class="mega-octicon octicon-mark-github" title="GitHub"></span>
</a>
    <ul class="site-footer-links">
      <li>&copy; 2015 <span title="0.08060s from github-fe145-cp1-prd.iad.github.net">GitHub</span>, Inc.</li>
        <li><a href="https://github.com/site/terms" data-ga-click="Footer, go to terms, text:terms">Terms</a></li>
        <li><a href="https://github.com/site/privacy" data-ga-click="Footer, go to privacy, text:privacy">Privacy</a></li>
        <li><a href="https://github.com/security" data-ga-click="Footer, go to security, text:security">Security</a></li>
        <li><a href="https://github.com/contact" data-ga-click="Footer, go to contact, text:contact">Contact</a></li>
        <li><a href="https://help.github.com" data-ga-click="Footer, go to help, text:help">Help</a></li>
    </ul>
  </div>
</div>



    
    
    

    <div id="ajax-error-message" class="flash flash-error">
      <span class="octicon octicon-alert"></span>
      <button type="button" class="flash-close js-flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
        <span class="octicon octicon-x"></span>
      </button>
      Something went wrong with that request. Please try again.
    </div>


      <script crossorigin="anonymous" src="https://assets-cdn.github.com/assets/frameworks-f8473dece7242da6a20d52313634881b3975c52cebaa1e6c38157c0f26185691.js"></script>
      <script async="async" crossorigin="anonymous" src="https://assets-cdn.github.com/assets/github-793c4a31dc9391088af134cd081e7e95532b060b6c6a6e1c40744ee6b9d3b711.js"></script>
      
      
    <div class="js-stale-session-flash stale-session-flash flash flash-warn flash-banner hidden">
      <span class="octicon octicon-alert"></span>
      <span class="signed-in-tab-flash">You signed in with another tab or window. <a href="">Reload</a> to refresh your session.</span>
      <span class="signed-out-tab-flash">You signed out in another tab or window. <a href="">Reload</a> to refresh your session.</span>
    </div>
  </body>
</html>

